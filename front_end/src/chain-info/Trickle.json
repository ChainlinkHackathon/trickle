{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumUpkeepInterval",
          "type": "uint256"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "_exchangeRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sellToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        }
      ],
      "name": "RecurringOrderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "tokenPairHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "SwapFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "tokenPairHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "SwapSucceeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sellToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        }
      ],
      "name": "TokenPairCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_tokenPairHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_orderHash",
          "type": "bytes32"
        }
      ],
      "name": "deleteRecurringOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_tokenPairHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_orderHash",
          "type": "bytes32"
        }
      ],
      "name": "getOrderData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastExecution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interval",
              "type": "uint256"
            }
          ],
          "internalType": "struct Trickle.RecurringOrder",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_tokenPairHash",
          "type": "bytes32"
        }
      ],
      "name": "getOrders",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_tokenPairHash",
          "type": "bytes32"
        }
      ],
      "name": "getTokenPairData",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTokenPairs",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumUpkeepInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sellToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sellAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "name": "setRecurringOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sellToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sellAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        }
      ],
      "name": "setRecurringOrderWithStartTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "/home/chris/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/access/Ownable.sol",
    "1": "/home/chris/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/security/ReentrancyGuard.sol",
    "10": "/home/chris/.brownie/packages/Uniswap/v2-periphery@1.0.0-beta.0/contracts/interfaces/IUniswapV2Router01.sol",
    "11": "/home/chris/.brownie/packages/Uniswap/v2-periphery@1.0.0-beta.0/contracts/interfaces/IUniswapV2Router02.sol",
    "12": "contracts/ExchangeAdapter.sol",
    "13": "contracts/Trickle.sol",
    "2": "/home/chris/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/token/ERC20/IERC20.sol",
    "5": "/home/chris/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/utils/Context.sol",
    "8": "/home/chris/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/utils/structs/EnumerableSet.sol"
  },
  "ast": {
    "absolutePath": "contracts/Trickle.sol",
    "exportedSymbols": {
      "EnumerableSet": [
        2968
      ],
      "ExchangeAdapter": [
        142
      ],
      "IERC20": [
        1297
      ],
      "IUniswapV2Router02": [
        2369
      ],
      "KeeperCompatibleInterface": [
        166
      ],
      "Trickle": [
        1075
      ]
    },
    "id": 1076,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 144,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:13"
      },
      {
        "absolutePath": "/home/chris/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/utils/structs/EnumerableSet.sol",
        "file": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol",
        "id": 145,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1076,
        "sourceUnit": 2969,
        "src": "57:65:13",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/ExchangeAdapter.sol",
        "file": "./ExchangeAdapter.sol",
        "id": 147,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1076,
        "sourceUnit": 143,
        "src": "123:56:13",
        "symbolAliases": [
          {
            "foreign": {
              "id": 146,
              "name": "ExchangeAdapter",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "132:15:13",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/chris/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "id": 149,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1076,
        "sourceUnit": 1298,
        "src": "180:72:13",
        "symbolAliases": [
          {
            "foreign": {
              "id": 148,
              "name": "IERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "189:6:13",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/chris/.brownie/packages/Uniswap/v2-periphery@1.0.0-beta.0/contracts/interfaces/IUniswapV2Router02.sol",
        "file": "@uniswap-periphery/contracts/interfaces/IUniswapV2Router02.sol",
        "id": 151,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1076,
        "sourceUnit": 2370,
        "src": "253:100:13",
        "symbolAliases": [
          {
            "foreign": {
              "id": 150,
              "name": "IUniswapV2Router02",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "262:18:13",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "KeeperCompatibleInterface",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 166,
        "linearizedBaseContracts": [
          166
        ],
        "name": "KeeperCompatibleInterface",
        "nameLocation": "365:25:13",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "functionSelector": "6e04ff0d",
            "id": 160,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "checkUpkeep",
            "nameLocation": "406:11:13",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 154,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 153,
                  "mutability": "mutable",
                  "name": "checkData",
                  "nameLocation": "433:9:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 160,
                  "src": "418:24:13",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 152,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "418:5:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "417:26:13"
            },
            "returnParameters": {
              "id": 159,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 156,
                  "mutability": "mutable",
                  "name": "upkeepNeeded",
                  "nameLocation": "483:12:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 160,
                  "src": "478:17:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 155,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "478:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 158,
                  "mutability": "mutable",
                  "name": "performData",
                  "nameLocation": "510:11:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 160,
                  "src": "497:24:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 157,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "497:5:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "477:45:13"
            },
            "scope": 166,
            "src": "397:126:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "4585e33b",
            "id": 165,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "performUpkeep",
            "nameLocation": "538:13:13",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 163,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 162,
                  "mutability": "mutable",
                  "name": "performData",
                  "nameLocation": "567:11:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 165,
                  "src": "552:26:13",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 161,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "552:5:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "551:28:13"
            },
            "returnParameters": {
              "id": 164,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "588:0:13"
            },
            "scope": 166,
            "src": "529:60:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1076,
        "src": "355:236:13",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 167,
              "name": "KeeperCompatibleInterface",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 166,
              "src": "613:25:13"
            },
            "id": 168,
            "nodeType": "InheritanceSpecifier",
            "src": "613:25:13"
          },
          {
            "baseName": {
              "id": 169,
              "name": "ExchangeAdapter",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 142,
              "src": "640:15:13"
            },
            "id": 170,
            "nodeType": "InheritanceSpecifier",
            "src": "640:15:13"
          }
        ],
        "canonicalName": "Trickle",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 1075,
        "linearizedBaseContracts": [
          1075,
          142,
          1179,
          2990,
          1219,
          166
        ],
        "name": "Trickle",
        "nameLocation": "602:7:13",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 174,
            "libraryName": {
              "id": 171,
              "name": "EnumerableSet",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2968,
              "src": "668:13:13"
            },
            "nodeType": "UsingForDirective",
            "src": "662:49:13",
            "typeName": {
              "id": 173,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 172,
                "name": "EnumerableSet.Bytes32Set",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 2574,
                "src": "686:24:13"
              },
              "referencedDeclaration": 2574,
              "src": "686:24:13",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage_ptr",
                "typeString": "struct EnumerableSet.Bytes32Set"
              }
            }
          },
          {
            "canonicalName": "Trickle.RecurringOrder",
            "id": 183,
            "members": [
              {
                "constant": false,
                "id": 176,
                "mutability": "mutable",
                "name": "user",
                "nameLocation": "869:4:13",
                "nodeType": "VariableDeclaration",
                "scope": 183,
                "src": "861:12:13",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 175,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "861:7:13",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 178,
                "mutability": "mutable",
                "name": "sellAmount",
                "nameLocation": "891:10:13",
                "nodeType": "VariableDeclaration",
                "scope": 183,
                "src": "883:18:13",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 177,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "883:7:13",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 180,
                "mutability": "mutable",
                "name": "lastExecution",
                "nameLocation": "919:13:13",
                "nodeType": "VariableDeclaration",
                "scope": 183,
                "src": "911:21:13",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 179,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "911:7:13",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 182,
                "mutability": "mutable",
                "name": "interval",
                "nameLocation": "950:8:13",
                "nodeType": "VariableDeclaration",
                "scope": 183,
                "src": "942:16:13",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 181,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "942:7:13",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "RecurringOrder",
            "nameLocation": "836:14:13",
            "nodeType": "StructDefinition",
            "scope": 1075,
            "src": "829:136:13",
            "visibility": "public"
          },
          {
            "canonicalName": "Trickle.TokenPair",
            "id": 196,
            "members": [
              {
                "constant": false,
                "id": 185,
                "mutability": "mutable",
                "name": "sellToken",
                "nameLocation": "1105:9:13",
                "nodeType": "VariableDeclaration",
                "scope": 196,
                "src": "1097:17:13",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 184,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1097:7:13",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 187,
                "mutability": "mutable",
                "name": "buyToken",
                "nameLocation": "1132:8:13",
                "nodeType": "VariableDeclaration",
                "scope": 196,
                "src": "1124:16:13",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 186,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1124:7:13",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 192,
                "mutability": "mutable",
                "name": "orders",
                "nameLocation": "1185:6:13",
                "nodeType": "VariableDeclaration",
                "scope": 196,
                "src": "1150:41:13",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RecurringOrder_$183_storage_$",
                  "typeString": "mapping(bytes32 => struct Trickle.RecurringOrder)"
                },
                "typeName": {
                  "id": 191,
                  "keyType": {
                    "id": 188,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1158:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "1150:34:13",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RecurringOrder_$183_storage_$",
                    "typeString": "mapping(bytes32 => struct Trickle.RecurringOrder)"
                  },
                  "valueType": {
                    "id": 190,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 189,
                      "name": "RecurringOrder",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 183,
                      "src": "1169:14:13"
                    },
                    "referencedDeclaration": 183,
                    "src": "1169:14:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_RecurringOrder_$183_storage_ptr",
                      "typeString": "struct Trickle.RecurringOrder"
                    }
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 195,
                "mutability": "mutable",
                "name": "registeredOrders",
                "nameLocation": "1226:16:13",
                "nodeType": "VariableDeclaration",
                "scope": 196,
                "src": "1201:41:13",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage_ptr",
                  "typeString": "struct EnumerableSet.Bytes32Set"
                },
                "typeName": {
                  "id": 194,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 193,
                    "name": "EnumerableSet.Bytes32Set",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 2574,
                    "src": "1201:24:13"
                  },
                  "referencedDeclaration": 2574,
                  "src": "1201:24:13",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage_ptr",
                    "typeString": "struct EnumerableSet.Bytes32Set"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "TokenPair",
            "nameLocation": "1077:9:13",
            "nodeType": "StructDefinition",
            "scope": 1075,
            "src": "1070:179:13",
            "visibility": "public"
          },
          {
            "canonicalName": "Trickle.TokenPairPendingOrders",
            "id": 202,
            "members": [
              {
                "constant": false,
                "id": 198,
                "mutability": "mutable",
                "name": "tokenPairHash",
                "nameLocation": "1398:13:13",
                "nodeType": "VariableDeclaration",
                "scope": 202,
                "src": "1390:21:13",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 197,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "1390:7:13",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 201,
                "mutability": "mutable",
                "name": "orders",
                "nameLocation": "1431:6:13",
                "nodeType": "VariableDeclaration",
                "scope": 202,
                "src": "1421:16:13",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                  "typeString": "bytes32[]"
                },
                "typeName": {
                  "baseType": {
                    "id": 199,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1421:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 200,
                  "nodeType": "ArrayTypeName",
                  "src": "1421:9:13",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                    "typeString": "bytes32[]"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "TokenPairPendingOrders",
            "nameLocation": "1357:22:13",
            "nodeType": "StructDefinition",
            "scope": 1075,
            "src": "1350:94:13",
            "visibility": "public"
          },
          {
            "anonymous": false,
            "id": 208,
            "name": "TokenPairCreated",
            "nameLocation": "1497:16:13",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 207,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 204,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "sellToken",
                  "nameLocation": "1522:9:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 208,
                  "src": "1514:17:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 203,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1514:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 206,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "buyToken",
                  "nameLocation": "1541:8:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 208,
                  "src": "1533:16:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 205,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1533:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1513:37:13"
            },
            "src": "1491:60:13"
          },
          {
            "anonymous": false,
            "id": 220,
            "name": "RecurringOrderUpdated",
            "nameLocation": "1563:21:13",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 219,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 210,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "sellToken",
                  "nameLocation": "1602:9:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 220,
                  "src": "1594:17:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 209,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1594:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 212,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "buyToken",
                  "nameLocation": "1629:8:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 220,
                  "src": "1621:16:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 211,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1621:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 214,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "sellAmount",
                  "nameLocation": "1655:10:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 220,
                  "src": "1647:18:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 213,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1647:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 216,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "interval",
                  "nameLocation": "1683:8:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 220,
                  "src": "1675:16:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 215,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1675:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 218,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "startTimestamp",
                  "nameLocation": "1709:14:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 220,
                  "src": "1701:22:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 217,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1701:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1584:145:13"
            },
            "src": "1557:173:13"
          },
          {
            "anonymous": false,
            "id": 226,
            "name": "SwapFailed",
            "nameLocation": "1742:10:13",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 225,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 222,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokenPairHash",
                  "nameLocation": "1761:13:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 226,
                  "src": "1753:21:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 221,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1753:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 224,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "orderHash",
                  "nameLocation": "1784:9:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 226,
                  "src": "1776:17:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 223,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1776:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1752:42:13"
            },
            "src": "1736:59:13"
          },
          {
            "anonymous": false,
            "id": 232,
            "name": "SwapSucceeded",
            "nameLocation": "1806:13:13",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 231,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 228,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokenPairHash",
                  "nameLocation": "1828:13:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 232,
                  "src": "1820:21:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 227,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1820:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 230,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "orderHash",
                  "nameLocation": "1851:9:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 232,
                  "src": "1843:17:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 229,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1843:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1819:42:13"
            },
            "src": "1800:62:13"
          },
          {
            "constant": false,
            "id": 237,
            "mutability": "mutable",
            "name": "userToTokenPairList",
            "nameLocation": "2050:19:13",
            "nodeType": "VariableDeclaration",
            "scope": 1075,
            "src": "2005:64:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Bytes32Set_$2574_storage_$",
              "typeString": "mapping(address => struct EnumerableSet.Bytes32Set)"
            },
            "typeName": {
              "id": 236,
              "keyType": {
                "id": 233,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "2013:7:13",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "2005:44:13",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Bytes32Set_$2574_storage_$",
                "typeString": "mapping(address => struct EnumerableSet.Bytes32Set)"
              },
              "valueType": {
                "id": 235,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 234,
                  "name": "EnumerableSet.Bytes32Set",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2574,
                  "src": "2024:24:13"
                },
                "referencedDeclaration": 2574,
                "src": "2024:24:13",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage_ptr",
                  "typeString": "struct EnumerableSet.Bytes32Set"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 244,
            "mutability": "mutable",
            "name": "userToOrderHash",
            "nameLocation": "2140:15:13",
            "nodeType": "VariableDeclaration",
            "scope": 1075,
            "src": "2075:80:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_struct$_Bytes32Set_$2574_storage_$_$",
              "typeString": "mapping(address => mapping(bytes32 => struct EnumerableSet.Bytes32Set))"
            },
            "typeName": {
              "id": 243,
              "keyType": {
                "id": 238,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "2083:7:13",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "2075:64:13",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_struct$_Bytes32Set_$2574_storage_$_$",
                "typeString": "mapping(address => mapping(bytes32 => struct EnumerableSet.Bytes32Set))"
              },
              "valueType": {
                "id": 242,
                "keyType": {
                  "id": 239,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "2102:7:13",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "nodeType": "Mapping",
                "src": "2094:44:13",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Bytes32Set_$2574_storage_$",
                  "typeString": "mapping(bytes32 => struct EnumerableSet.Bytes32Set)"
                },
                "valueType": {
                  "id": 241,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 240,
                    "name": "EnumerableSet.Bytes32Set",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 2574,
                    "src": "2113:24:13"
                  },
                  "referencedDeclaration": 2574,
                  "src": "2113:24:13",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage_ptr",
                    "typeString": "struct EnumerableSet.Bytes32Set"
                  }
                }
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 249,
            "mutability": "mutable",
            "name": "tokenPairs",
            "nameLocation": "2259:10:13",
            "nodeType": "VariableDeclaration",
            "scope": 1075,
            "src": "2229:40:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_TokenPair_$196_storage_$",
              "typeString": "mapping(bytes32 => struct Trickle.TokenPair)"
            },
            "typeName": {
              "id": 248,
              "keyType": {
                "id": 245,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "2237:7:13",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "2229:29:13",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_TokenPair_$196_storage_$",
                "typeString": "mapping(bytes32 => struct Trickle.TokenPair)"
              },
              "valueType": {
                "id": 247,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 246,
                  "name": "TokenPair",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 196,
                  "src": "2248:9:13"
                },
                "referencedDeclaration": 196,
                "src": "2248:9:13",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                  "typeString": "struct Trickle.TokenPair"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 252,
            "mutability": "mutable",
            "name": "initializedTokenPairs",
            "nameLocation": "2387:21:13",
            "nodeType": "VariableDeclaration",
            "scope": 1075,
            "src": "2362:46:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
              "typeString": "struct EnumerableSet.Bytes32Set"
            },
            "typeName": {
              "id": 251,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 250,
                "name": "EnumerableSet.Bytes32Set",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 2574,
                "src": "2362:24:13"
              },
              "referencedDeclaration": 2574,
              "src": "2362:24:13",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage_ptr",
                "typeString": "struct EnumerableSet.Bytes32Set"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "functionSelector": "790fc5fb",
            "id": 254,
            "mutability": "mutable",
            "name": "minimumUpkeepInterval",
            "nameLocation": "2430:21:13",
            "nodeType": "VariableDeclaration",
            "scope": 1075,
            "src": "2415:36:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 253,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2415:7:13",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 256,
            "mutability": "mutable",
            "name": "lastUpkeep",
            "nameLocation": "2465:10:13",
            "nodeType": "VariableDeclaration",
            "scope": 1075,
            "src": "2457:18:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 255,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2457:7:13",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 272,
              "nodeType": "Block",
              "src": "2966:63:13",
              "statements": [
                {
                  "expression": {
                    "id": 270,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 268,
                      "name": "minimumUpkeepInterval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 254,
                      "src": "2976:21:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 269,
                      "name": "_minimumUpkeepInterval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 259,
                      "src": "3000:22:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2976:46:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 271,
                  "nodeType": "ExpressionStatement",
                  "src": "2976:46:13"
                }
              ]
            },
            "documentation": {
              "id": 257,
              "nodeType": "StructuredDocumentation",
              "src": "2532:287:13",
              "text": " Creates new instance of Trickle contract\n @param _minimumUpkeepInterval   Minimum interval between upkeeps independent of users orders\n @param _exchangeRouter          Address of Sushiswap / UniswapV2 router contract to execute trades against"
            },
            "id": 273,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 265,
                    "name": "_exchangeRouter",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 262,
                    "src": "2949:15:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IUniswapV2Router02_$2369",
                      "typeString": "contract IUniswapV2Router02"
                    }
                  }
                ],
                "id": 266,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 264,
                  "name": "ExchangeAdapter",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 142,
                  "src": "2933:15:13"
                },
                "nodeType": "ModifierInvocation",
                "src": "2933:32:13"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 263,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 259,
                  "mutability": "mutable",
                  "name": "_minimumUpkeepInterval",
                  "nameLocation": "2853:22:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 273,
                  "src": "2845:30:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 258,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2845:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 262,
                  "mutability": "mutable",
                  "name": "_exchangeRouter",
                  "nameLocation": "2904:15:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 273,
                  "src": "2885:34:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IUniswapV2Router02_$2369",
                    "typeString": "contract IUniswapV2Router02"
                  },
                  "typeName": {
                    "id": 261,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 260,
                      "name": "IUniswapV2Router02",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2369,
                      "src": "2885:18:13"
                    },
                    "referencedDeclaration": 2369,
                    "src": "2885:18:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IUniswapV2Router02_$2369",
                      "typeString": "contract IUniswapV2Router02"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2835:90:13"
            },
            "returnParameters": {
              "id": 267,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2966:0:13"
            },
            "scope": 1075,
            "src": "2824:205:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 293,
              "nodeType": "Block",
              "src": "3542:172:13",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 286,
                        "name": "_sellToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 276,
                        "src": "3601:10:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 287,
                        "name": "_buyToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 278,
                        "src": "3625:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 288,
                        "name": "_sellAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 280,
                        "src": "3648:11:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 289,
                        "name": "_interval",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 282,
                        "src": "3673:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "30",
                        "id": 290,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3696:1:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        }
                      ],
                      "id": 285,
                      "name": "setRecurringOrderWithStartTimestamp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 478,
                      "src": "3552:35:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256,uint256,uint256)"
                      }
                    },
                    "id": 291,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3552:155:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 292,
                  "nodeType": "ExpressionStatement",
                  "src": "3552:155:13"
                }
              ]
            },
            "documentation": {
              "id": 274,
              "nodeType": "StructuredDocumentation",
              "src": "3035:351:13",
              "text": " Creates a new recurring order for the given User starting immediately.\n @param _sellToken        Address of token to sell\n @param _buyToken         Address of token to buy\n @param _sellAmount       Amount of sell token to sell in each trade\n @param _interval         Interval of execution in ms"
            },
            "functionSelector": "8bd9de58",
            "id": 294,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setRecurringOrder",
            "nameLocation": "3400:17:13",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 283,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 276,
                  "mutability": "mutable",
                  "name": "_sellToken",
                  "nameLocation": "3435:10:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 294,
                  "src": "3427:18:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 275,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3427:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 278,
                  "mutability": "mutable",
                  "name": "_buyToken",
                  "nameLocation": "3463:9:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 294,
                  "src": "3455:17:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 277,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3455:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 280,
                  "mutability": "mutable",
                  "name": "_sellAmount",
                  "nameLocation": "3490:11:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 294,
                  "src": "3482:19:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 279,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3482:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 282,
                  "mutability": "mutable",
                  "name": "_interval",
                  "nameLocation": "3519:9:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 294,
                  "src": "3511:17:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 281,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3511:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3417:117:13"
            },
            "returnParameters": {
              "id": 284,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3542:0:13"
            },
            "scope": 1075,
            "src": "3391:323:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 477,
              "nodeType": "Block",
              "src": "4393:1673:13",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 311,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 309,
                          "name": "_sellAmount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 301,
                          "src": "4411:11:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 310,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4425:1:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "4411:15:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "616d6f756e742063616e6e6f742062652030",
                        "id": 312,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4428:20:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d6709398e5a0b78efe2c0f926a4bede798ed30235f19b4d9a0883f2ebb65f426",
                          "typeString": "literal_string \"amount cannot be 0\""
                        },
                        "value": "amount cannot be 0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d6709398e5a0b78efe2c0f926a4bede798ed30235f19b4d9a0883f2ebb65f426",
                          "typeString": "literal_string \"amount cannot be 0\""
                        }
                      ],
                      "id": 308,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4403:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 313,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4403:46:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 314,
                  "nodeType": "ExpressionStatement",
                  "src": "4403:46:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 321,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 316,
                          "name": "_sellToken",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 297,
                          "src": "4467:10:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 319,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4489:1:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 318,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4481:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 317,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4481:7:13",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 320,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4481:10:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "4467:24:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "73656c6c546f6b656e2063616e6e6f74206265207a65726f2061646472657373",
                        "id": 322,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4493:34:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_96b4ea5437a4997fb4d041cb8b1e9ebb7beb1efa6ad395ed18750255b96dc9d9",
                          "typeString": "literal_string \"sellToken cannot be zero address\""
                        },
                        "value": "sellToken cannot be zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_96b4ea5437a4997fb4d041cb8b1e9ebb7beb1efa6ad395ed18750255b96dc9d9",
                          "typeString": "literal_string \"sellToken cannot be zero address\""
                        }
                      ],
                      "id": 315,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4459:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 323,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4459:69:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 324,
                  "nodeType": "ExpressionStatement",
                  "src": "4459:69:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 331,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 326,
                          "name": "_buyToken",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 299,
                          "src": "4546:9:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 329,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4567:1:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 328,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4559:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 327,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4559:7:13",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 330,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4559:10:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "4546:23:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "627579546f6b656e2063616e6e6f74206265207a65726f2061646472657373",
                        "id": 332,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4571:33:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1b3b361a127a09e1bfc2273525bfb180a613e606914356234f6458e15ff16a02",
                          "typeString": "literal_string \"buyToken cannot be zero address\""
                        },
                        "value": "buyToken cannot be zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1b3b361a127a09e1bfc2273525bfb180a613e606914356234f6458e15ff16a02",
                          "typeString": "literal_string \"buyToken cannot be zero address\""
                        }
                      ],
                      "id": 325,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4538:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 333,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4538:67:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 334,
                  "nodeType": "ExpressionStatement",
                  "src": "4538:67:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 338,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 336,
                          "name": "_interval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 303,
                          "src": "4636:9:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "id": 337,
                          "name": "minimumUpkeepInterval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 254,
                          "src": "4648:21:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4636:33:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "696e74657276616c2068617320746f2062652067726561746572207468616e206d696e696d756d55706b656570496e74657276616c",
                        "id": 339,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4683:55:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f81d5ea92f6affbabbb9e0e50a0a11634525a85cfdc461a370b7dea883e60d1f",
                          "typeString": "literal_string \"interval has to be greater than minimumUpkeepInterval\""
                        },
                        "value": "interval has to be greater than minimumUpkeepInterval"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f81d5ea92f6affbabbb9e0e50a0a11634525a85cfdc461a370b7dea883e60d1f",
                          "typeString": "literal_string \"interval has to be greater than minimumUpkeepInterval\""
                        }
                      ],
                      "id": 335,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4615:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 340,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4615:133:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 341,
                  "nodeType": "ExpressionStatement",
                  "src": "4615:133:13"
                },
                {
                  "assignments": [
                    343
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 343,
                      "mutability": "mutable",
                      "name": "tokenPairHash",
                      "nameLocation": "4766:13:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 477,
                      "src": "4758:21:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 342,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "4758:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 351,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 347,
                            "name": "_sellToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 297,
                            "src": "4822:10:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 348,
                            "name": "_buyToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 299,
                            "src": "4834:9:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 345,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "4805:3:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 346,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "4805:16:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 349,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4805:39:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 344,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "4782:9:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 350,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4782:72:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4758:96:13"
                },
                {
                  "assignments": [
                    354
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 354,
                      "mutability": "mutable",
                      "name": "tokenPair",
                      "nameLocation": "4883:9:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 477,
                      "src": "4865:27:13",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                        "typeString": "struct Trickle.TokenPair"
                      },
                      "typeName": {
                        "id": 353,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 352,
                          "name": "TokenPair",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 196,
                          "src": "4865:9:13"
                        },
                        "referencedDeclaration": 196,
                        "src": "4865:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                          "typeString": "struct Trickle.TokenPair"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 358,
                  "initialValue": {
                    "baseExpression": {
                      "id": 355,
                      "name": "tokenPairs",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 249,
                      "src": "4895:10:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_TokenPair_$196_storage_$",
                        "typeString": "mapping(bytes32 => struct Trickle.TokenPair storage ref)"
                      }
                    },
                    "id": 357,
                    "indexExpression": {
                      "id": 356,
                      "name": "tokenPairHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 343,
                      "src": "4906:13:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4895:25:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TokenPair_$196_storage",
                      "typeString": "struct Trickle.TokenPair storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4865:55:13"
                },
                {
                  "condition": {
                    "id": 363,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "4934:46:13",
                    "subExpression": {
                      "arguments": [
                        {
                          "id": 361,
                          "name": "tokenPairHash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 343,
                          "src": "4966:13:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        ],
                        "expression": {
                          "id": 359,
                          "name": "initializedTokenPairs",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 252,
                          "src": "4935:21:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
                            "typeString": "struct EnumerableSet.Bytes32Set storage ref"
                          }
                        },
                        "id": 360,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "contains",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2628,
                        "src": "4935:30:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_struct$_Bytes32Set_$2574_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32Set_$2574_storage_ptr_$",
                          "typeString": "function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) view returns (bool)"
                        }
                      },
                      "id": 362,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4935:45:13",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 388,
                  "nodeType": "IfStatement",
                  "src": "4930:265:13",
                  "trueBody": {
                    "id": 387,
                    "nodeType": "Block",
                    "src": "4982:213:13",
                    "statements": [
                      {
                        "expression": {
                          "id": 368,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 364,
                              "name": "tokenPair",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 354,
                              "src": "4996:9:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                                "typeString": "struct Trickle.TokenPair storage pointer"
                              }
                            },
                            "id": 366,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "sellToken",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 185,
                            "src": "4996:19:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 367,
                            "name": "_sellToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 297,
                            "src": "5018:10:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "4996:32:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 369,
                        "nodeType": "ExpressionStatement",
                        "src": "4996:32:13"
                      },
                      {
                        "expression": {
                          "id": 374,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 370,
                              "name": "tokenPair",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 354,
                              "src": "5042:9:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                                "typeString": "struct Trickle.TokenPair storage pointer"
                              }
                            },
                            "id": 372,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "buyToken",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 187,
                            "src": "5042:18:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 373,
                            "name": "_buyToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 299,
                            "src": "5063:9:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "5042:30:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 375,
                        "nodeType": "ExpressionStatement",
                        "src": "5042:30:13"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 379,
                              "name": "tokenPairHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 343,
                              "src": "5112:13:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "id": 376,
                              "name": "initializedTokenPairs",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 252,
                              "src": "5086:21:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
                                "typeString": "struct EnumerableSet.Bytes32Set storage ref"
                              }
                            },
                            "id": 378,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2592,
                            "src": "5086:25:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Bytes32Set_$2574_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32Set_$2574_storage_ptr_$",
                              "typeString": "function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) returns (bool)"
                            }
                          },
                          "id": 380,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5086:40:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 381,
                        "nodeType": "ExpressionStatement",
                        "src": "5086:40:13"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 383,
                              "name": "_sellToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 297,
                              "src": "5162:10:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 384,
                              "name": "_buyToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 299,
                              "src": "5174:9:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 382,
                            "name": "TokenPairCreated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 208,
                            "src": "5145:16:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 385,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5145:39:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 386,
                        "nodeType": "EmitStatement",
                        "src": "5140:44:13"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 394,
                        "name": "tokenPairHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 343,
                        "src": "5240:13:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "baseExpression": {
                          "id": 389,
                          "name": "userToTokenPairList",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 237,
                          "src": "5204:19:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Bytes32Set_$2574_storage_$",
                            "typeString": "mapping(address => struct EnumerableSet.Bytes32Set storage ref)"
                          }
                        },
                        "id": 392,
                        "indexExpression": {
                          "expression": {
                            "id": 390,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "5224:3:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 391,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "5224:10:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5204:31:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
                          "typeString": "struct EnumerableSet.Bytes32Set storage ref"
                        }
                      },
                      "id": 393,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "add",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2592,
                      "src": "5204:35:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Bytes32Set_$2574_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32Set_$2574_storage_ptr_$",
                        "typeString": "function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) returns (bool)"
                      }
                    },
                    "id": 395,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5204:50:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 396,
                  "nodeType": "ExpressionStatement",
                  "src": "5204:50:13"
                },
                {
                  "assignments": [
                    398
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 398,
                      "mutability": "mutable",
                      "name": "orderHash",
                      "nameLocation": "5273:9:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 477,
                      "src": "5265:17:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 397,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "5265:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 409,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 402,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "5342:3:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 403,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "5342:10:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 404,
                            "name": "_sellAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 301,
                            "src": "5370:11:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 405,
                            "name": "_interval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 303,
                            "src": "5399:9:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 406,
                            "name": "_startTimestamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 305,
                            "src": "5426:15:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 400,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "5308:3:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 401,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "5308:16:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 407,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5308:147:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 399,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "5285:9:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 408,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5285:180:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5265:200:13"
                },
                {
                  "assignments": [
                    412
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 412,
                      "mutability": "mutable",
                      "name": "order",
                      "nameLocation": "5498:5:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 477,
                      "src": "5475:28:13",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_RecurringOrder_$183_storage_ptr",
                        "typeString": "struct Trickle.RecurringOrder"
                      },
                      "typeName": {
                        "id": 411,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 410,
                          "name": "RecurringOrder",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 183,
                          "src": "5475:14:13"
                        },
                        "referencedDeclaration": 183,
                        "src": "5475:14:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_RecurringOrder_$183_storage_ptr",
                          "typeString": "struct Trickle.RecurringOrder"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 417,
                  "initialValue": {
                    "baseExpression": {
                      "expression": {
                        "id": 413,
                        "name": "tokenPair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 354,
                        "src": "5506:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                          "typeString": "struct Trickle.TokenPair storage pointer"
                        }
                      },
                      "id": 414,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "orders",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 192,
                      "src": "5506:16:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RecurringOrder_$183_storage_$",
                        "typeString": "mapping(bytes32 => struct Trickle.RecurringOrder storage ref)"
                      }
                    },
                    "id": 416,
                    "indexExpression": {
                      "id": 415,
                      "name": "orderHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 398,
                      "src": "5523:9:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "5506:27:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_RecurringOrder_$183_storage",
                      "typeString": "struct Trickle.RecurringOrder storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5475:58:13"
                },
                {
                  "condition": {
                    "id": 423,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "5547:47:13",
                    "subExpression": {
                      "arguments": [
                        {
                          "id": 421,
                          "name": "orderHash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 398,
                          "src": "5584:9:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "id": 418,
                            "name": "tokenPair",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 354,
                            "src": "5548:9:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                              "typeString": "struct Trickle.TokenPair storage pointer"
                            }
                          },
                          "id": 419,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "registeredOrders",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 195,
                          "src": "5548:26:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
                            "typeString": "struct EnumerableSet.Bytes32Set storage ref"
                          }
                        },
                        "id": 420,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "contains",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2628,
                        "src": "5548:35:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_struct$_Bytes32Set_$2574_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32Set_$2574_storage_ptr_$",
                          "typeString": "function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) view returns (bool)"
                        }
                      },
                      "id": 422,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5548:46:13",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 440,
                  "nodeType": "IfStatement",
                  "src": "5543:156:13",
                  "trueBody": {
                    "id": 439,
                    "nodeType": "Block",
                    "src": "5596:103:13",
                    "statements": [
                      {
                        "expression": {
                          "id": 429,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 424,
                              "name": "order",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 412,
                              "src": "5610:5:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RecurringOrder_$183_storage_ptr",
                                "typeString": "struct Trickle.RecurringOrder storage pointer"
                              }
                            },
                            "id": 426,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "user",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 176,
                            "src": "5610:10:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 427,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "5623:3:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 428,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "5623:10:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "5610:23:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 430,
                        "nodeType": "ExpressionStatement",
                        "src": "5610:23:13"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 436,
                              "name": "orderHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 398,
                              "src": "5678:9:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "expression": {
                                "id": 431,
                                "name": "tokenPair",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 354,
                                "src": "5647:9:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                                  "typeString": "struct Trickle.TokenPair storage pointer"
                                }
                              },
                              "id": 434,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "registeredOrders",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 195,
                              "src": "5647:26:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
                                "typeString": "struct EnumerableSet.Bytes32Set storage ref"
                              }
                            },
                            "id": 435,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2592,
                            "src": "5647:30:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Bytes32Set_$2574_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32Set_$2574_storage_ptr_$",
                              "typeString": "function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) returns (bool)"
                            }
                          },
                          "id": 437,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5647:41:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 438,
                        "nodeType": "ExpressionStatement",
                        "src": "5647:41:13"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 448,
                        "name": "orderHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 398,
                        "src": "5755:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "baseExpression": {
                          "baseExpression": {
                            "id": 441,
                            "name": "userToOrderHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 244,
                            "src": "5708:15:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_struct$_Bytes32Set_$2574_storage_$_$",
                              "typeString": "mapping(address => mapping(bytes32 => struct EnumerableSet.Bytes32Set storage ref))"
                            }
                          },
                          "id": 445,
                          "indexExpression": {
                            "expression": {
                              "id": 442,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "5724:3:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 443,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "5724:10:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5708:27:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Bytes32Set_$2574_storage_$",
                            "typeString": "mapping(bytes32 => struct EnumerableSet.Bytes32Set storage ref)"
                          }
                        },
                        "id": 446,
                        "indexExpression": {
                          "id": 444,
                          "name": "tokenPairHash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 343,
                          "src": "5736:13:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5708:42:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
                          "typeString": "struct EnumerableSet.Bytes32Set storage ref"
                        }
                      },
                      "id": 447,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "add",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2592,
                      "src": "5708:46:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Bytes32Set_$2574_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32Set_$2574_storage_ptr_$",
                        "typeString": "function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) returns (bool)"
                      }
                    },
                    "id": 449,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5708:57:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 450,
                  "nodeType": "ExpressionStatement",
                  "src": "5708:57:13"
                },
                {
                  "expression": {
                    "id": 455,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 451,
                        "name": "order",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 412,
                        "src": "5776:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_RecurringOrder_$183_storage_ptr",
                          "typeString": "struct Trickle.RecurringOrder storage pointer"
                        }
                      },
                      "id": 453,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "sellAmount",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 178,
                      "src": "5776:16:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 454,
                      "name": "_sellAmount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 301,
                      "src": "5795:11:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5776:30:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 456,
                  "nodeType": "ExpressionStatement",
                  "src": "5776:30:13"
                },
                {
                  "expression": {
                    "id": 461,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 457,
                        "name": "order",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 412,
                        "src": "5816:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_RecurringOrder_$183_storage_ptr",
                          "typeString": "struct Trickle.RecurringOrder storage pointer"
                        }
                      },
                      "id": 459,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "lastExecution",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 180,
                      "src": "5816:19:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 460,
                      "name": "_startTimestamp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 305,
                      "src": "5838:15:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5816:37:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 462,
                  "nodeType": "ExpressionStatement",
                  "src": "5816:37:13"
                },
                {
                  "expression": {
                    "id": 467,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 463,
                        "name": "order",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 412,
                        "src": "5863:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_RecurringOrder_$183_storage_ptr",
                          "typeString": "struct Trickle.RecurringOrder storage pointer"
                        }
                      },
                      "id": 465,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "interval",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 182,
                      "src": "5863:14:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 466,
                      "name": "_interval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 303,
                      "src": "5880:9:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5863:26:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 468,
                  "nodeType": "ExpressionStatement",
                  "src": "5863:26:13"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 470,
                        "name": "_sellToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 297,
                        "src": "5939:10:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 471,
                        "name": "_buyToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 299,
                        "src": "5963:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 472,
                        "name": "_sellAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 301,
                        "src": "5986:11:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 473,
                        "name": "_interval",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 303,
                        "src": "6011:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 474,
                        "name": "_startTimestamp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 305,
                        "src": "6034:15:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 469,
                      "name": "RecurringOrderUpdated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 220,
                      "src": "5904:21:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256,uint256,uint256)"
                      }
                    },
                    "id": 475,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5904:155:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 476,
                  "nodeType": "EmitStatement",
                  "src": "5899:160:13"
                }
              ]
            },
            "documentation": {
              "id": 295,
              "nodeType": "StructuredDocumentation",
              "src": "3720:466:13",
              "text": " Creates a new recurring order for the given User starting from the given block timestamp.\n @param _sellToken        Address of token to sell\n @param _buyToken         Address of token to buy\n @param _sellAmount       Amount of sell token to sell in each trade\n @param _interval         Interval of execution in ms\n @param _startTimestamp   Block timestamp from which to start the execution of this order"
            },
            "functionSelector": "57819593",
            "id": 478,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setRecurringOrderWithStartTimestamp",
            "nameLocation": "4200:35:13",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 306,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 297,
                  "mutability": "mutable",
                  "name": "_sellToken",
                  "nameLocation": "4253:10:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 478,
                  "src": "4245:18:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 296,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4245:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 299,
                  "mutability": "mutable",
                  "name": "_buyToken",
                  "nameLocation": "4281:9:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 478,
                  "src": "4273:17:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 298,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4273:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 301,
                  "mutability": "mutable",
                  "name": "_sellAmount",
                  "nameLocation": "4308:11:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 478,
                  "src": "4300:19:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 300,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4300:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 303,
                  "mutability": "mutable",
                  "name": "_interval",
                  "nameLocation": "4337:9:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 478,
                  "src": "4329:17:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 302,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4329:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 305,
                  "mutability": "mutable",
                  "name": "_startTimestamp",
                  "nameLocation": "4364:15:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 478,
                  "src": "4356:23:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 304,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4356:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4235:150:13"
            },
            "returnParameters": {
              "id": 307,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4393:0:13"
            },
            "scope": 1075,
            "src": "4191:1875:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 522,
              "nodeType": "Block",
              "src": "6424:403:13",
              "statements": [
                {
                  "assignments": [
                    488
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 488,
                      "mutability": "mutable",
                      "name": "tokenPair",
                      "nameLocation": "6452:9:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 522,
                      "src": "6434:27:13",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                        "typeString": "struct Trickle.TokenPair"
                      },
                      "typeName": {
                        "id": 487,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 486,
                          "name": "TokenPair",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 196,
                          "src": "6434:9:13"
                        },
                        "referencedDeclaration": 196,
                        "src": "6434:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                          "typeString": "struct Trickle.TokenPair"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 492,
                  "initialValue": {
                    "baseExpression": {
                      "id": 489,
                      "name": "tokenPairs",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 249,
                      "src": "6464:10:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_TokenPair_$196_storage_$",
                        "typeString": "mapping(bytes32 => struct Trickle.TokenPair storage ref)"
                      }
                    },
                    "id": 491,
                    "indexExpression": {
                      "id": 490,
                      "name": "_tokenPairHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 481,
                      "src": "6475:14:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "6464:26:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TokenPair_$196_storage",
                      "typeString": "struct Trickle.TokenPair storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6434:56:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 497,
                            "name": "_orderHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 483,
                            "src": "6557:10:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "expression": {
                              "id": 494,
                              "name": "tokenPair",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 488,
                              "src": "6521:9:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                                "typeString": "struct Trickle.TokenPair storage pointer"
                              }
                            },
                            "id": 495,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "registeredOrders",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 195,
                            "src": "6521:26:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
                              "typeString": "struct EnumerableSet.Bytes32Set storage ref"
                            }
                          },
                          "id": 496,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "contains",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2628,
                          "src": "6521:35:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_struct$_Bytes32Set_$2574_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32Set_$2574_storage_ptr_$",
                            "typeString": "function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) view returns (bool)"
                          }
                        },
                        "id": 498,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6521:47:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f5244455220544f2044454c45544520444f4553204e4f54204558495354",
                        "id": 499,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6582:32:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ee8a87e4dafda9533d33c33a6063ac956f9f55312b56f2e2f383c97de9eee438",
                          "typeString": "literal_string \"ORDER TO DELETE DOES NOT EXIST\""
                        },
                        "value": "ORDER TO DELETE DOES NOT EXIST"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ee8a87e4dafda9533d33c33a6063ac956f9f55312b56f2e2f383c97de9eee438",
                          "typeString": "literal_string \"ORDER TO DELETE DOES NOT EXIST\""
                        }
                      ],
                      "id": 493,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6500:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 500,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6500:124:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 501,
                  "nodeType": "ExpressionStatement",
                  "src": "6500:124:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 510,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "expression": {
                                "id": 503,
                                "name": "tokenPair",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 488,
                                "src": "6655:9:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                                  "typeString": "struct Trickle.TokenPair storage pointer"
                                }
                              },
                              "id": 504,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "orders",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 192,
                              "src": "6655:16:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RecurringOrder_$183_storage_$",
                                "typeString": "mapping(bytes32 => struct Trickle.RecurringOrder storage ref)"
                              }
                            },
                            "id": 506,
                            "indexExpression": {
                              "id": 505,
                              "name": "_orderHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 483,
                              "src": "6672:10:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6655:28:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_RecurringOrder_$183_storage",
                              "typeString": "struct Trickle.RecurringOrder storage ref"
                            }
                          },
                          "id": 507,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "user",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 176,
                          "src": "6655:33:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "id": 508,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "6692:3:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 509,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "6692:10:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6655:47:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "43414e4e4f542044454c455445204f52444552204f4620444946464552454e542055534552",
                        "id": 511,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6716:39:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3044fdc29593988705bc64d5704601f8ecb3e02661a39e460a404ced499b023b",
                          "typeString": "literal_string \"CANNOT DELETE ORDER OF DIFFERENT USER\""
                        },
                        "value": "CANNOT DELETE ORDER OF DIFFERENT USER"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3044fdc29593988705bc64d5704601f8ecb3e02661a39e460a404ced499b023b",
                          "typeString": "literal_string \"CANNOT DELETE ORDER OF DIFFERENT USER\""
                        }
                      ],
                      "id": 502,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6634:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 512,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6634:131:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 513,
                  "nodeType": "ExpressionStatement",
                  "src": "6634:131:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 519,
                        "name": "_orderHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 483,
                        "src": "6809:10:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "expression": {
                          "id": 514,
                          "name": "tokenPair",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 488,
                          "src": "6775:9:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                            "typeString": "struct Trickle.TokenPair storage pointer"
                          }
                        },
                        "id": 517,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "registeredOrders",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 195,
                        "src": "6775:26:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
                          "typeString": "struct EnumerableSet.Bytes32Set storage ref"
                        }
                      },
                      "id": 518,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "remove",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2610,
                      "src": "6775:33:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Bytes32Set_$2574_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32Set_$2574_storage_ptr_$",
                        "typeString": "function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) returns (bool)"
                      }
                    },
                    "id": 520,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6775:45:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 521,
                  "nodeType": "ExpressionStatement",
                  "src": "6775:45:13"
                }
              ]
            },
            "documentation": {
              "id": 479,
              "nodeType": "StructuredDocumentation",
              "src": "6072:252:13",
              "text": " Delete a given recurring order\n @param _tokenPairHash    Hash of sell and buyToken addresses identifying the tokenPair.\n @param _orderHash        Hash of remaining order data (user address, amount, interval)"
            },
            "functionSelector": "89c952a3",
            "id": 523,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deleteRecurringOrder",
            "nameLocation": "6338:20:13",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 484,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 481,
                  "mutability": "mutable",
                  "name": "_tokenPairHash",
                  "nameLocation": "6367:14:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 523,
                  "src": "6359:22:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 480,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "6359:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 483,
                  "mutability": "mutable",
                  "name": "_orderHash",
                  "nameLocation": "6391:10:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 523,
                  "src": "6383:18:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 482,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "6383:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6358:44:13"
            },
            "returnParameters": {
              "id": 485,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6424:0:13"
            },
            "scope": 1075,
            "src": "6329:498:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 555,
              "nodeType": "Block",
              "src": "7346:242:13",
              "statements": [
                {
                  "assignments": [
                    536
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 536,
                      "mutability": "mutable",
                      "name": "tokenPair",
                      "nameLocation": "7374:9:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 555,
                      "src": "7356:27:13",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                        "typeString": "struct Trickle.TokenPair"
                      },
                      "typeName": {
                        "id": 535,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 534,
                          "name": "TokenPair",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 196,
                          "src": "7356:9:13"
                        },
                        "referencedDeclaration": 196,
                        "src": "7356:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                          "typeString": "struct Trickle.TokenPair"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 540,
                  "initialValue": {
                    "baseExpression": {
                      "id": 537,
                      "name": "tokenPairs",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 249,
                      "src": "7386:10:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_TokenPair_$196_storage_$",
                        "typeString": "mapping(bytes32 => struct Trickle.TokenPair storage ref)"
                      }
                    },
                    "id": 539,
                    "indexExpression": {
                      "id": 538,
                      "name": "_tokenPairHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 526,
                      "src": "7397:14:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "7386:26:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TokenPair_$196_storage",
                      "typeString": "struct Trickle.TokenPair storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7356:56:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 545,
                            "name": "_orderHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 528,
                            "src": "7479:10:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "expression": {
                              "id": 542,
                              "name": "tokenPair",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 536,
                              "src": "7443:9:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                                "typeString": "struct Trickle.TokenPair storage pointer"
                              }
                            },
                            "id": 543,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "registeredOrders",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 195,
                            "src": "7443:26:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
                              "typeString": "struct EnumerableSet.Bytes32Set storage ref"
                            }
                          },
                          "id": 544,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "contains",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2628,
                          "src": "7443:35:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_struct$_Bytes32Set_$2574_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32Set_$2574_storage_ptr_$",
                            "typeString": "function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) view returns (bool)"
                          }
                        },
                        "id": 546,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7443:47:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f5244455220444f4553204e4f54204558495354",
                        "id": 547,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7504:22:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5af250cfe99efad3b4f8553f0dfbf9698266ec3f1cd54fcececcb6d6cc0a1817",
                          "typeString": "literal_string \"ORDER DOES NOT EXIST\""
                        },
                        "value": "ORDER DOES NOT EXIST"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_5af250cfe99efad3b4f8553f0dfbf9698266ec3f1cd54fcececcb6d6cc0a1817",
                          "typeString": "literal_string \"ORDER DOES NOT EXIST\""
                        }
                      ],
                      "id": 541,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7422:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 548,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7422:114:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 549,
                  "nodeType": "ExpressionStatement",
                  "src": "7422:114:13"
                },
                {
                  "expression": {
                    "baseExpression": {
                      "expression": {
                        "id": 550,
                        "name": "tokenPair",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 536,
                        "src": "7553:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                          "typeString": "struct Trickle.TokenPair storage pointer"
                        }
                      },
                      "id": 551,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "orders",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 192,
                      "src": "7553:16:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RecurringOrder_$183_storage_$",
                        "typeString": "mapping(bytes32 => struct Trickle.RecurringOrder storage ref)"
                      }
                    },
                    "id": 553,
                    "indexExpression": {
                      "id": 552,
                      "name": "_orderHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 528,
                      "src": "7570:10:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "7553:28:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_RecurringOrder_$183_storage",
                      "typeString": "struct Trickle.RecurringOrder storage ref"
                    }
                  },
                  "functionReturnParameters": 533,
                  "id": 554,
                  "nodeType": "Return",
                  "src": "7546:35:13"
                }
              ]
            },
            "documentation": {
              "id": 524,
              "nodeType": "StructuredDocumentation",
              "src": "6833:368:13",
              "text": " Utility function for frontend to get data on a given order\n @param _tokenPairHash    Hash of sell and buyToken addresses identifying the tokenPair.\n @param _orderHash        Hash of remaining order data (user address, amount, interval)\n @return Instance of RecurringOrder struct containing amount interval etc."
            },
            "functionSelector": "23d16e81",
            "id": 556,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getOrderData",
            "nameLocation": "7215:12:13",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 529,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 526,
                  "mutability": "mutable",
                  "name": "_tokenPairHash",
                  "nameLocation": "7236:14:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 556,
                  "src": "7228:22:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 525,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "7228:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 528,
                  "mutability": "mutable",
                  "name": "_orderHash",
                  "nameLocation": "7260:10:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 556,
                  "src": "7252:18:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 527,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "7252:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7227:44:13"
            },
            "returnParameters": {
              "id": 533,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 532,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 556,
                  "src": "7319:21:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_RecurringOrder_$183_memory_ptr",
                    "typeString": "struct Trickle.RecurringOrder"
                  },
                  "typeName": {
                    "id": 531,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 530,
                      "name": "RecurringOrder",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 183,
                      "src": "7319:14:13"
                    },
                    "referencedDeclaration": 183,
                    "src": "7319:14:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_RecurringOrder_$183_storage_ptr",
                      "typeString": "struct Trickle.RecurringOrder"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7318:23:13"
            },
            "scope": 1075,
            "src": "7206:382:13",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 579,
              "nodeType": "Block",
              "src": "8004:131:13",
              "statements": [
                {
                  "assignments": [
                    568
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 568,
                      "mutability": "mutable",
                      "name": "tokenPair",
                      "nameLocation": "8032:9:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 579,
                      "src": "8014:27:13",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                        "typeString": "struct Trickle.TokenPair"
                      },
                      "typeName": {
                        "id": 567,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 566,
                          "name": "TokenPair",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 196,
                          "src": "8014:9:13"
                        },
                        "referencedDeclaration": 196,
                        "src": "8014:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                          "typeString": "struct Trickle.TokenPair"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 572,
                  "initialValue": {
                    "baseExpression": {
                      "id": 569,
                      "name": "tokenPairs",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 249,
                      "src": "8044:10:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_TokenPair_$196_storage_$",
                        "typeString": "mapping(bytes32 => struct Trickle.TokenPair storage ref)"
                      }
                    },
                    "id": 571,
                    "indexExpression": {
                      "id": 570,
                      "name": "_tokenPairHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 559,
                      "src": "8055:14:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "8044:26:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TokenPair_$196_storage",
                      "typeString": "struct Trickle.TokenPair storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8014:56:13"
                },
                {
                  "expression": {
                    "components": [
                      {
                        "expression": {
                          "id": 573,
                          "name": "tokenPair",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 568,
                          "src": "8088:9:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                            "typeString": "struct Trickle.TokenPair storage pointer"
                          }
                        },
                        "id": 574,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sellToken",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 185,
                        "src": "8088:19:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 575,
                          "name": "tokenPair",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 568,
                          "src": "8109:9:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                            "typeString": "struct Trickle.TokenPair storage pointer"
                          }
                        },
                        "id": 576,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "buyToken",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 187,
                        "src": "8109:18:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "id": 577,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "8087:41:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_address_$_t_address_$",
                      "typeString": "tuple(address,address)"
                    }
                  },
                  "functionReturnParameters": 565,
                  "id": 578,
                  "nodeType": "Return",
                  "src": "8080:48:13"
                }
              ]
            },
            "documentation": {
              "id": 557,
              "nodeType": "StructuredDocumentation",
              "src": "7594:286:13",
              "text": " Utility function for frontend to get data on a given token pair\n @param _tokenPairHash    Hash of sell and buyToken addresses identifying the tokenPair.\n @return Address of token to be sold\n @return Address of token to be bought"
            },
            "functionSelector": "96f10b27",
            "id": 580,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTokenPairData",
            "nameLocation": "7894:16:13",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 560,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 559,
                  "mutability": "mutable",
                  "name": "_tokenPairHash",
                  "nameLocation": "7919:14:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 580,
                  "src": "7911:22:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 558,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "7911:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7910:24:13"
            },
            "returnParameters": {
              "id": 565,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 562,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 580,
                  "src": "7982:7:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 561,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7982:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 564,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 580,
                  "src": "7991:7:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 563,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7991:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7981:18:13"
            },
            "scope": 1075,
            "src": "7885:250:13",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 632,
              "nodeType": "Block",
              "src": "8588:308:13",
              "statements": [
                {
                  "assignments": [
                    590
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 590,
                      "mutability": "mutable",
                      "name": "numTokenPairs",
                      "nameLocation": "8606:13:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 632,
                      "src": "8598:21:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 589,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "8598:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 596,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "baseExpression": {
                          "id": 591,
                          "name": "userToTokenPairList",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 237,
                          "src": "8622:19:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Bytes32Set_$2574_storage_$",
                            "typeString": "mapping(address => struct EnumerableSet.Bytes32Set storage ref)"
                          }
                        },
                        "id": 593,
                        "indexExpression": {
                          "id": 592,
                          "name": "_user",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 583,
                          "src": "8642:5:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "8622:26:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
                          "typeString": "struct EnumerableSet.Bytes32Set storage ref"
                        }
                      },
                      "id": 594,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2643,
                      "src": "8622:33:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_struct$_Bytes32Set_$2574_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Bytes32Set_$2574_storage_ptr_$",
                        "typeString": "function (struct EnumerableSet.Bytes32Set storage pointer) view returns (uint256)"
                      }
                    },
                    "id": 595,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8622:35:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8598:59:13"
                },
                {
                  "assignments": [
                    601
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 601,
                      "mutability": "mutable",
                      "name": "tokenPairHashes",
                      "nameLocation": "8684:15:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 632,
                      "src": "8667:32:13",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                        "typeString": "bytes32[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 599,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "8667:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 600,
                        "nodeType": "ArrayTypeName",
                        "src": "8667:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                          "typeString": "bytes32[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 607,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 605,
                        "name": "numTokenPairs",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 590,
                        "src": "8716:13:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 604,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "8702:13:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
                        "typeString": "function (uint256) pure returns (bytes32[] memory)"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 602,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "8706:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 603,
                        "nodeType": "ArrayTypeName",
                        "src": "8706:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                          "typeString": "bytes32[]"
                        }
                      }
                    },
                    "id": 606,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8702:28:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                      "typeString": "bytes32[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8667:63:13"
                },
                {
                  "body": {
                    "id": 628,
                    "nodeType": "Block",
                    "src": "8780:78:13",
                    "statements": [
                      {
                        "expression": {
                          "id": 626,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 617,
                              "name": "tokenPairHashes",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 601,
                              "src": "8794:15:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                "typeString": "bytes32[] memory"
                              }
                            },
                            "id": 619,
                            "indexExpression": {
                              "id": 618,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 609,
                              "src": "8810:1:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "8794:18:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 624,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 609,
                                "src": "8845:1:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "baseExpression": {
                                  "id": 620,
                                  "name": "userToTokenPairList",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 237,
                                  "src": "8815:19:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Bytes32Set_$2574_storage_$",
                                    "typeString": "mapping(address => struct EnumerableSet.Bytes32Set storage ref)"
                                  }
                                },
                                "id": 622,
                                "indexExpression": {
                                  "id": 621,
                                  "name": "_user",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 583,
                                  "src": "8835:5:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "8815:26:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
                                  "typeString": "struct EnumerableSet.Bytes32Set storage ref"
                                }
                              },
                              "id": 623,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "at",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 2661,
                              "src": "8815:29:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_struct$_Bytes32Set_$2574_storage_ptr_$_t_uint256_$returns$_t_bytes32_$bound_to$_t_struct$_Bytes32Set_$2574_storage_ptr_$",
                                "typeString": "function (struct EnumerableSet.Bytes32Set storage pointer,uint256) view returns (bytes32)"
                              }
                            },
                            "id": 625,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8815:32:13",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "8794:53:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 627,
                        "nodeType": "ExpressionStatement",
                        "src": "8794:53:13"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 613,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 611,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 609,
                      "src": "8756:1:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 612,
                      "name": "numTokenPairs",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 590,
                      "src": "8760:13:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8756:17:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 629,
                  "initializationExpression": {
                    "assignments": [
                      609
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 609,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "8753:1:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 629,
                        "src": "8745:9:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 608,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "8745:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 610,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "8745:9:13"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 615,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "8775:3:13",
                      "subExpression": {
                        "id": 614,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 609,
                        "src": "8775:1:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 616,
                    "nodeType": "ExpressionStatement",
                    "src": "8775:3:13"
                  },
                  "nodeType": "ForStatement",
                  "src": "8740:118:13"
                },
                {
                  "expression": {
                    "id": 630,
                    "name": "tokenPairHashes",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 601,
                    "src": "8874:15:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                      "typeString": "bytes32[] memory"
                    }
                  },
                  "functionReturnParameters": 588,
                  "id": 631,
                  "nodeType": "Return",
                  "src": "8867:22:13"
                }
              ]
            },
            "documentation": {
              "id": 581,
              "nodeType": "StructuredDocumentation",
              "src": "8141:335:13",
              "text": " Utility function for frontend to get all token pairs for which the given user has set orders\n @param _user    Address of the user for which to query active token pairs\n @return Array of tokenPair-hashes identifying combinations of sell / buyToken for which the user has active orders"
            },
            "functionSelector": "2d57b185",
            "id": 633,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTokenPairs",
            "nameLocation": "8490:13:13",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 584,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 583,
                  "mutability": "mutable",
                  "name": "_user",
                  "nameLocation": "8512:5:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 633,
                  "src": "8504:13:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 582,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8504:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8503:15:13"
            },
            "returnParameters": {
              "id": 588,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 587,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 633,
                  "src": "8566:16:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 585,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "8566:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 586,
                    "nodeType": "ArrayTypeName",
                    "src": "8566:9:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8565:18:13"
            },
            "scope": 1075,
            "src": "8481:415:13",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 691,
              "nodeType": "Block",
              "src": "9410:308:13",
              "statements": [
                {
                  "assignments": [
                    645
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 645,
                      "mutability": "mutable",
                      "name": "numOrders",
                      "nameLocation": "9428:9:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 691,
                      "src": "9420:17:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 644,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "9420:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 653,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "baseExpression": {
                          "baseExpression": {
                            "id": 646,
                            "name": "userToOrderHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 244,
                            "src": "9440:15:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_struct$_Bytes32Set_$2574_storage_$_$",
                              "typeString": "mapping(address => mapping(bytes32 => struct EnumerableSet.Bytes32Set storage ref))"
                            }
                          },
                          "id": 648,
                          "indexExpression": {
                            "id": 647,
                            "name": "_user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 636,
                            "src": "9456:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "9440:22:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Bytes32Set_$2574_storage_$",
                            "typeString": "mapping(bytes32 => struct EnumerableSet.Bytes32Set storage ref)"
                          }
                        },
                        "id": 650,
                        "indexExpression": {
                          "id": 649,
                          "name": "_tokenPairHash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 638,
                          "src": "9463:14:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "9440:38:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
                          "typeString": "struct EnumerableSet.Bytes32Set storage ref"
                        }
                      },
                      "id": 651,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2643,
                      "src": "9440:45:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_struct$_Bytes32Set_$2574_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Bytes32Set_$2574_storage_ptr_$",
                        "typeString": "function (struct EnumerableSet.Bytes32Set storage pointer) view returns (uint256)"
                      }
                    },
                    "id": 652,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9440:47:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9420:67:13"
                },
                {
                  "assignments": [
                    658
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 658,
                      "mutability": "mutable",
                      "name": "orderHashes",
                      "nameLocation": "9514:11:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 691,
                      "src": "9497:28:13",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                        "typeString": "bytes32[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 656,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "9497:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 657,
                        "nodeType": "ArrayTypeName",
                        "src": "9497:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                          "typeString": "bytes32[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 664,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 662,
                        "name": "numOrders",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 645,
                        "src": "9542:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 661,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "9528:13:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
                        "typeString": "function (uint256) pure returns (bytes32[] memory)"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 659,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "9532:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 660,
                        "nodeType": "ArrayTypeName",
                        "src": "9532:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                          "typeString": "bytes32[]"
                        }
                      }
                    },
                    "id": 663,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9528:24:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                      "typeString": "bytes32[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9497:55:13"
                },
                {
                  "body": {
                    "id": 687,
                    "nodeType": "Block",
                    "src": "9598:86:13",
                    "statements": [
                      {
                        "expression": {
                          "id": 685,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 674,
                              "name": "orderHashes",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 658,
                              "src": "9612:11:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                "typeString": "bytes32[] memory"
                              }
                            },
                            "id": 676,
                            "indexExpression": {
                              "id": 675,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 666,
                              "src": "9624:1:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "9612:14:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 683,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 666,
                                "src": "9671:1:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "id": 677,
                                    "name": "userToOrderHash",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 244,
                                    "src": "9629:15:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_struct$_Bytes32Set_$2574_storage_$_$",
                                      "typeString": "mapping(address => mapping(bytes32 => struct EnumerableSet.Bytes32Set storage ref))"
                                    }
                                  },
                                  "id": 679,
                                  "indexExpression": {
                                    "id": 678,
                                    "name": "_user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 636,
                                    "src": "9645:5:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "9629:22:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Bytes32Set_$2574_storage_$",
                                    "typeString": "mapping(bytes32 => struct EnumerableSet.Bytes32Set storage ref)"
                                  }
                                },
                                "id": 681,
                                "indexExpression": {
                                  "id": 680,
                                  "name": "_tokenPairHash",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 638,
                                  "src": "9652:14:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "9629:38:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
                                  "typeString": "struct EnumerableSet.Bytes32Set storage ref"
                                }
                              },
                              "id": 682,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "at",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 2661,
                              "src": "9629:41:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_struct$_Bytes32Set_$2574_storage_ptr_$_t_uint256_$returns$_t_bytes32_$bound_to$_t_struct$_Bytes32Set_$2574_storage_ptr_$",
                                "typeString": "function (struct EnumerableSet.Bytes32Set storage pointer,uint256) view returns (bytes32)"
                              }
                            },
                            "id": 684,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9629:44:13",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "9612:61:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 686,
                        "nodeType": "ExpressionStatement",
                        "src": "9612:61:13"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 670,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 668,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 666,
                      "src": "9578:1:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 669,
                      "name": "numOrders",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 645,
                      "src": "9582:9:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9578:13:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 688,
                  "initializationExpression": {
                    "assignments": [
                      666
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 666,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "9575:1:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 688,
                        "src": "9567:9:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 665,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9567:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 667,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "9567:9:13"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 672,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "9593:3:13",
                      "subExpression": {
                        "id": 671,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 666,
                        "src": "9593:1:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 673,
                    "nodeType": "ExpressionStatement",
                    "src": "9593:3:13"
                  },
                  "nodeType": "ForStatement",
                  "src": "9562:122:13"
                },
                {
                  "expression": {
                    "id": 689,
                    "name": "orderHashes",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 658,
                    "src": "9700:11:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                      "typeString": "bytes32[] memory"
                    }
                  },
                  "functionReturnParameters": 643,
                  "id": 690,
                  "nodeType": "Return",
                  "src": "9693:18:13"
                }
              ]
            },
            "documentation": {
              "id": 634,
              "nodeType": "StructuredDocumentation",
              "src": "8902:376:13",
              "text": " List hashes of active orders for given tokenPair and user\n @param _user             Address of the user for which to query active token pairs\n @param _tokenPairHash    Hash of sell and buyToken addresses identifying the tokenPair.\n @return Array of order-hashes identifying the orders set for given user and token pair"
            },
            "functionSelector": "c7c6ab04",
            "id": 692,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getOrders",
            "nameLocation": "9292:9:13",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 639,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 636,
                  "mutability": "mutable",
                  "name": "_user",
                  "nameLocation": "9310:5:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 692,
                  "src": "9302:13:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 635,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9302:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 638,
                  "mutability": "mutable",
                  "name": "_tokenPairHash",
                  "nameLocation": "9325:14:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 692,
                  "src": "9317:22:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 637,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "9317:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9301:39:13"
            },
            "returnParameters": {
              "id": 643,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 642,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 692,
                  "src": "9388:16:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 640,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "9388:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 641,
                    "nodeType": "ArrayTypeName",
                    "src": "9388:9:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9387:18:13"
            },
            "scope": 1075,
            "src": "9283:435:13",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              160
            ],
            "body": {
              "id": 857,
              "nodeType": "Block",
              "src": "10165:1526:13",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 708,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 703,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "10179:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 704,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "10179:15:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 707,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 705,
                        "name": "lastUpkeep",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 256,
                        "src": "10197:10:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "id": 706,
                        "name": "minimumUpkeepInterval",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 254,
                        "src": "10210:21:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "10197:34:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "10179:52:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 714,
                  "nodeType": "IfStatement",
                  "src": "10175:117:13",
                  "trueBody": {
                    "id": 713,
                    "nodeType": "Block",
                    "src": "10233:59:13",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "id": 709,
                              "name": "upkeepNeeded",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 699,
                              "src": "10255:12:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 710,
                              "name": "performData",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 701,
                              "src": "10269:11:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "id": 711,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "10254:27:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "functionReturnParameters": 702,
                        "id": 712,
                        "nodeType": "Return",
                        "src": "10247:34:13"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    716
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 716,
                      "mutability": "mutable",
                      "name": "numPairs",
                      "nameLocation": "10310:8:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 857,
                      "src": "10302:16:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 715,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10302:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 720,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 717,
                        "name": "initializedTokenPairs",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 252,
                        "src": "10321:21:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
                          "typeString": "struct EnumerableSet.Bytes32Set storage ref"
                        }
                      },
                      "id": 718,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2643,
                      "src": "10321:28:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_struct$_Bytes32Set_$2574_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Bytes32Set_$2574_storage_ptr_$",
                        "typeString": "function (struct EnumerableSet.Bytes32Set storage pointer) view returns (uint256)"
                      }
                    },
                    "id": 719,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10321:30:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "10302:49:13"
                },
                {
                  "assignments": [
                    725
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 725,
                      "mutability": "mutable",
                      "name": "ordersToExecute",
                      "nameLocation": "10405:15:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 857,
                      "src": "10361:59:13",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_TokenPairPendingOrders_$202_memory_ptr_$dyn_memory_ptr",
                        "typeString": "struct Trickle.TokenPairPendingOrders[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 723,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 722,
                            "name": "TokenPairPendingOrders",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 202,
                            "src": "10361:22:13"
                          },
                          "referencedDeclaration": 202,
                          "src": "10361:22:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_storage_ptr",
                            "typeString": "struct Trickle.TokenPairPendingOrders"
                          }
                        },
                        "id": 724,
                        "nodeType": "ArrayTypeName",
                        "src": "10361:24:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_TokenPairPendingOrders_$202_storage_$dyn_storage_ptr",
                          "typeString": "struct Trickle.TokenPairPendingOrders[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 732,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 730,
                        "name": "numPairs",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 716,
                        "src": "10452:8:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 729,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "10423:28:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_TokenPairPendingOrders_$202_memory_ptr_$dyn_memory_ptr_$",
                        "typeString": "function (uint256) pure returns (struct Trickle.TokenPairPendingOrders memory[] memory)"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 727,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 726,
                            "name": "TokenPairPendingOrders",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 202,
                            "src": "10427:22:13"
                          },
                          "referencedDeclaration": 202,
                          "src": "10427:22:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_storage_ptr",
                            "typeString": "struct Trickle.TokenPairPendingOrders"
                          }
                        },
                        "id": 728,
                        "nodeType": "ArrayTypeName",
                        "src": "10427:24:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_TokenPairPendingOrders_$202_storage_$dyn_storage_ptr",
                          "typeString": "struct Trickle.TokenPairPendingOrders[]"
                        }
                      }
                    },
                    "id": 731,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10423:38:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_TokenPairPendingOrders_$202_memory_ptr_$dyn_memory_ptr",
                      "typeString": "struct Trickle.TokenPairPendingOrders memory[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "10361:100:13"
                },
                {
                  "assignments": [
                    734
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 734,
                      "mutability": "mutable",
                      "name": "l",
                      "nameLocation": "10479:1:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 857,
                      "src": "10471:9:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 733,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10471:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 735,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "10471:9:13"
                },
                {
                  "body": {
                    "id": 848,
                    "nodeType": "Block",
                    "src": "10529:1105:13",
                    "statements": [
                      {
                        "assignments": [
                          747
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 747,
                            "mutability": "mutable",
                            "name": "tokenPairHash",
                            "nameLocation": "10551:13:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 848,
                            "src": "10543:21:13",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 746,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "10543:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 752,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 750,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 737,
                              "src": "10592:1:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 748,
                              "name": "initializedTokenPairs",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 252,
                              "src": "10567:21:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
                                "typeString": "struct EnumerableSet.Bytes32Set storage ref"
                              }
                            },
                            "id": 749,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "at",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2661,
                            "src": "10567:24:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_Bytes32Set_$2574_storage_ptr_$_t_uint256_$returns$_t_bytes32_$bound_to$_t_struct$_Bytes32Set_$2574_storage_ptr_$",
                              "typeString": "function (struct EnumerableSet.Bytes32Set storage pointer,uint256) view returns (bytes32)"
                            }
                          },
                          "id": 751,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10567:27:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10543:51:13"
                      },
                      {
                        "assignments": [
                          754
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 754,
                            "mutability": "mutable",
                            "name": "numOrders",
                            "nameLocation": "10616:9:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 848,
                            "src": "10608:17:13",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 753,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "10608:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 761,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 755,
                                  "name": "tokenPairs",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 249,
                                  "src": "10628:10:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_TokenPair_$196_storage_$",
                                    "typeString": "mapping(bytes32 => struct Trickle.TokenPair storage ref)"
                                  }
                                },
                                "id": 757,
                                "indexExpression": {
                                  "id": 756,
                                  "name": "tokenPairHash",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 747,
                                  "src": "10639:13:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "10628:25:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_TokenPair_$196_storage",
                                  "typeString": "struct Trickle.TokenPair storage ref"
                                }
                              },
                              "id": 758,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "registeredOrders",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 195,
                              "src": "10628:59:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
                                "typeString": "struct EnumerableSet.Bytes32Set storage ref"
                              }
                            },
                            "id": 759,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2643,
                            "src": "10628:83:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_Bytes32Set_$2574_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Bytes32Set_$2574_storage_ptr_$",
                              "typeString": "function (struct EnumerableSet.Bytes32Set storage pointer) view returns (uint256)"
                            }
                          },
                          "id": 760,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10628:85:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10608:105:13"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 764,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 762,
                            "name": "numOrders",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 754,
                            "src": "10731:9:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 763,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10743:1:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "10731:13:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 847,
                        "nodeType": "IfStatement",
                        "src": "10727:897:13",
                        "trueBody": {
                          "id": 846,
                          "nodeType": "Block",
                          "src": "10746:878:13",
                          "statements": [
                            {
                              "assignments": [
                                769
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 769,
                                  "mutability": "mutable",
                                  "name": "orders",
                                  "nameLocation": "10781:6:13",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 846,
                                  "src": "10764:23:13",
                                  "stateVariable": false,
                                  "storageLocation": "memory",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                    "typeString": "bytes32[]"
                                  },
                                  "typeName": {
                                    "baseType": {
                                      "id": 767,
                                      "name": "bytes32",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "10764:7:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes32",
                                        "typeString": "bytes32"
                                      }
                                    },
                                    "id": 768,
                                    "nodeType": "ArrayTypeName",
                                    "src": "10764:9:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                                      "typeString": "bytes32[]"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 775,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "id": 773,
                                    "name": "numOrders",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 754,
                                    "src": "10804:9:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 772,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "NewExpression",
                                  "src": "10790:13:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
                                    "typeString": "function (uint256) pure returns (bytes32[] memory)"
                                  },
                                  "typeName": {
                                    "baseType": {
                                      "id": 770,
                                      "name": "bytes32",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "10794:7:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes32",
                                        "typeString": "bytes32"
                                      }
                                    },
                                    "id": 771,
                                    "nodeType": "ArrayTypeName",
                                    "src": "10794:9:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                                      "typeString": "bytes32[]"
                                    }
                                  }
                                },
                                "id": 774,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "10790:24:13",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                  "typeString": "bytes32[] memory"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "10764:50:13"
                            },
                            {
                              "assignments": [
                                777
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 777,
                                  "mutability": "mutable",
                                  "name": "k",
                                  "nameLocation": "10840:1:13",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 846,
                                  "src": "10832:9:13",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 776,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "10832:7:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 778,
                              "nodeType": "VariableDeclarationStatement",
                              "src": "10832:9:13"
                            },
                            {
                              "body": {
                                "id": 832,
                                "nodeType": "Block",
                                "src": "10895:552:13",
                                "statements": [
                                  {
                                    "assignments": [
                                      789
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 789,
                                        "mutability": "mutable",
                                        "name": "orderHash",
                                        "nameLocation": "10925:9:13",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 832,
                                        "src": "10917:17:13",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        },
                                        "typeName": {
                                          "id": 788,
                                          "name": "bytes32",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "10917:7:13",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 797,
                                    "initialValue": {
                                      "arguments": [
                                        {
                                          "id": 795,
                                          "name": "j",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 780,
                                          "src": "11033:1:13",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "expression": {
                                            "baseExpression": {
                                              "id": 790,
                                              "name": "tokenPairs",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 249,
                                              "src": "10937:10:13",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_TokenPair_$196_storage_$",
                                                "typeString": "mapping(bytes32 => struct Trickle.TokenPair storage ref)"
                                              }
                                            },
                                            "id": 792,
                                            "indexExpression": {
                                              "id": 791,
                                              "name": "tokenPairHash",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 747,
                                              "src": "10948:13:13",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes32",
                                                "typeString": "bytes32"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "10937:25:13",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_TokenPair_$196_storage",
                                              "typeString": "struct Trickle.TokenPair storage ref"
                                            }
                                          },
                                          "id": 793,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "registeredOrders",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 195,
                                          "src": "10937:67:13",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
                                            "typeString": "struct EnumerableSet.Bytes32Set storage ref"
                                          }
                                        },
                                        "id": 794,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "at",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 2661,
                                        "src": "10937:95:13",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_view$_t_struct$_Bytes32Set_$2574_storage_ptr_$_t_uint256_$returns$_t_bytes32_$bound_to$_t_struct$_Bytes32Set_$2574_storage_ptr_$",
                                          "typeString": "function (struct EnumerableSet.Bytes32Set storage pointer,uint256) view returns (bytes32)"
                                        }
                                      },
                                      "id": 796,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "10937:98:13",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes32",
                                        "typeString": "bytes32"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "10917:118:13"
                                  },
                                  {
                                    "assignments": [
                                      800
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 800,
                                        "mutability": "mutable",
                                        "name": "order",
                                        "nameLocation": "11079:5:13",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 832,
                                        "src": "11057:27:13",
                                        "stateVariable": false,
                                        "storageLocation": "memory",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_RecurringOrder_$183_memory_ptr",
                                          "typeString": "struct Trickle.RecurringOrder"
                                        },
                                        "typeName": {
                                          "id": 799,
                                          "nodeType": "UserDefinedTypeName",
                                          "pathNode": {
                                            "id": 798,
                                            "name": "RecurringOrder",
                                            "nodeType": "IdentifierPath",
                                            "referencedDeclaration": 183,
                                            "src": "11057:14:13"
                                          },
                                          "referencedDeclaration": 183,
                                          "src": "11057:14:13",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_RecurringOrder_$183_storage_ptr",
                                            "typeString": "struct Trickle.RecurringOrder"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 807,
                                    "initialValue": {
                                      "baseExpression": {
                                        "expression": {
                                          "baseExpression": {
                                            "id": 801,
                                            "name": "tokenPairs",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 249,
                                            "src": "11087:10:13",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_TokenPair_$196_storage_$",
                                              "typeString": "mapping(bytes32 => struct Trickle.TokenPair storage ref)"
                                            }
                                          },
                                          "id": 803,
                                          "indexExpression": {
                                            "id": 802,
                                            "name": "tokenPairHash",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 747,
                                            "src": "11098:13:13",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes32",
                                              "typeString": "bytes32"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "11087:25:13",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_TokenPair_$196_storage",
                                            "typeString": "struct Trickle.TokenPair storage ref"
                                          }
                                        },
                                        "id": 804,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "orders",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 192,
                                        "src": "11087:57:13",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RecurringOrder_$183_storage_$",
                                          "typeString": "mapping(bytes32 => struct Trickle.RecurringOrder storage ref)"
                                        }
                                      },
                                      "id": 806,
                                      "indexExpression": {
                                        "id": 805,
                                        "name": "orderHash",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 789,
                                        "src": "11145:9:13",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "11087:68:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_RecurringOrder_$183_storage",
                                        "typeString": "struct Trickle.RecurringOrder storage ref"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "11057:98:13"
                                  },
                                  {
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 816,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "expression": {
                                          "id": 808,
                                          "name": "block",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -4,
                                          "src": "11206:5:13",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_block",
                                            "typeString": "block"
                                          }
                                        },
                                        "id": 809,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "timestamp",
                                        "nodeType": "MemberAccess",
                                        "src": "11206:15:13",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": ">",
                                      "rightExpression": {
                                        "components": [
                                          {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 814,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "expression": {
                                                "id": 810,
                                                "name": "order",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 800,
                                                "src": "11225:5:13",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_RecurringOrder_$183_memory_ptr",
                                                  "typeString": "struct Trickle.RecurringOrder memory"
                                                }
                                              },
                                              "id": 811,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "lastExecution",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 180,
                                              "src": "11225:19:13",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "+",
                                            "rightExpression": {
                                              "expression": {
                                                "id": 812,
                                                "name": "order",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 800,
                                                "src": "11247:5:13",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_RecurringOrder_$183_memory_ptr",
                                                  "typeString": "struct Trickle.RecurringOrder memory"
                                                }
                                              },
                                              "id": 813,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "interval",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 182,
                                              "src": "11247:14:13",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "11225:36:13",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "id": 815,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "11224:38:13",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "11206:56:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 831,
                                    "nodeType": "IfStatement",
                                    "src": "11177:252:13",
                                    "trueBody": {
                                      "id": 830,
                                      "nodeType": "Block",
                                      "src": "11285:144:13",
                                      "statements": [
                                        {
                                          "expression": {
                                            "id": 821,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "baseExpression": {
                                                "id": 817,
                                                "name": "orders",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 769,
                                                "src": "11311:6:13",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                                  "typeString": "bytes32[] memory"
                                                }
                                              },
                                              "id": 819,
                                              "indexExpression": {
                                                "id": 818,
                                                "name": "k",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 777,
                                                "src": "11318:1:13",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": true,
                                              "nodeType": "IndexAccess",
                                              "src": "11311:9:13",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes32",
                                                "typeString": "bytes32"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "id": 820,
                                              "name": "orderHash",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 789,
                                              "src": "11323:9:13",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes32",
                                                "typeString": "bytes32"
                                              }
                                            },
                                            "src": "11311:21:13",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes32",
                                              "typeString": "bytes32"
                                            }
                                          },
                                          "id": 822,
                                          "nodeType": "ExpressionStatement",
                                          "src": "11311:21:13"
                                        },
                                        {
                                          "expression": {
                                            "id": 824,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "UnaryOperation",
                                            "operator": "++",
                                            "prefix": false,
                                            "src": "11358:3:13",
                                            "subExpression": {
                                              "id": 823,
                                              "name": "k",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 777,
                                              "src": "11358:1:13",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 825,
                                          "nodeType": "ExpressionStatement",
                                          "src": "11358:3:13"
                                        },
                                        {
                                          "expression": {
                                            "id": 828,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "id": 826,
                                              "name": "upkeepNeeded",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 699,
                                              "src": "11387:12:13",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "hexValue": "74727565",
                                              "id": 827,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "bool",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "11402:4:13",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              },
                                              "value": "true"
                                            },
                                            "src": "11387:19:13",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "id": 829,
                                          "nodeType": "ExpressionStatement",
                                          "src": "11387:19:13"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 784,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 782,
                                  "name": "j",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 780,
                                  "src": "10875:1:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "id": 783,
                                  "name": "numOrders",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 754,
                                  "src": "10879:9:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "10875:13:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 833,
                              "initializationExpression": {
                                "assignments": [
                                  780
                                ],
                                "declarations": [
                                  {
                                    "constant": false,
                                    "id": 780,
                                    "mutability": "mutable",
                                    "name": "j",
                                    "nameLocation": "10872:1:13",
                                    "nodeType": "VariableDeclaration",
                                    "scope": 833,
                                    "src": "10864:9:13",
                                    "stateVariable": false,
                                    "storageLocation": "default",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "typeName": {
                                      "id": 779,
                                      "name": "uint256",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "10864:7:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "visibility": "internal"
                                  }
                                ],
                                "id": 781,
                                "nodeType": "VariableDeclarationStatement",
                                "src": "10864:9:13"
                              },
                              "loopExpression": {
                                "expression": {
                                  "id": 786,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "UnaryOperation",
                                  "operator": "++",
                                  "prefix": false,
                                  "src": "10890:3:13",
                                  "subExpression": {
                                    "id": 785,
                                    "name": "j",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 780,
                                    "src": "10890:1:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 787,
                                "nodeType": "ExpressionStatement",
                                "src": "10890:3:13"
                              },
                              "nodeType": "ForStatement",
                              "src": "10859:588:13"
                            },
                            {
                              "expression": {
                                "id": 841,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 834,
                                    "name": "ordersToExecute",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 725,
                                    "src": "11464:15:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_TokenPairPendingOrders_$202_memory_ptr_$dyn_memory_ptr",
                                      "typeString": "struct Trickle.TokenPairPendingOrders memory[] memory"
                                    }
                                  },
                                  "id": 836,
                                  "indexExpression": {
                                    "id": 835,
                                    "name": "l",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 734,
                                    "src": "11480:1:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "11464:18:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_memory_ptr",
                                    "typeString": "struct Trickle.TokenPairPendingOrders memory"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 838,
                                      "name": "tokenPairHash",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 747,
                                      "src": "11529:13:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes32",
                                        "typeString": "bytes32"
                                      }
                                    },
                                    {
                                      "id": 839,
                                      "name": "orders",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 769,
                                      "src": "11564:6:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                        "typeString": "bytes32[] memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes32",
                                        "typeString": "bytes32"
                                      },
                                      {
                                        "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                        "typeString": "bytes32[] memory"
                                      }
                                    ],
                                    "id": 837,
                                    "name": "TokenPairPendingOrders",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 202,
                                    "src": "11485:22:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_struct$_TokenPairPendingOrders_$202_storage_ptr_$",
                                      "typeString": "type(struct Trickle.TokenPairPendingOrders storage pointer)"
                                    }
                                  },
                                  "id": 840,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "structConstructorCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "11485:103:13",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_memory_ptr",
                                    "typeString": "struct Trickle.TokenPairPendingOrders memory"
                                  }
                                },
                                "src": "11464:124:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_memory_ptr",
                                  "typeString": "struct Trickle.TokenPairPendingOrders memory"
                                }
                              },
                              "id": 842,
                              "nodeType": "ExpressionStatement",
                              "src": "11464:124:13"
                            },
                            {
                              "expression": {
                                "id": 844,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "++",
                                "prefix": false,
                                "src": "11606:3:13",
                                "subExpression": {
                                  "id": 843,
                                  "name": "l",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 734,
                                  "src": "11606:1:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 845,
                              "nodeType": "ExpressionStatement",
                              "src": "11606:3:13"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 742,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 740,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 737,
                      "src": "10510:1:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 741,
                      "name": "numPairs",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 716,
                      "src": "10514:8:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "10510:12:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 849,
                  "initializationExpression": {
                    "assignments": [
                      737
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 737,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "10503:1:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 849,
                        "src": "10495:9:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 736,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "10495:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 739,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 738,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "10507:1:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "10495:13:13"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 744,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "10524:3:13",
                      "subExpression": {
                        "id": 743,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 737,
                        "src": "10524:1:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 745,
                    "nodeType": "ExpressionStatement",
                    "src": "10524:3:13"
                  },
                  "nodeType": "ForStatement",
                  "src": "10490:1144:13"
                },
                {
                  "expression": {
                    "id": 855,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 850,
                      "name": "performData",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 701,
                      "src": "11643:11:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 853,
                          "name": "ordersToExecute",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 725,
                          "src": "11668:15:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_TokenPairPendingOrders_$202_memory_ptr_$dyn_memory_ptr",
                            "typeString": "struct Trickle.TokenPairPendingOrders memory[] memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_array$_t_struct$_TokenPairPendingOrders_$202_memory_ptr_$dyn_memory_ptr",
                            "typeString": "struct Trickle.TokenPairPendingOrders memory[] memory"
                          }
                        ],
                        "expression": {
                          "id": 851,
                          "name": "abi",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -1,
                          "src": "11657:3:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_abi",
                            "typeString": "abi"
                          }
                        },
                        "id": 852,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "encode",
                        "nodeType": "MemberAccess",
                        "src": "11657:10:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                          "typeString": "function () pure returns (bytes memory)"
                        }
                      },
                      "id": 854,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "11657:27:13",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    },
                    "src": "11643:41:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "id": 856,
                  "nodeType": "ExpressionStatement",
                  "src": "11643:41:13"
                }
              ]
            },
            "documentation": {
              "id": 693,
              "nodeType": "StructuredDocumentation",
              "src": "9724:286:13",
              "text": " Check if Upkeep is needed and generate performData\n @return upkeepNeeded     Boolean indicating wether upkeep needs to be performed\n @return performData      Serialized array of structs identifying orders to be executed in next upkeep"
            },
            "functionSelector": "6e04ff0d",
            "id": 858,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkUpkeep",
            "nameLocation": "10024:11:13",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 697,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "10090:8:13"
            },
            "parameters": {
              "id": 696,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 695,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 858,
                  "src": "10036:14:13",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 694,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "10036:5:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10035:16:13"
            },
            "returnParameters": {
              "id": 702,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 699,
                  "mutability": "mutable",
                  "name": "upkeepNeeded",
                  "nameLocation": "10121:12:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 858,
                  "src": "10116:17:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 698,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10116:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 701,
                  "mutability": "mutable",
                  "name": "performData",
                  "nameLocation": "10148:11:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 858,
                  "src": "10135:24:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 700,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "10135:5:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10115:45:13"
            },
            "scope": 1075,
            "src": "10015:1676:13",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              165
            ],
            "body": {
              "id": 888,
              "nodeType": "Block",
              "src": "11967:265:13",
              "statements": [
                {
                  "assignments": [
                    869
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 869,
                      "mutability": "mutable",
                      "name": "ordersToExecute",
                      "nameLocation": "12009:15:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 888,
                      "src": "11977:47:13",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_TokenPairPendingOrders_$202_memory_ptr_$dyn_memory_ptr",
                        "typeString": "struct Trickle.TokenPairPendingOrders[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 867,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 866,
                            "name": "TokenPairPendingOrders",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 202,
                            "src": "11977:22:13"
                          },
                          "referencedDeclaration": 202,
                          "src": "11977:22:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_storage_ptr",
                            "typeString": "struct Trickle.TokenPairPendingOrders"
                          }
                        },
                        "id": 868,
                        "nodeType": "ArrayTypeName",
                        "src": "11977:24:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_TokenPairPendingOrders_$202_storage_$dyn_storage_ptr",
                          "typeString": "struct Trickle.TokenPairPendingOrders[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 877,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 872,
                        "name": "performData",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 861,
                        "src": "12051:11:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "components": [
                          {
                            "baseExpression": {
                              "id": 873,
                              "name": "TokenPairPendingOrders",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 202,
                              "src": "12077:22:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_TokenPairPendingOrders_$202_storage_ptr_$",
                                "typeString": "type(struct Trickle.TokenPairPendingOrders storage pointer)"
                              }
                            },
                            "id": 874,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "12077:24:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_array$_t_struct$_TokenPairPendingOrders_$202_memory_ptr_$dyn_memory_ptr_$",
                              "typeString": "type(struct Trickle.TokenPairPendingOrders memory[] memory)"
                            }
                          }
                        ],
                        "id": 875,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "12076:26:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_array$_t_struct$_TokenPairPendingOrders_$202_memory_ptr_$dyn_memory_ptr_$",
                          "typeString": "type(struct Trickle.TokenPairPendingOrders memory[] memory)"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_type$_t_array$_t_struct$_TokenPairPendingOrders_$202_memory_ptr_$dyn_memory_ptr_$",
                          "typeString": "type(struct Trickle.TokenPairPendingOrders memory[] memory)"
                        }
                      ],
                      "expression": {
                        "id": 870,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "12027:3:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 871,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "decode",
                      "nodeType": "MemberAccess",
                      "src": "12027:10:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 876,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12027:85:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_TokenPairPendingOrders_$202_memory_ptr_$dyn_memory_ptr",
                      "typeString": "struct Trickle.TokenPairPendingOrders memory[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11977:135:13"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 881,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 878,
                        "name": "ordersToExecute",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 869,
                        "src": "12126:15:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_TokenPairPendingOrders_$202_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct Trickle.TokenPairPendingOrders memory[] memory"
                        }
                      },
                      "id": 879,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "12126:22:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 880,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "12151:1:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "12126:26:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 887,
                  "nodeType": "IfStatement",
                  "src": "12122:104:13",
                  "trueBody": {
                    "id": 886,
                    "nodeType": "Block",
                    "src": "12154:72:13",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 883,
                              "name": "ordersToExecute",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 869,
                              "src": "12199:15:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_TokenPairPendingOrders_$202_memory_ptr_$dyn_memory_ptr",
                                "typeString": "struct Trickle.TokenPairPendingOrders memory[] memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_struct$_TokenPairPendingOrders_$202_memory_ptr_$dyn_memory_ptr",
                                "typeString": "struct Trickle.TokenPairPendingOrders memory[] memory"
                              }
                            ],
                            "id": 882,
                            "name": "_executeOrdersForAllTokenPairs",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 930,
                            "src": "12168:30:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_TokenPairPendingOrders_$202_memory_ptr_$dyn_memory_ptr_$returns$__$",
                              "typeString": "function (struct Trickle.TokenPairPendingOrders memory[] memory)"
                            }
                          },
                          "id": 884,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12168:47:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 885,
                        "nodeType": "ExpressionStatement",
                        "src": "12168:47:13"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 859,
              "nodeType": "StructuredDocumentation",
              "src": "11697:196:13",
              "text": " Perform Upkeep executing all pending orders\n @param performData      Serialized array of structs identifying orders to be executed as returned by checkUpkeep"
            },
            "functionSelector": "4585e33b",
            "id": 889,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "performUpkeep",
            "nameLocation": "11907:13:13",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 863,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "11958:8:13"
            },
            "parameters": {
              "id": 862,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 861,
                  "mutability": "mutable",
                  "name": "performData",
                  "nameLocation": "11936:11:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 889,
                  "src": "11921:26:13",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 860,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "11921:5:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11920:28:13"
            },
            "returnParameters": {
              "id": 864,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11967:0:13"
            },
            "scope": 1075,
            "src": "11898:334:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 929,
              "nodeType": "Block",
              "src": "12665:326:13",
              "statements": [
                {
                  "body": {
                    "id": 927,
                    "nodeType": "Block",
                    "src": "12725:260:13",
                    "statements": [
                      {
                        "assignments": [
                          909
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 909,
                            "mutability": "mutable",
                            "name": "tokenPairPendingOrders",
                            "nameLocation": "12785:22:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 927,
                            "src": "12739:68:13",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_memory_ptr",
                              "typeString": "struct Trickle.TokenPairPendingOrders"
                            },
                            "typeName": {
                              "id": 908,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 907,
                                "name": "TokenPairPendingOrders",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 202,
                                "src": "12739:22:13"
                              },
                              "referencedDeclaration": 202,
                              "src": "12739:22:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_storage_ptr",
                                "typeString": "struct Trickle.TokenPairPendingOrders"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 913,
                        "initialValue": {
                          "baseExpression": {
                            "id": 910,
                            "name": "allPendingOrders",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 894,
                            "src": "12810:16:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_TokenPairPendingOrders_$202_memory_ptr_$dyn_memory_ptr",
                              "typeString": "struct Trickle.TokenPairPendingOrders memory[] memory"
                            }
                          },
                          "id": 912,
                          "indexExpression": {
                            "id": 911,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 898,
                            "src": "12827:1:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "12810:19:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_memory_ptr",
                            "typeString": "struct Trickle.TokenPairPendingOrders memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "12739:90:13"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "id": 920,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 914,
                              "name": "tokenPairPendingOrders",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 909,
                              "src": "12847:22:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_memory_ptr",
                                "typeString": "struct Trickle.TokenPairPendingOrders memory"
                              }
                            },
                            "id": 915,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "tokenPairHash",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 198,
                            "src": "12847:36:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 918,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "12895:1:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 917,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "12887:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_bytes32_$",
                                "typeString": "type(bytes32)"
                              },
                              "typeName": {
                                "id": 916,
                                "name": "bytes32",
                                "nodeType": "ElementaryTypeName",
                                "src": "12887:7:13",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 919,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "12887:10:13",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "12847:50:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 922,
                        "nodeType": "IfStatement",
                        "src": "12843:61:13",
                        "trueBody": {
                          "id": 921,
                          "nodeType": "Break",
                          "src": "12899:5:13"
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 924,
                              "name": "tokenPairPendingOrders",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 909,
                              "src": "12951:22:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_memory_ptr",
                                "typeString": "struct Trickle.TokenPairPendingOrders memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_memory_ptr",
                                "typeString": "struct Trickle.TokenPairPendingOrders memory"
                              }
                            ],
                            "id": 923,
                            "name": "_executeOrdersForSingleTokenPair",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1074,
                            "src": "12918:32:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TokenPairPendingOrders_$202_memory_ptr_$returns$__$",
                              "typeString": "function (struct Trickle.TokenPairPendingOrders memory)"
                            }
                          },
                          "id": 925,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12918:56:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 926,
                        "nodeType": "ExpressionStatement",
                        "src": "12918:56:13"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 903,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 900,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 898,
                      "src": "12691:1:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 901,
                        "name": "allPendingOrders",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 894,
                        "src": "12695:16:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_TokenPairPendingOrders_$202_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct Trickle.TokenPairPendingOrders memory[] memory"
                        }
                      },
                      "id": 902,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "12695:23:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "12691:27:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 928,
                  "initializationExpression": {
                    "assignments": [
                      898
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 898,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "12688:1:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 928,
                        "src": "12680:9:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 897,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "12680:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 899,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "12680:9:13"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 905,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "12720:3:13",
                      "subExpression": {
                        "id": 904,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 898,
                        "src": "12720:1:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 906,
                    "nodeType": "ExpressionStatement",
                    "src": "12720:3:13"
                  },
                  "nodeType": "ForStatement",
                  "src": "12675:310:13"
                }
              ]
            },
            "documentation": {
              "id": 890,
              "nodeType": "StructuredDocumentation",
              "src": "12238:309:13",
              "text": " Internal helper function to execute all pending orders for all token pairs\n @param allPendingOrders   Array of structs with one element for each token pair that has pending orders. Each element contains a list of order hashes that need to be executed for this token pair"
            },
            "id": 930,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_executeOrdersForAllTokenPairs",
            "nameLocation": "12561:30:13",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 895,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 894,
                  "mutability": "mutable",
                  "name": "allPendingOrders",
                  "nameLocation": "12633:16:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 930,
                  "src": "12601:48:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_TokenPairPendingOrders_$202_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct Trickle.TokenPairPendingOrders[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 892,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 891,
                        "name": "TokenPairPendingOrders",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 202,
                        "src": "12601:22:13"
                      },
                      "referencedDeclaration": 202,
                      "src": "12601:22:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_storage_ptr",
                        "typeString": "struct Trickle.TokenPairPendingOrders"
                      }
                    },
                    "id": 893,
                    "nodeType": "ArrayTypeName",
                    "src": "12601:24:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_TokenPairPendingOrders_$202_storage_$dyn_storage_ptr",
                      "typeString": "struct Trickle.TokenPairPendingOrders[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12591:64:13"
            },
            "returnParameters": {
              "id": 896,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12665:0:13"
            },
            "scope": 1075,
            "src": "12552:439:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1073,
              "nodeType": "Block",
              "src": "13312:1563:13",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 941,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "expression": {
                          "id": 937,
                          "name": "pendingOrders",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 934,
                          "src": "13326:13:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_memory_ptr",
                            "typeString": "struct Trickle.TokenPairPendingOrders memory"
                          }
                        },
                        "id": 938,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "orders",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 201,
                        "src": "13326:20:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                          "typeString": "bytes32[] memory"
                        }
                      },
                      "id": 939,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "13326:27:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 940,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "13357:1:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "13326:32:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 943,
                  "nodeType": "IfStatement",
                  "src": "13322:45:13",
                  "trueBody": {
                    "functionReturnParameters": 936,
                    "id": 942,
                    "nodeType": "Return",
                    "src": "13360:7:13"
                  }
                },
                {
                  "condition": {
                    "id": 949,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "13380:60:13",
                    "subExpression": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 946,
                            "name": "pendingOrders",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 934,
                            "src": "13412:13:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_memory_ptr",
                              "typeString": "struct Trickle.TokenPairPendingOrders memory"
                            }
                          },
                          "id": 947,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "tokenPairHash",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 198,
                          "src": "13412:27:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        ],
                        "expression": {
                          "id": 944,
                          "name": "initializedTokenPairs",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 252,
                          "src": "13381:21:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
                            "typeString": "struct EnumerableSet.Bytes32Set storage ref"
                          }
                        },
                        "id": 945,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "contains",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2628,
                        "src": "13381:30:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_struct$_Bytes32Set_$2574_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32Set_$2574_storage_ptr_$",
                          "typeString": "function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) view returns (bool)"
                        }
                      },
                      "id": 948,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "13381:59:13",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 951,
                  "nodeType": "IfStatement",
                  "src": "13376:85:13",
                  "trueBody": {
                    "functionReturnParameters": 936,
                    "id": 950,
                    "nodeType": "Return",
                    "src": "13454:7:13"
                  }
                },
                {
                  "assignments": [
                    954
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 954,
                      "mutability": "mutable",
                      "name": "tokenPair",
                      "nameLocation": "13489:9:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 1073,
                      "src": "13471:27:13",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                        "typeString": "struct Trickle.TokenPair"
                      },
                      "typeName": {
                        "id": 953,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 952,
                          "name": "TokenPair",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 196,
                          "src": "13471:9:13"
                        },
                        "referencedDeclaration": 196,
                        "src": "13471:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                          "typeString": "struct Trickle.TokenPair"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 959,
                  "initialValue": {
                    "baseExpression": {
                      "id": 955,
                      "name": "tokenPairs",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 249,
                      "src": "13501:10:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_TokenPair_$196_storage_$",
                        "typeString": "mapping(bytes32 => struct Trickle.TokenPair storage ref)"
                      }
                    },
                    "id": 958,
                    "indexExpression": {
                      "expression": {
                        "id": 956,
                        "name": "pendingOrders",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 934,
                        "src": "13512:13:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_memory_ptr",
                          "typeString": "struct Trickle.TokenPairPendingOrders memory"
                        }
                      },
                      "id": 957,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "tokenPairHash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 198,
                      "src": "13512:27:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "13501:39:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TokenPair_$196_storage",
                      "typeString": "struct Trickle.TokenPair storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "13471:69:13"
                },
                {
                  "assignments": [
                    962
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 962,
                      "mutability": "mutable",
                      "name": "sellToken",
                      "nameLocation": "13557:9:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 1073,
                      "src": "13550:16:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$1297",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 961,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 960,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1297,
                          "src": "13550:6:13"
                        },
                        "referencedDeclaration": 1297,
                        "src": "13550:6:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1297",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 967,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 964,
                          "name": "tokenPair",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 954,
                          "src": "13576:9:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                            "typeString": "struct Trickle.TokenPair storage pointer"
                          }
                        },
                        "id": 965,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sellToken",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 185,
                        "src": "13576:19:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 963,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1297,
                      "src": "13569:6:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$1297_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 966,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13569:27:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$1297",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "13550:46:13"
                },
                {
                  "assignments": [
                    970
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 970,
                      "mutability": "mutable",
                      "name": "buyToken",
                      "nameLocation": "13613:8:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 1073,
                      "src": "13606:15:13",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$1297",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 969,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 968,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1297,
                          "src": "13606:6:13"
                        },
                        "referencedDeclaration": 1297,
                        "src": "13606:6:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1297",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 975,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 972,
                          "name": "tokenPair",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 954,
                          "src": "13631:9:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                            "typeString": "struct Trickle.TokenPair storage pointer"
                          }
                        },
                        "id": 973,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "buyToken",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 187,
                        "src": "13631:18:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 971,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1297,
                      "src": "13624:6:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$1297_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 974,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13624:26:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$1297",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "13606:44:13"
                },
                {
                  "body": {
                    "id": 1071,
                    "nodeType": "Block",
                    "src": "13715:1154:13",
                    "statements": [
                      {
                        "assignments": [
                          988
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 988,
                            "mutability": "mutable",
                            "name": "orderHash",
                            "nameLocation": "13737:9:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 1071,
                            "src": "13729:17:13",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 987,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "13729:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 993,
                        "initialValue": {
                          "baseExpression": {
                            "expression": {
                              "id": 989,
                              "name": "pendingOrders",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 934,
                              "src": "13749:13:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_memory_ptr",
                                "typeString": "struct Trickle.TokenPairPendingOrders memory"
                              }
                            },
                            "id": 990,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "orders",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 201,
                            "src": "13749:20:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                              "typeString": "bytes32[] memory"
                            }
                          },
                          "id": 992,
                          "indexExpression": {
                            "id": 991,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 977,
                            "src": "13770:1:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "13749:23:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "13729:43:13"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "id": 999,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 994,
                            "name": "orderHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 988,
                            "src": "13849:9:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 997,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "13870:1:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 996,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "13862:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_bytes32_$",
                                "typeString": "type(bytes32)"
                              },
                              "typeName": {
                                "id": 995,
                                "name": "bytes32",
                                "nodeType": "ElementaryTypeName",
                                "src": "13862:7:13",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 998,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13862:10:13",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "13849:23:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1001,
                        "nodeType": "IfStatement",
                        "src": "13845:34:13",
                        "trueBody": {
                          "id": 1000,
                          "nodeType": "Break",
                          "src": "13874:5:13"
                        }
                      },
                      {
                        "condition": {
                          "id": 1007,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "13957:47:13",
                          "subExpression": {
                            "arguments": [
                              {
                                "id": 1005,
                                "name": "orderHash",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 988,
                                "src": "13994:9:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              ],
                              "expression": {
                                "expression": {
                                  "id": 1002,
                                  "name": "tokenPair",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 954,
                                  "src": "13958:9:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                                    "typeString": "struct Trickle.TokenPair storage pointer"
                                  }
                                },
                                "id": 1003,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "registeredOrders",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 195,
                                "src": "13958:26:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Bytes32Set_$2574_storage",
                                  "typeString": "struct EnumerableSet.Bytes32Set storage ref"
                                }
                              },
                              "id": 1004,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "contains",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 2628,
                              "src": "13958:35:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_struct$_Bytes32Set_$2574_storage_ptr_$_t_bytes32_$returns$_t_bool_$bound_to$_t_struct$_Bytes32Set_$2574_storage_ptr_$",
                                "typeString": "function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) view returns (bool)"
                              }
                            },
                            "id": 1006,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13958:46:13",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1009,
                        "nodeType": "IfStatement",
                        "src": "13953:58:13",
                        "trueBody": {
                          "id": 1008,
                          "nodeType": "Break",
                          "src": "14006:5:13"
                        }
                      },
                      {
                        "assignments": [
                          1012
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1012,
                            "mutability": "mutable",
                            "name": "recurringOrder",
                            "nameLocation": "14049:14:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 1071,
                            "src": "14026:37:13",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_RecurringOrder_$183_storage_ptr",
                              "typeString": "struct Trickle.RecurringOrder"
                            },
                            "typeName": {
                              "id": 1011,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1010,
                                "name": "RecurringOrder",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 183,
                                "src": "14026:14:13"
                              },
                              "referencedDeclaration": 183,
                              "src": "14026:14:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RecurringOrder_$183_storage_ptr",
                                "typeString": "struct Trickle.RecurringOrder"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1017,
                        "initialValue": {
                          "baseExpression": {
                            "expression": {
                              "id": 1013,
                              "name": "tokenPair",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 954,
                              "src": "14066:9:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_TokenPair_$196_storage_ptr",
                                "typeString": "struct Trickle.TokenPair storage pointer"
                              }
                            },
                            "id": 1014,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "orders",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 192,
                            "src": "14066:16:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RecurringOrder_$183_storage_$",
                              "typeString": "mapping(bytes32 => struct Trickle.RecurringOrder storage ref)"
                            }
                          },
                          "id": 1016,
                          "indexExpression": {
                            "id": 1015,
                            "name": "orderHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 988,
                            "src": "14083:9:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "14066:27:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_RecurringOrder_$183_storage",
                            "typeString": "struct Trickle.RecurringOrder storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "14026:67:13"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1026,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 1018,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "14192:5:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 1019,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "14192:15:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1024,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 1020,
                                    "name": "recurringOrder",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1012,
                                    "src": "14228:14:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_RecurringOrder_$183_storage_ptr",
                                      "typeString": "struct Trickle.RecurringOrder storage pointer"
                                    }
                                  },
                                  "id": 1021,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "lastExecution",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 180,
                                  "src": "14228:28:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "expression": {
                                    "id": 1022,
                                    "name": "recurringOrder",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1012,
                                    "src": "14259:14:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_RecurringOrder_$183_storage_ptr",
                                      "typeString": "struct Trickle.RecurringOrder storage pointer"
                                    }
                                  },
                                  "id": 1023,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "interval",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 182,
                                  "src": "14259:23:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "14228:54:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 1025,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "14227:56:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "14192:91:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1028,
                        "nodeType": "IfStatement",
                        "src": "14171:132:13",
                        "trueBody": {
                          "id": 1027,
                          "nodeType": "Break",
                          "src": "14298:5:13"
                        }
                      },
                      {
                        "assignments": [
                          1030
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1030,
                            "mutability": "mutable",
                            "name": "sellAmount",
                            "nameLocation": "14327:10:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 1071,
                            "src": "14319:18:13",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1029,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "14319:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1033,
                        "initialValue": {
                          "expression": {
                            "id": 1031,
                            "name": "recurringOrder",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1012,
                            "src": "14340:14:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_RecurringOrder_$183_storage_ptr",
                              "typeString": "struct Trickle.RecurringOrder storage pointer"
                            }
                          },
                          "id": 1032,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sellAmount",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 178,
                          "src": "14340:25:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "14319:46:13"
                      },
                      {
                        "assignments": [
                          1035
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1035,
                            "mutability": "mutable",
                            "name": "user",
                            "nameLocation": "14387:4:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 1071,
                            "src": "14379:12:13",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 1034,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "14379:7:13",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1038,
                        "initialValue": {
                          "expression": {
                            "id": 1036,
                            "name": "recurringOrder",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1012,
                            "src": "14394:14:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_RecurringOrder_$183_storage_ptr",
                              "typeString": "struct Trickle.RecurringOrder storage pointer"
                            }
                          },
                          "id": 1037,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "user",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 176,
                          "src": "14394:19:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "14379:34:13"
                      },
                      {
                        "assignments": [
                          1040
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1040,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "14432:7:13",
                            "nodeType": "VariableDeclaration",
                            "scope": 1071,
                            "src": "14427:12:13",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 1039,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "14427:4:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1047,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1042,
                              "name": "sellToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 962,
                              "src": "14484:9:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$1297",
                                "typeString": "contract IERC20"
                              }
                            },
                            {
                              "id": 1043,
                              "name": "buyToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 970,
                              "src": "14511:8:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$1297",
                                "typeString": "contract IERC20"
                              }
                            },
                            {
                              "id": 1044,
                              "name": "sellAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1030,
                              "src": "14537:10:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1045,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1035,
                              "src": "14565:4:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IERC20_$1297",
                                "typeString": "contract IERC20"
                              },
                              {
                                "typeIdentifier": "t_contract$_IERC20_$1297",
                                "typeString": "contract IERC20"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1041,
                            "name": "swapExactTokensForTokens",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 141,
                            "src": "14442:24:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$1297_$_t_contract$_IERC20_$1297_$_t_uint256_$_t_address_$returns$_t_bool_$",
                              "typeString": "function (contract IERC20,contract IERC20,uint256,address) returns (bool)"
                            }
                          },
                          "id": 1046,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14442:141:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "14427:156:13"
                      },
                      {
                        "condition": {
                          "id": 1048,
                          "name": "success",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1040,
                          "src": "14601:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 1069,
                          "nodeType": "Block",
                          "src": "14771:88:13",
                          "statements": [
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 1064,
                                      "name": "pendingOrders",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 934,
                                      "src": "14805:13:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_memory_ptr",
                                        "typeString": "struct Trickle.TokenPairPendingOrders memory"
                                      }
                                    },
                                    "id": 1065,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "tokenPairHash",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 198,
                                    "src": "14805:27:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  {
                                    "id": 1066,
                                    "name": "orderHash",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 988,
                                    "src": "14834:9:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  ],
                                  "id": 1063,
                                  "name": "SwapFailed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 226,
                                  "src": "14794:10:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$",
                                    "typeString": "function (bytes32,bytes32)"
                                  }
                                },
                                "id": 1067,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "14794:50:13",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1068,
                              "nodeType": "EmitStatement",
                              "src": "14789:55:13"
                            }
                          ]
                        },
                        "id": 1070,
                        "nodeType": "IfStatement",
                        "src": "14597:262:13",
                        "trueBody": {
                          "id": 1062,
                          "nodeType": "Block",
                          "src": "14610:155:13",
                          "statements": [
                            {
                              "expression": {
                                "id": 1054,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 1049,
                                    "name": "recurringOrder",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1012,
                                    "src": "14628:14:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_RecurringOrder_$183_storage_ptr",
                                      "typeString": "struct Trickle.RecurringOrder storage pointer"
                                    }
                                  },
                                  "id": 1051,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "lastExecution",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 180,
                                  "src": "14628:28:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "id": 1052,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -4,
                                    "src": "14659:5:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 1053,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "timestamp",
                                  "nodeType": "MemberAccess",
                                  "src": "14659:15:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "14628:46:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1055,
                              "nodeType": "ExpressionStatement",
                              "src": "14628:46:13"
                            },
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 1057,
                                      "name": "pendingOrders",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 934,
                                      "src": "14711:13:13",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_memory_ptr",
                                        "typeString": "struct Trickle.TokenPairPendingOrders memory"
                                      }
                                    },
                                    "id": 1058,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "tokenPairHash",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 198,
                                    "src": "14711:27:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  {
                                    "id": 1059,
                                    "name": "orderHash",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 988,
                                    "src": "14740:9:13",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  ],
                                  "id": 1056,
                                  "name": "SwapSucceeded",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 232,
                                  "src": "14697:13:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$",
                                    "typeString": "function (bytes32,bytes32)"
                                  }
                                },
                                "id": 1060,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "14697:53:13",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1061,
                              "nodeType": "EmitStatement",
                              "src": "14692:58:13"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 983,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 979,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 977,
                      "src": "13677:1:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "expression": {
                          "id": 980,
                          "name": "pendingOrders",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 934,
                          "src": "13681:13:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_memory_ptr",
                            "typeString": "struct Trickle.TokenPairPendingOrders memory"
                          }
                        },
                        "id": 981,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "orders",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 201,
                        "src": "13681:20:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                          "typeString": "bytes32[] memory"
                        }
                      },
                      "id": 982,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "13681:27:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "13677:31:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1072,
                  "initializationExpression": {
                    "assignments": [
                      977
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 977,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "13674:1:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 1072,
                        "src": "13666:9:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 976,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13666:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 978,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "13666:9:13"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 985,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "13710:3:13",
                      "subExpression": {
                        "id": 984,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 977,
                        "src": "13710:1:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 986,
                    "nodeType": "ExpressionStatement",
                    "src": "13710:3:13"
                  },
                  "nodeType": "ForStatement",
                  "src": "13661:1208:13"
                }
              ]
            },
            "documentation": {
              "id": 931,
              "nodeType": "StructuredDocumentation",
              "src": "12997:200:13",
              "text": " Execute orders for one token pair\n @param pendingOrders   Struct containing tokenPair hash and list of order hashes that need to be executed for this token pair."
            },
            "id": 1074,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_executeOrdersForSingleTokenPair",
            "nameLocation": "13211:32:13",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 935,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 934,
                  "mutability": "mutable",
                  "name": "pendingOrders",
                  "nameLocation": "13283:13:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 1074,
                  "src": "13253:43:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_memory_ptr",
                    "typeString": "struct Trickle.TokenPairPendingOrders"
                  },
                  "typeName": {
                    "id": 933,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 932,
                      "name": "TokenPairPendingOrders",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 202,
                      "src": "13253:22:13"
                    },
                    "referencedDeclaration": 202,
                    "src": "13253:22:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TokenPairPendingOrders_$202_storage_ptr",
                      "typeString": "struct Trickle.TokenPairPendingOrders"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13243:59:13"
            },
            "returnParameters": {
              "id": 936,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13312:0:13"
            },
            "scope": 1075,
            "src": "13202:1673:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 1076,
        "src": "593:14284:13",
        "usedErrors": []
      }
    ],
    "src": "32:14846:13"
  },
  "bytecode": "608060405234801561001057600080fd5b5060405162001c8b38038062001c8b833981016040819052610031916100bb565b60016000558061004033610069565b600280546001600160a01b0319166001600160a01b0392909216919091179055506008556100f8565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080604083850312156100ce57600080fd5b825160208401519092506001600160a01b03811681146100ed57600080fd5b809150509250929050565b611b8380620001086000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063790fc5fb1161009757806396f10b271161006657806396f10b2714610238578063ad4207c81461028d578063c7c6ab04146102b0578063f2fde38b146102c357600080fd5b8063790fc5fb146101ea57806389c952a3146102015780638bd9de58146102145780638da5cb5b1461022757600080fd5b80634585e33b116100d35780634585e33b1461019957806357819593146101ae5780636e04ff0d146101c1578063715018a6146101e257600080fd5b80631cb85818146100fa57806323d16e811461012a5780632d57b18514610179575b600080fd5b60025461010d906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61013d610138366004611486565b6102d6565b604051610121919081516001600160a01b0316815260208083015190820152604080830151908201526060918201519181019190915260800190565b61018c6101873660046114bd565b6103c2565b60405161012191906114da565b6101ac6101a736600461151e565b610494565b005b6101ac6101bc366004611590565b6104ba565b6101d46101cf36600461151e565b61083f565b6040516101219291906115e1565b6101ac610ab5565b6101f360085481565b604051908152602001610121565b6101ac61020f366004611486565b610b1b565b6101ac610222366004611640565b610c0b565b6001546001600160a01b031661010d565b61026d610246366004611686565b600090815260056020526040902080546001909101546001600160a01b0391821692911690565b604080516001600160a01b03938416815292909116602083015201610121565b6102a061029b36600461169f565b610c19565b6040519015158152602001610121565b61018c6102be3660046116f2565b610ed0565b6101ac6102d13660046114bd565b610fb9565b61030a604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b60008381526005602052604090206103256003820184611084565b61036d5760405162461bcd60e51b815260206004820152601460248201527313d4911154881113d154c81393d50811561254d560621b60448201526064015b60405180910390fd5b600083815260029182016020908152604091829020825160808101845281546001600160a01b031681526001820154928101929092529283015491810191909152600390910154606082015290505b92915050565b6001600160a01b0381166000908152600360205260408120606091906103e79061109f565b905060008167ffffffffffffffff8111156104045761040461171e565b60405190808252806020026020018201604052801561042d578160200160208202803683370190505b50905060005b8281101561048c576001600160a01b038516600090815260036020526040902061045d90826110a9565b82828151811061046f5761046f611734565b60209081029190910101528061048481611760565b915050610433565b509392505050565b60006104a2828401846117f9565b8051909150156104b5576104b5816110b5565b505050565b600083116104ff5760405162461bcd60e51b81526020600482015260126024820152710616d6f756e742063616e6e6f7420626520360741b6044820152606401610364565b6001600160a01b0385166105555760405162461bcd60e51b815260206004820181905260248201527f73656c6c546f6b656e2063616e6e6f74206265207a65726f20616464726573736044820152606401610364565b6001600160a01b0384166105ab5760405162461bcd60e51b815260206004820152601f60248201527f627579546f6b656e2063616e6e6f74206265207a65726f2061646472657373006044820152606401610364565b600854821161061a5760405162461bcd60e51b815260206004820152603560248201527f696e74657276616c2068617320746f2062652067726561746572207468616e206044820152741b5a5b9a5b5d5b555c1ad9595c125b9d195c9d985b605a1b6064820152608401610364565b6040516bffffffffffffffffffffffff19606087811b8216602084015286901b16603482015260009060480160408051601f198184030181529181528151602092830120600081815260059093529120909150610678600683611084565b6106f85780546001600160a01b038089166001600160a01b0319928316178355600183018054918916919092161790556106b3600683611113565b50604080516001600160a01b03808a168252881660208201527fc10d5168cedd6092198b6feaf9c1340006c4737be1b2f7c665dbc3421b3e255f910160405180910390a15b3360009081526003602052604090206107119083611113565b506040516bffffffffffffffffffffffff193360601b16602082015260348101869052605481018590526074810184905260009060940160408051601f198184030181529181528151602092830120600081815260028601909352912090915061077e6003840183611084565b6107a15780546001600160a01b0319163317815561079f6003840183611113565b505b33600090815260046020908152604080832087845290915290206107c59083611113565b50600181018790556002810185905560038101869055604080516001600160a01b03808c1682528a16602082015290810188905260608101879052608081018690527f683bc1b553fb7523892e96a28c87320b19c75a0e8a7294919ae8fbce9ecea5249060a00160405180910390a1505050505050505050565b600060606008546009546108539190611944565b42101561085f57610aae565b600061086b600661109f565b905060008167ffffffffffffffff8111156108885761088861171e565b6040519080825280602002602001820160405280156108ce57816020015b6040805180820190915260008152606060208201528152602001906001900390816108a65790505b5090506000805b83811015610a875760006108ea6006836110a9565b6000818152600560205260408120919250906109089060030161109f565b90508015610a725760008167ffffffffffffffff81111561092b5761092b61171e565b604051908082528060200260200182016040528015610954578160200160208202803683370190505b5090506000805b83811015610a2e57600085815260056020526040812061097e90600301836110a9565b60008781526005602090815260408083208484526002908101835292819020815160808101835281546001600160a01b031681526001820154938101939093529283015490820181905260039092015460608201819052929350916109e291611944565b421115610a1957818585815181106109fc576109fc611734565b602090810291909101015283610a1181611760565b94505060019c505b50508080610a2690611760565b91505061095b565b50604051806040016040528085815260200183815250878781518110610a5657610a56611734565b60200260200101819052508580610a6c90611760565b96505050505b50508080610a7f90611760565b9150506108d5565b5081604051602001610a99919061195c565b60405160208183030381529060405293505050505b9250929050565b6001546001600160a01b03163314610b0f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610364565b610b19600061111f565b565b6000828152600560205260409020610b366003820183611084565b610b825760405162461bcd60e51b815260206004820152601e60248201527f4f5244455220544f2044454c45544520444f4553204e4f5420455849535400006044820152606401610364565b60008281526002820160205260409020546001600160a01b03163314610bf85760405162461bcd60e51b815260206004820152602560248201527f43414e4e4f542044454c455445204f52444552204f4620444946464552454e54604482015264102aa9a2a960d91b6064820152608401610364565b610c056003820183611171565b50505050565b610c058484848460006104ba565b6000836001600160a01b0316856001600160a01b03161415610c905760405162461bcd60e51b815260206004820152602a60248201527f496e70757420616e64204f757470757420546f6b656e206861766520746f20626044820152691948191a5cdd1a5b98dd60b21b6064820152608401610364565b6040516323b872dd60e01b81526001600160a01b038381166004830152306024830152604482018590528616906323b872dd90606401602060405180830381600087803b158015610ce057600080fd5b505af1925050508015610d10575060408051601f3d908101601f19168201909252610d0d918101906119fc565b60015b610d1c57506000610ec8565b5060025460405163095ea7b360e01b81526001600160a01b039182166004820152602481018590529086169063095ea7b390604401602060405180830381600087803b158015610d6b57600080fd5b505af1158015610d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da391906119fc565b506040805160028082526060820183526000926020830190803683370190505090508581600081518110610dd957610dd9611734565b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610e0d57610e0d611734565b6001600160a01b0392831660209182029290920101526002546040516338ed173960e01b81529116906338ed173990610e53908790600090869089904290600401611a1e565b600060405180830381600087803b158015610e6d57600080fd5b505af1158015610e81573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ea99190810190611a8f565b600181518110610ebb57610ebb611734565b5060019250610ec8915050565b949350505050565b6001600160a01b0382166000908152600460209081526040808320848452909152812060609190610f009061109f565b905060008167ffffffffffffffff811115610f1d57610f1d61171e565b604051908082528060200260200182016040528015610f46578160200160208202803683370190505b50905060005b82811015610fb0576001600160a01b03861660009081526004602090815260408083208884529091529020610f8190826110a9565b828281518110610f9357610f93611734565b602090810291909101015280610fa881611760565b915050610f4c565b50949350505050565b6001546001600160a01b031633146110135760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610364565b6001600160a01b0381166110785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610364565b6110818161111f565b50565b600081815260018301602052604081205415155b9392505050565b60006103bc825490565b6000611098838361117d565b60005b815181101561110f5760008282815181106110d5576110d5611734565b602002602001015190506000801b816000015114156110f357505050565b6110fc816111a7565b508061110781611760565b9150506110b8565b5050565b60006110988383611344565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006110988383611393565b600082600001828154811061119457611194611734565b9060005260206000200154905092915050565b6020810151516111b45750565b80516111c290600690611084565b6111c95750565b805160009081526005602052604081208054600182015491926001600160a01b0391821692909116905b84602001515181101561133d5760008560200151828151811061121857611218611734565b602002602001015190506000801b811415611233575061133d565b6112406003860182611084565b61124a575061133d565b600081815260028087016020526040909120600381015491810154909161127091611944565b421161127d57505061133d565b600181015481546001600160a01b0316600061129b88888585610c19565b905080156112e957426002850155895160408051918252602082018790527f5db58c70037aa768b73c40c300afd09c428bc4bf9e881d02eb2a5f0e6fa295f9910160405180910390a1611325565b895160408051918252602082018790527f26916b3aee826c0f5bf6f8afa7138f7db313ada074b6be7ba10ac7b28ccf51c8910160405180910390a15b5050505050808061133590611760565b9150506111f3565b5050505050565b600081815260018301602052604081205461138b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103bc565b5060006103bc565b6000818152600183016020526040812054801561147c5760006113b7600183611b20565b85549091506000906113cb90600190611b20565b90508181146114305760008660000182815481106113eb576113eb611734565b906000526020600020015490508087600001848154811061140e5761140e611734565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061144157611441611b37565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103bc565b60009150506103bc565b6000806040838503121561149957600080fd5b50508035926020909101359150565b6001600160a01b038116811461108157600080fd5b6000602082840312156114cf57600080fd5b8135611098816114a8565b6020808252825182820181905260009190848201906040850190845b81811015611512578351835292840192918401916001016114f6565b50909695505050505050565b6000806020838503121561153157600080fd5b823567ffffffffffffffff8082111561154957600080fd5b818501915085601f83011261155d57600080fd5b81358181111561156c57600080fd5b86602082850101111561157e57600080fd5b60209290920196919550909350505050565b600080600080600060a086880312156115a857600080fd5b85356115b3816114a8565b945060208601356115c3816114a8565b94979496505050506040830135926060810135926080909101359150565b821515815260006020604081840152835180604085015260005b81811015611617578581018301518582016060015282016115fb565b81811115611629576000606083870101525b50601f01601f191692909201606001949350505050565b6000806000806080858703121561165657600080fd5b8435611661816114a8565b93506020850135611671816114a8565b93969395505050506040820135916060013590565b60006020828403121561169857600080fd5b5035919050565b600080600080608085870312156116b557600080fd5b84356116c0816114a8565b935060208501356116d0816114a8565b92506040850135915060608501356116e7816114a8565b939692955090935050565b6000806040838503121561170557600080fd5b8235611710816114a8565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156117745761177461174a565b5060010190565b6040805190810167ffffffffffffffff8111828210171561179e5761179e61171e565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156117cd576117cd61171e565b604052919050565b600067ffffffffffffffff8211156117ef576117ef61171e565b5060051b60200190565b6000602080838503121561180c57600080fd5b823567ffffffffffffffff8082111561182457600080fd5b818501915085601f83011261183857600080fd5b813561184b611846826117d5565b6117a4565b81815260059190911b8301840190848101908883111561186a57600080fd5b8585015b83811015611937578035858111156118865760008081fd5b86016040818c03601f190181131561189e5760008081fd5b6118a661177b565b89830135815281830135888111156118be5760008081fd5b8084019350508c603f8401126118d45760008081fd5b898301356118e4611846826117d5565b81815260059190911b84018301908b8101908f8311156119045760008081fd5b948401945b828610156119225785358252948c0194908c0190611909565b838d015250508552505091860191860161186e565b5098975050505050505050565b600082198211156119575761195761174a565b500190565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156119ed57898403603f19018652825180518552880151888501889052805188860181905290890190839060608701905b808310156119d85783518252928b019260019290920191908b01906119b8565b50978a01979550505091870191600101611984565b50919998505050505050505050565b600060208284031215611a0e57600080fd5b8151801515811461109857600080fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611a6e5784516001600160a01b031683529383019391830191600101611a49565b50506001600160a01b03969096166060850152505050608001529392505050565b60006020808385031215611aa257600080fd5b825167ffffffffffffffff811115611ab957600080fd5b8301601f81018513611aca57600080fd5b8051611ad8611846826117d5565b81815260059190911b82018301908381019087831115611af757600080fd5b928401925b82841015611b1557835182529284019290840190611afc565b979650505050505050565b600082821015611b3257611b3261174a565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212203b9dc30fbcedc8d44745e92075597932cdcde9976420b7b9b2d1bd9052e8df2d64736f6c63430008090033",
  "bytecodeSha1": "9f0d2aca4e5b15806b027871a244ff8e6f154a3e",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.9+commit.e5eed63a"
  },
  "contractName": "Trickle",
  "coverageMap": {
    "branches": {
      "0": {
        "Ownable.transferOwnership": {
          "103": [
            1934,
            1956,
            true
          ]
        }
      },
      "1": {},
      "10": {},
      "11": {},
      "12": {
        "ExchangeAdapter.swapExactTokensForTokens": {
          "102": [
            1722,
            1743,
            true
          ]
        }
      },
      "13": {
        "Trickle._executeOrdersForAllTokenPairs": {
          "94": [
            12847,
            12897,
            false
          ]
        },
        "Trickle._executeOrdersForSingleTokenPair": {
          "95": [
            13381,
            13440,
            false
          ],
          "96": [
            13849,
            13872,
            false
          ],
          "97": [
            13958,
            14004,
            false
          ],
          "98": [
            14192,
            14283,
            false
          ],
          "99": [
            14601,
            14608,
            false
          ]
        },
        "Trickle.checkUpkeep": {
          "89": [
            10179,
            10231,
            false
          ],
          "90": [
            10731,
            10744,
            false
          ],
          "91": [
            11206,
            11262,
            false
          ]
        },
        "Trickle.deleteRecurringOrder": {
          "92": [
            6521,
            6568,
            true
          ],
          "93": [
            6655,
            6702,
            true
          ]
        },
        "Trickle.getOrderData": {
          "81": [
            7443,
            7490,
            true
          ]
        },
        "Trickle.performUpkeep": {
          "82": [
            12126,
            12152,
            false
          ]
        },
        "Trickle.setRecurringOrderWithStartTimestamp": {
          "83": [
            4411,
            4426,
            true
          ],
          "84": [
            4467,
            4491,
            true
          ],
          "85": [
            4546,
            4569,
            true
          ],
          "86": [
            4636,
            4669,
            true
          ],
          "87": [
            4935,
            4980,
            false
          ],
          "88": [
            5548,
            5594,
            false
          ]
        }
      },
      "2": {},
      "5": {},
      "8": {
        "EnumerableSet._remove": {
          "100": [
            2439,
            2454,
            false
          ],
          "101": [
            2921,
            2947,
            false
          ]
        }
      }
    },
    "statements": {
      "0": {
        "Ownable._setOwner": {
          "60": [
            2131,
            2148
          ],
          "61": [
            2158,
            2203
          ]
        },
        "Ownable.owner": {
          "0": [
            1038,
            1051
          ]
        },
        "Ownable.renounceOwnership": {
          "34": [
            1669,
            1690
          ]
        },
        "Ownable.transferOwnership": {
          "49": [
            1926,
            1999
          ],
          "50": [
            2009,
            2028
          ]
        }
      },
      "1": {},
      "10": {},
      "11": {},
      "12": {
        "ExchangeAdapter.swapExactTokensForTokens": {
          "39": [
            1701,
            1811
          ],
          "40": [
            2334,
            2346
          ],
          "41": [
            1894,
            1946
          ],
          "42": [
            2014,
            2041
          ],
          "43": [
            2055,
            2083
          ],
          "44": [
            2097,
            2277
          ],
          "45": [
            2291,
            2302
          ]
        }
      },
      "13": {
        "Trickle._executeOrdersForAllTokenPairs": {
          "56": [
            12899,
            12904
          ],
          "57": [
            12918,
            12974
          ],
          "58": [
            12720,
            12723
          ]
        },
        "Trickle._executeOrdersForSingleTokenPair": {
          "64": [
            13874,
            13879
          ],
          "65": [
            14006,
            14011
          ],
          "66": [
            14298,
            14303
          ],
          "67": [
            14628,
            14674
          ],
          "68": [
            14692,
            14750
          ],
          "69": [
            14789,
            14844
          ],
          "70": [
            13710,
            13713
          ]
        },
        "Trickle.checkUpkeep": {
          "24": [
            10247,
            10281
          ],
          "25": [
            11311,
            11332
          ],
          "26": [
            11358,
            11361
          ],
          "27": [
            11387,
            11406
          ],
          "28": [
            10890,
            10893
          ],
          "29": [
            11464,
            11588
          ],
          "30": [
            11606,
            11609
          ],
          "31": [
            10524,
            10527
          ],
          "32": [
            11643,
            11684
          ]
        },
        "Trickle.deleteRecurringOrder": {
          "35": [
            6500,
            6624
          ],
          "36": [
            6634,
            6765
          ],
          "37": [
            6775,
            6820
          ]
        },
        "Trickle.getOrderData": {
          "2": [
            7422,
            7536
          ],
          "3": [
            7546,
            7581
          ]
        },
        "Trickle.getOrders": {
          "46": [
            9612,
            9673
          ],
          "47": [
            9593,
            9596
          ],
          "48": [
            9693,
            9711
          ]
        },
        "Trickle.getTokenPairData": {
          "1": [
            8080,
            8128
          ]
        },
        "Trickle.getTokenPairs": {
          "4": [
            8794,
            8847
          ],
          "5": [
            8775,
            8778
          ],
          "6": [
            8867,
            8889
          ]
        },
        "Trickle.performUpkeep": {
          "7": [
            12168,
            12215
          ]
        },
        "Trickle.setRecurringOrder": {
          "38": [
            3552,
            3707
          ]
        },
        "Trickle.setRecurringOrderWithStartTimestamp": {
          "8": [
            4403,
            4449
          ],
          "9": [
            4459,
            4528
          ],
          "10": [
            4538,
            4605
          ],
          "11": [
            4615,
            4748
          ],
          "12": [
            4996,
            5028
          ],
          "13": [
            5042,
            5072
          ],
          "14": [
            5086,
            5126
          ],
          "15": [
            5140,
            5184
          ],
          "16": [
            5204,
            5254
          ],
          "17": [
            5610,
            5633
          ],
          "18": [
            5647,
            5688
          ],
          "19": [
            5708,
            5765
          ],
          "20": [
            5776,
            5806
          ],
          "21": [
            5816,
            5853
          ],
          "22": [
            5863,
            5889
          ],
          "23": [
            5899,
            6059
          ]
        }
      },
      "2": {},
      "5": {
        "Context._msgSender": {
          "33": [
            659,
            676
          ]
        }
      },
      "8": {
        "EnumerableSet._add": {
          "71": [
            1751,
            1774
          ],
          "72": [
            1909,
            1949
          ],
          "73": [
            1963,
            1974
          ],
          "74": [
            2005,
            2017
          ]
        },
        "EnumerableSet._at": {
          "63": [
            4414,
            4439
          ]
        },
        "EnumerableSet._contains": {
          "51": [
            3760,
            3791
          ]
        },
        "EnumerableSet._length": {
          "54": [
            3954,
            3979
          ]
        },
        "EnumerableSet._remove": {
          "75": [
            3109,
            3147
          ],
          "76": [
            3221,
            3257
          ],
          "77": [
            3393,
            3410
          ],
          "78": [
            3478,
            3504
          ],
          "79": [
            3519,
            3530
          ],
          "80": [
            3561,
            3573
          ]
        },
        "EnumerableSet.add": {
          "59": [
            5421,
            5451
          ]
        },
        "EnumerableSet.at": {
          "55": [
            6605,
            6634
          ]
        },
        "EnumerableSet.contains": {
          "52": [
            5932,
            5967
          ]
        },
        "EnumerableSet.length": {
          "53": [
            6137,
            6163
          ]
        },
        "EnumerableSet.remove": {
          "62": [
            5715,
            5748
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.3.2/Context",
    "OpenZeppelin/openzeppelin-contracts@4.3.2/EnumerableSet",
    "ExchangeAdapter",
    "OpenZeppelin/openzeppelin-contracts@4.3.2/IERC20",
    "Uniswap/v2-periphery@1.0.0-beta.0/IUniswapV2Router01",
    "Uniswap/v2-periphery@1.0.0-beta.0/IUniswapV2Router02",
    "KeeperCompatibleInterface",
    "OpenZeppelin/openzeppelin-contracts@4.3.2/Ownable",
    "OpenZeppelin/openzeppelin-contracts@4.3.2/ReentrancyGuard"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100f55760003560e01c8063790fc5fb1161009757806396f10b271161006657806396f10b2714610238578063ad4207c81461028d578063c7c6ab04146102b0578063f2fde38b146102c357600080fd5b8063790fc5fb146101ea57806389c952a3146102015780638bd9de58146102145780638da5cb5b1461022757600080fd5b80634585e33b116100d35780634585e33b1461019957806357819593146101ae5780636e04ff0d146101c1578063715018a6146101e257600080fd5b80631cb85818146100fa57806323d16e811461012a5780632d57b18514610179575b600080fd5b60025461010d906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61013d610138366004611486565b6102d6565b604051610121919081516001600160a01b0316815260208083015190820152604080830151908201526060918201519181019190915260800190565b61018c6101873660046114bd565b6103c2565b60405161012191906114da565b6101ac6101a736600461151e565b610494565b005b6101ac6101bc366004611590565b6104ba565b6101d46101cf36600461151e565b61083f565b6040516101219291906115e1565b6101ac610ab5565b6101f360085481565b604051908152602001610121565b6101ac61020f366004611486565b610b1b565b6101ac610222366004611640565b610c0b565b6001546001600160a01b031661010d565b61026d610246366004611686565b600090815260056020526040902080546001909101546001600160a01b0391821692911690565b604080516001600160a01b03938416815292909116602083015201610121565b6102a061029b36600461169f565b610c19565b6040519015158152602001610121565b61018c6102be3660046116f2565b610ed0565b6101ac6102d13660046114bd565b610fb9565b61030a604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b60008381526005602052604090206103256003820184611084565b61036d5760405162461bcd60e51b815260206004820152601460248201527313d4911154881113d154c81393d50811561254d560621b60448201526064015b60405180910390fd5b600083815260029182016020908152604091829020825160808101845281546001600160a01b031681526001820154928101929092529283015491810191909152600390910154606082015290505b92915050565b6001600160a01b0381166000908152600360205260408120606091906103e79061109f565b905060008167ffffffffffffffff8111156104045761040461171e565b60405190808252806020026020018201604052801561042d578160200160208202803683370190505b50905060005b8281101561048c576001600160a01b038516600090815260036020526040902061045d90826110a9565b82828151811061046f5761046f611734565b60209081029190910101528061048481611760565b915050610433565b509392505050565b60006104a2828401846117f9565b8051909150156104b5576104b5816110b5565b505050565b600083116104ff5760405162461bcd60e51b81526020600482015260126024820152710616d6f756e742063616e6e6f7420626520360741b6044820152606401610364565b6001600160a01b0385166105555760405162461bcd60e51b815260206004820181905260248201527f73656c6c546f6b656e2063616e6e6f74206265207a65726f20616464726573736044820152606401610364565b6001600160a01b0384166105ab5760405162461bcd60e51b815260206004820152601f60248201527f627579546f6b656e2063616e6e6f74206265207a65726f2061646472657373006044820152606401610364565b600854821161061a5760405162461bcd60e51b815260206004820152603560248201527f696e74657276616c2068617320746f2062652067726561746572207468616e206044820152741b5a5b9a5b5d5b555c1ad9595c125b9d195c9d985b605a1b6064820152608401610364565b6040516bffffffffffffffffffffffff19606087811b8216602084015286901b16603482015260009060480160408051601f198184030181529181528151602092830120600081815260059093529120909150610678600683611084565b6106f85780546001600160a01b038089166001600160a01b0319928316178355600183018054918916919092161790556106b3600683611113565b50604080516001600160a01b03808a168252881660208201527fc10d5168cedd6092198b6feaf9c1340006c4737be1b2f7c665dbc3421b3e255f910160405180910390a15b3360009081526003602052604090206107119083611113565b506040516bffffffffffffffffffffffff193360601b16602082015260348101869052605481018590526074810184905260009060940160408051601f198184030181529181528151602092830120600081815260028601909352912090915061077e6003840183611084565b6107a15780546001600160a01b0319163317815561079f6003840183611113565b505b33600090815260046020908152604080832087845290915290206107c59083611113565b50600181018790556002810185905560038101869055604080516001600160a01b03808c1682528a16602082015290810188905260608101879052608081018690527f683bc1b553fb7523892e96a28c87320b19c75a0e8a7294919ae8fbce9ecea5249060a00160405180910390a1505050505050505050565b600060606008546009546108539190611944565b42101561085f57610aae565b600061086b600661109f565b905060008167ffffffffffffffff8111156108885761088861171e565b6040519080825280602002602001820160405280156108ce57816020015b6040805180820190915260008152606060208201528152602001906001900390816108a65790505b5090506000805b83811015610a875760006108ea6006836110a9565b6000818152600560205260408120919250906109089060030161109f565b90508015610a725760008167ffffffffffffffff81111561092b5761092b61171e565b604051908082528060200260200182016040528015610954578160200160208202803683370190505b5090506000805b83811015610a2e57600085815260056020526040812061097e90600301836110a9565b60008781526005602090815260408083208484526002908101835292819020815160808101835281546001600160a01b031681526001820154938101939093529283015490820181905260039092015460608201819052929350916109e291611944565b421115610a1957818585815181106109fc576109fc611734565b602090810291909101015283610a1181611760565b94505060019c505b50508080610a2690611760565b91505061095b565b50604051806040016040528085815260200183815250878781518110610a5657610a56611734565b60200260200101819052508580610a6c90611760565b96505050505b50508080610a7f90611760565b9150506108d5565b5081604051602001610a99919061195c565b60405160208183030381529060405293505050505b9250929050565b6001546001600160a01b03163314610b0f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610364565b610b19600061111f565b565b6000828152600560205260409020610b366003820183611084565b610b825760405162461bcd60e51b815260206004820152601e60248201527f4f5244455220544f2044454c45544520444f4553204e4f5420455849535400006044820152606401610364565b60008281526002820160205260409020546001600160a01b03163314610bf85760405162461bcd60e51b815260206004820152602560248201527f43414e4e4f542044454c455445204f52444552204f4620444946464552454e54604482015264102aa9a2a960d91b6064820152608401610364565b610c056003820183611171565b50505050565b610c058484848460006104ba565b6000836001600160a01b0316856001600160a01b03161415610c905760405162461bcd60e51b815260206004820152602a60248201527f496e70757420616e64204f757470757420546f6b656e206861766520746f20626044820152691948191a5cdd1a5b98dd60b21b6064820152608401610364565b6040516323b872dd60e01b81526001600160a01b038381166004830152306024830152604482018590528616906323b872dd90606401602060405180830381600087803b158015610ce057600080fd5b505af1925050508015610d10575060408051601f3d908101601f19168201909252610d0d918101906119fc565b60015b610d1c57506000610ec8565b5060025460405163095ea7b360e01b81526001600160a01b039182166004820152602481018590529086169063095ea7b390604401602060405180830381600087803b158015610d6b57600080fd5b505af1158015610d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da391906119fc565b506040805160028082526060820183526000926020830190803683370190505090508581600081518110610dd957610dd9611734565b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610e0d57610e0d611734565b6001600160a01b0392831660209182029290920101526002546040516338ed173960e01b81529116906338ed173990610e53908790600090869089904290600401611a1e565b600060405180830381600087803b158015610e6d57600080fd5b505af1158015610e81573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ea99190810190611a8f565b600181518110610ebb57610ebb611734565b5060019250610ec8915050565b949350505050565b6001600160a01b0382166000908152600460209081526040808320848452909152812060609190610f009061109f565b905060008167ffffffffffffffff811115610f1d57610f1d61171e565b604051908082528060200260200182016040528015610f46578160200160208202803683370190505b50905060005b82811015610fb0576001600160a01b03861660009081526004602090815260408083208884529091529020610f8190826110a9565b828281518110610f9357610f93611734565b602090810291909101015280610fa881611760565b915050610f4c565b50949350505050565b6001546001600160a01b031633146110135760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610364565b6001600160a01b0381166110785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610364565b6110818161111f565b50565b600081815260018301602052604081205415155b9392505050565b60006103bc825490565b6000611098838361117d565b60005b815181101561110f5760008282815181106110d5576110d5611734565b602002602001015190506000801b816000015114156110f357505050565b6110fc816111a7565b508061110781611760565b9150506110b8565b5050565b60006110988383611344565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006110988383611393565b600082600001828154811061119457611194611734565b9060005260206000200154905092915050565b6020810151516111b45750565b80516111c290600690611084565b6111c95750565b805160009081526005602052604081208054600182015491926001600160a01b0391821692909116905b84602001515181101561133d5760008560200151828151811061121857611218611734565b602002602001015190506000801b811415611233575061133d565b6112406003860182611084565b61124a575061133d565b600081815260028087016020526040909120600381015491810154909161127091611944565b421161127d57505061133d565b600181015481546001600160a01b0316600061129b88888585610c19565b905080156112e957426002850155895160408051918252602082018790527f5db58c70037aa768b73c40c300afd09c428bc4bf9e881d02eb2a5f0e6fa295f9910160405180910390a1611325565b895160408051918252602082018790527f26916b3aee826c0f5bf6f8afa7138f7db313ada074b6be7ba10ac7b28ccf51c8910160405180910390a15b5050505050808061133590611760565b9150506111f3565b5050505050565b600081815260018301602052604081205461138b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103bc565b5060006103bc565b6000818152600183016020526040812054801561147c5760006113b7600183611b20565b85549091506000906113cb90600190611b20565b90508181146114305760008660000182815481106113eb576113eb611734565b906000526020600020015490508087600001848154811061140e5761140e611734565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061144157611441611b37565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103bc565b60009150506103bc565b6000806040838503121561149957600080fd5b50508035926020909101359150565b6001600160a01b038116811461108157600080fd5b6000602082840312156114cf57600080fd5b8135611098816114a8565b6020808252825182820181905260009190848201906040850190845b81811015611512578351835292840192918401916001016114f6565b50909695505050505050565b6000806020838503121561153157600080fd5b823567ffffffffffffffff8082111561154957600080fd5b818501915085601f83011261155d57600080fd5b81358181111561156c57600080fd5b86602082850101111561157e57600080fd5b60209290920196919550909350505050565b600080600080600060a086880312156115a857600080fd5b85356115b3816114a8565b945060208601356115c3816114a8565b94979496505050506040830135926060810135926080909101359150565b821515815260006020604081840152835180604085015260005b81811015611617578581018301518582016060015282016115fb565b81811115611629576000606083870101525b50601f01601f191692909201606001949350505050565b6000806000806080858703121561165657600080fd5b8435611661816114a8565b93506020850135611671816114a8565b93969395505050506040820135916060013590565b60006020828403121561169857600080fd5b5035919050565b600080600080608085870312156116b557600080fd5b84356116c0816114a8565b935060208501356116d0816114a8565b92506040850135915060608501356116e7816114a8565b939692955090935050565b6000806040838503121561170557600080fd5b8235611710816114a8565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156117745761177461174a565b5060010190565b6040805190810167ffffffffffffffff8111828210171561179e5761179e61171e565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156117cd576117cd61171e565b604052919050565b600067ffffffffffffffff8211156117ef576117ef61171e565b5060051b60200190565b6000602080838503121561180c57600080fd5b823567ffffffffffffffff8082111561182457600080fd5b818501915085601f83011261183857600080fd5b813561184b611846826117d5565b6117a4565b81815260059190911b8301840190848101908883111561186a57600080fd5b8585015b83811015611937578035858111156118865760008081fd5b86016040818c03601f190181131561189e5760008081fd5b6118a661177b565b89830135815281830135888111156118be5760008081fd5b8084019350508c603f8401126118d45760008081fd5b898301356118e4611846826117d5565b81815260059190911b84018301908b8101908f8311156119045760008081fd5b948401945b828610156119225785358252948c0194908c0190611909565b838d015250508552505091860191860161186e565b5098975050505050505050565b600082198211156119575761195761174a565b500190565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156119ed57898403603f19018652825180518552880151888501889052805188860181905290890190839060608701905b808310156119d85783518252928b019260019290920191908b01906119b8565b50978a01979550505091870191600101611984565b50919998505050505050505050565b600060208284031215611a0e57600080fd5b8151801515811461109857600080fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611a6e5784516001600160a01b031683529383019391830191600101611a49565b50506001600160a01b03969096166060850152505050608001529392505050565b60006020808385031215611aa257600080fd5b825167ffffffffffffffff811115611ab957600080fd5b8301601f81018513611aca57600080fd5b8051611ad8611846826117d5565b81815260059190911b82018301908381019087831115611af757600080fd5b928401925b82841015611b1557835182529284019290840190611afc565b979650505050505050565b600082821015611b3257611b3261174a565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212203b9dc30fbcedc8d44745e92075597932cdcde9976420b7b9b2d1bd9052e8df2d64736f6c63430008090033",
  "deployedSourceMap": "593:14284:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;945:40:12;;;;;-1:-1:-1;;;;;945:40:12;;;;;;-1:-1:-1;;;;;205:32:14;;;187:51;;175:2;160:18;945:40:12;;;;;;;;7206:382:13;;;;;;:::i;:::-;;:::i;:::-;;;;;;733:13:14;;-1:-1:-1;;;;;729:39:14;711:58;;825:4;813:17;;;807:24;785:20;;;778:54;888:4;876:17;;;870:24;848:20;;;841:54;951:4;939:17;;;933:24;911:20;;;904:54;;;;698:3;683:19;;502:462;8481:415:13;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;11898:334::-;;;;;;:::i;:::-;;:::i;:::-;;4191:1875;;;;;;:::i;:::-;;:::i;10015:1676::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;1605:92:0:-;;;:::i;2415:36:13:-;;;;;;;;;4016:25:14;;;4004:2;3989:18;2415:36:13;3870:177:14;6329:498:13;;;;;;:::i;:::-;;:::i;3391:323::-;;;;;;:::i;:::-;;:::i;973:85:0:-;1045:6;;-1:-1:-1;;;;;1045:6:0;973:85;;7885:250:13;;;;;;:::i;:::-;7982:7;8044:26;;;:10;:26;;;;;8088:19;;;8109:18;;;;-1:-1:-1;;;;;8088:19:13;;;;8109:18;;;7885:250;;;;;-1:-1:-1;;;;;5205:15:14;;;5187:34;;5257:15;;;;5252:2;5237:18;;5230:43;5122:18;7885:250:13;4975:304:14;1528:835:12;;;;;;:::i;:::-;;:::i;:::-;;;6082:14:14;;6075:22;6057:41;;6045:2;6030:18;1528:835:12;5917:187:14;9283:435:13;;;;;;:::i;:::-;;:::i;1846:189:0:-;;;;;;:::i;:::-;;:::i;7206:382:13:-;7319:21;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7319:21:13;7356:27;7386:26;;;:10;:26;;;;;7443:47;:26;;;7479:10;7443:35;:47::i;:::-;7422:114;;;;-1:-1:-1;;;7422:114:13;;6631:2:14;7422:114:13;;;6613:21:14;6670:2;6650:18;;;6643:30;-1:-1:-1;;;6689:18:14;;;6682:50;6749:18;;7422:114:13;;;;;;;;;7553:28;;;;:16;;;;:28;;;;;;;;;7546:35;;;;;;;;;-1:-1:-1;;;;;7546:35:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7206:382:13;;;;;:::o;8481:415::-;-1:-1:-1;;;;;8622:26:13;;8598:21;8622:26;;;:19;:26;;;;;8566:16;;8598:21;8622:35;;:33;:35::i;:::-;8598:59;;8667:32;8716:13;8702:28;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8702:28:13;;8667:63;;8745:9;8740:118;8760:13;8756:1;:17;8740:118;;;-1:-1:-1;;;;;8815:26:13;;;;;;:19;:26;;;;;:32;;8845:1;8815:29;:32::i;:::-;8794:15;8810:1;8794:18;;;;;;;;:::i;:::-;;;;;;;;;;:53;8775:3;;;;:::i;:::-;;;;8740:118;;;-1:-1:-1;8874:15:13;8481:415;-1:-1:-1;;;8481:415:13:o;11898:334::-;11977:47;12027:85;;;;12051:11;12027:85;:::i;:::-;12126:22;;11977:135;;-1:-1:-1;12126:26:13;12122:104;;12168:47;12199:15;12168:30;:47::i;:::-;11967:265;11898:334;;:::o;4191:1875::-;4425:1;4411:11;:15;4403:46;;;;-1:-1:-1;;;4403:46:13;;10782:2:14;4403:46:13;;;10764:21:14;10821:2;10801:18;;;10794:30;-1:-1:-1;;;10840:18:14;;;10833:48;10898:18;;4403:46:13;10580:342:14;4403:46:13;-1:-1:-1;;;;;4467:24:13;;4459:69;;;;-1:-1:-1;;;4459:69:13;;11129:2:14;4459:69:13;;;11111:21:14;;;11148:18;;;11141:30;11207:34;11187:18;;;11180:62;11259:18;;4459:69:13;10927:356:14;4459:69:13;-1:-1:-1;;;;;4546:23:13;;4538:67;;;;-1:-1:-1;;;4538:67:13;;11490:2:14;4538:67:13;;;11472:21:14;11529:2;11509:18;;;11502:30;11568:33;11548:18;;;11541:61;11619:18;;4538:67:13;11288:355:14;4538:67:13;4648:21;;4636:9;:33;4615:133;;;;-1:-1:-1;;;4615:133:13;;11850:2:14;4615:133:13;;;11832:21:14;11889:2;11869:18;;;11862:30;11928:34;11908:18;;;11901:62;-1:-1:-1;;;11979:18:14;;;11972:51;12040:19;;4615:133:13;11648:417:14;4615:133:13;4805:39;;-1:-1:-1;;12297:2:14;12293:15;;;12289:24;;4805:39:13;;;12277:37:14;12348:15;;;12344:24;12330:12;;;12323:46;4758:21:13;;12385:12:14;;4805:39:13;;;-1:-1:-1;;4805:39:13;;;;;;;;;4782:72;;4805:39;4782:72;;;;4865:27;4895:25;;;:10;:25;;;;;4782:72;;-1:-1:-1;4935:45:13;:21;4782:72;4935:30;:45::i;:::-;4930:265;;4996:32;;-1:-1:-1;;;;;4996:32:13;;;-1:-1:-1;;;;;;4996:32:13;;;;;;;5042:18;;:30;;;;;;;;;;;;5086:40;:21;5112:13;5086:25;:40::i;:::-;-1:-1:-1;5145:39:13;;;-1:-1:-1;;;;;5205:15:14;;;5187:34;;5257:15;;5252:2;5237:18;;5230:43;5145:39:13;;5122:18:14;5145:39:13;;;;;;;4930:265;5224:10;5204:31;;;;:19;:31;;;;;:50;;5240:13;5204:35;:50::i;:::-;-1:-1:-1;5308:147:13;;-1:-1:-1;;5342:10:13;12641:2:14;12637:15;12633:53;5308:147:13;;;12621:66:14;12703:12;;;12696:28;;;12740:12;;;12733:28;;;12777:12;;;12770:28;;;5265:17:13;;12814:13:14;;5308:147:13;;;-1:-1:-1;;5308:147:13;;;;;;;;;5285:180;;5308:147;5285:180;;;;5475:28;5506:27;;;:16;;;:27;;;;;5285:180;;-1:-1:-1;5548:46:13;:26;;;5285:180;5548:35;:46::i;:::-;5543:156;;5610:23;;-1:-1:-1;;;;;;5610:23:13;5623:10;5610:23;;;5647:41;:26;;;5678:9;5647:30;:41::i;:::-;;5543:156;5724:10;5708:27;;;;:15;:27;;;;;;;;:42;;;;;;;;:57;;5755:9;5708:46;:57::i;:::-;-1:-1:-1;5776:16:13;;;:30;;;5816:19;;;:37;;;5863:14;;;:26;;;5904:155;;;-1:-1:-1;;;;;13153:15:14;;;13135:34;;13205:15;;13200:2;13185:18;;13178:43;13237:18;;;13230:34;;;13295:2;13280:18;;13273:34;;;13338:3;13323:19;;13316:35;;;5904:155:13;;13084:3:14;13069:19;5904:155:13;;;;;;;4393:1673;;;;4191:1875;;;;;:::o;10015:1676::-;10116:17;10135:24;10210:21;;10197:10;;:34;;;;:::i;:::-;10179:15;:52;10175:117;;;10247:34;;10175:117;10302:16;10321:30;:21;:28;:30::i;:::-;10302:49;;10361:59;10452:8;10423:38;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;10423:38:13;;;;;;;;;;;;;;;-1:-1:-1;10361:100:13;-1:-1:-1;10471:9:13;;10490:1144;10514:8;10510:1;:12;10490:1144;;;10543:21;10567:27;:21;10592:1;10567:24;:27::i;:::-;10608:17;10628:25;;;:10;:25;;;;;10543:51;;-1:-1:-1;10608:17:13;10628:85;;:59;;:83;:85::i;:::-;10608:105;-1:-1:-1;10731:13:13;;10727:897;;10764:23;10804:9;10790:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10790:24:13;;10764:50;;10832:9;10864;10859:588;10879:9;10875:1;:13;10859:588;;;10917:17;10937:25;;;:10;:25;;;;;:98;;:67;;11033:1;10937:95;:98::i;:::-;11057:27;11087:25;;;:10;:25;;;;;;;;:68;;;:57;;;;:68;;;;;;11057:98;;;;;;;;;-1:-1:-1;;;;;11057:98:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10917:118;;-1:-1:-1;11057:98:13;11225:36;;;:::i;:::-;11206:15;:56;11177:252;;;11323:9;11311:6;11318:1;11311:9;;;;;;;;:::i;:::-;;;;;;;;;;:21;11358:3;;;;:::i;:::-;;;;11402:4;11387:19;;11177:252;10895:552;;10890:3;;;;;:::i;:::-;;;;10859:588;;;;11485:103;;;;;;;;11529:13;11485:103;;;;11564:6;11485:103;;;11464:15;11480:1;11464:18;;;;;;;;:::i;:::-;;;;;;:124;;;;11606:3;;;;;:::i;:::-;;;;10746:878;;10727:897;10529:1105;;10524:3;;;;;:::i;:::-;;;;10490:1144;;;;11668:15;11657:27;;;;;;;;:::i;:::-;;;;;;;;;;;;;11643:41;;10165:1526;;;10015:1676;;;;;;:::o;1605:92:0:-;1045:6;;-1:-1:-1;;;;;1045:6:0;666:10:5;1185:23:0;1177:68;;;;-1:-1:-1;;;1177:68:0;;15234:2:14;1177:68:0;;;15216:21:14;;;15253:18;;;15246:30;15312:34;15292:18;;;15285:62;15364:18;;1177:68:0;15032:356:14;1177:68:0;1669:21:::1;1687:1;1669:9;:21::i;:::-;1605:92::o:0;6329:498:13:-;6434:27;6464:26;;;:10;:26;;;;;6521:47;:26;;;6557:10;6521:35;:47::i;:::-;6500:124;;;;-1:-1:-1;;;6500:124:13;;15595:2:14;6500:124:13;;;15577:21:14;15634:2;15614:18;;;15607:30;15673:32;15653:18;;;15646:60;15723:18;;6500:124:13;15393:354:14;6500:124:13;6655:28;;;;:16;;;:28;;;;;:33;-1:-1:-1;;;;;6655:33:13;6692:10;6655:47;6634:131;;;;-1:-1:-1;;;6634:131:13;;15954:2:14;6634:131:13;;;15936:21:14;15993:2;15973:18;;;15966:30;16032:34;16012:18;;;16005:62;-1:-1:-1;;;16083:18:14;;;16076:35;16128:19;;6634:131:13;15752:401:14;6634:131:13;6775:45;:26;;;6809:10;6775:33;:45::i;:::-;;6424:403;6329:498;;:::o;3391:323::-;3552:155;3601:10;3625:9;3648:11;3673:9;3696:1;3552:35;:155::i;1528:835:12:-;1685:4;1734:9;-1:-1:-1;;;;;1722:21:12;:8;-1:-1:-1;;;;;1722:21:12;;;1701:110;;;;-1:-1:-1;;;1701:110:12;;16360:2:14;1701:110:12;;;16342:21:14;16399:2;16379:18;;;16372:30;16438:34;16418:18;;;16411:62;-1:-1:-1;;;16489:18:14;;;16482:40;16539:19;;1701:110:12;16158:406:14;1701:110:12;1825:54;;-1:-1:-1;;;1825:54:12;;-1:-1:-1;;;;;16827:15:14;;;1825:54:12;;;16809:34:14;1862:4:12;16859:18:14;;;16852:43;16911:18;;;16904:34;;;1825:21:12;;;;;16744:18:14;;1825:54:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1825:54:12;;;;;;;;-1:-1:-1;;1825:54:12;;;;;;;;;;;;:::i;:::-;;;1821:536;;-1:-1:-1;2341:5:12;2334:12;;1821:536;-1:-1:-1;1919:14:12;;1894:52;;-1:-1:-1;;;1894:52:12;;-1:-1:-1;;;;;1919:14:12;;;1894:52;;;17405:51:14;17472:18;;;17465:34;;;1894:16:12;;;;;;17378:18:14;;1894:52:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1984:16:12;;;1998:1;1984:16;;;;;;;;1960:21;;1984:16;;;;;;;;;;-1:-1:-1;1984:16:12;1960:40;;2032:8;2014:4;2019:1;2014:7;;;;;;;;:::i;:::-;;;;;;:27;-1:-1:-1;;;;;2014:27:12;;;-1:-1:-1;;;;;2014:27:12;;;;;2073:9;2055:4;2060:1;2055:7;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2055:28:12;;;:7;;;;;;;;;:28;2097:14;;:177;;-1:-1:-1;;;2097:177:12;;:14;;;:39;;:177;;2154:9;;2097:14;;2200:4;;2222:5;;2245:15;;2097:177;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2097:177:12;;;;;;;;;;;;:::i;:::-;2275:1;2097:180;;;;;;;;:::i;:::-;-1:-1:-1;2298:4:12;;-1:-1:-1;2291:11:12;;-1:-1:-1;;2291:11:12;1821:536;1528:835;;;;;;:::o;9283:435:13:-;-1:-1:-1;;;;;9440:22:13;;9420:17;9440:22;;;:15;:22;;;;;;;;:38;;;;;;;;9388:16;;9420:17;9440:47;;:45;:47::i;:::-;9420:67;;9497:28;9542:9;9528:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9528:24:13;;9497:55;;9567:9;9562:122;9582:9;9578:1;:13;9562:122;;;-1:-1:-1;;;;;9629:22:13;;;;;;:15;:22;;;;;;;;:38;;;;;;;;:44;;9671:1;9629:41;:44::i;:::-;9612:11;9624:1;9612:14;;;;;;;;:::i;:::-;;;;;;;;;;:61;9593:3;;;;:::i;:::-;;;;9562:122;;;-1:-1:-1;9700:11:13;9283:435;-1:-1:-1;;;;9283:435:13:o;1846:189:0:-;1045:6;;-1:-1:-1;;;;;1045:6:0;666:10:5;1185:23:0;1177:68;;;;-1:-1:-1;;;1177:68:0;;15234:2:14;1177:68:0;;;15216:21:14;;;15253:18;;;15246:30;15312:34;15292:18;;;15285:62;15364:18;;1177:68:0;15032:356:14;1177:68:0;-1:-1:-1;;;;;1934:22:0;::::1;1926:73;;;::::0;-1:-1:-1;;;1926:73:0;;19605:2:14;1926:73:0::1;::::0;::::1;19587:21:14::0;19644:2;19624:18;;;19617:30;19683:34;19663:18;;;19656:62;-1:-1:-1;;;19734:18:14;;;19727:36;19780:19;;1926:73:0::1;19403:402:14::0;1926:73:0::1;2009:19;2019:8;2009:9;:19::i;:::-;1846:189:::0;:::o;5836:138:8:-;5916:4;3767:19;;;:12;;;:19;;;;;;:24;;5939:28;5932:35;5836:138;-1:-1:-1;;;5836:138:8:o;6055:115::-;6118:7;6144:19;6152:3;3961:18;;3879:107;6512:129;6586:7;6612:22;6616:3;6628:5;6612:3;:22::i;12552:439:13:-;12680:9;12675:310;12695:16;:23;12691:1;:27;12675:310;;;12739:68;12810:16;12827:1;12810:19;;;;;;;;:::i;:::-;;;;;;;12739:90;;12895:1;12887:10;;12847:22;:36;;;:50;12843:61;;;12899:5;12675:310;12552:439;:::o;12843:61::-;12918:56;12951:22;12918:32;:56::i;:::-;-1:-1:-1;12720:3:13;;;;:::i;:::-;;;;12675:310;;;;12552:439;:::o;5335:123:8:-;5405:4;5428:23;5433:3;5445:5;5428:4;:23::i;2041:169:0:-;2115:6;;;-1:-1:-1;;;;;2131:17:0;;;-1:-1:-1;;;;;;2131:17:0;;;;;;;2163:40;;2115:6;;;2131:17;2115:6;;2163:40;;2096:16;;2163:40;2086:124;2041:169;:::o;5626:129:8:-;5699:4;5722:26;5730:3;5742:5;5722:7;:26::i;4328:118::-;4395:7;4421:3;:11;;4433:5;4421:18;;;;;;;;:::i;:::-;;;;;;;;;4414:25;;4328:118;;;;:::o;13202:1673:13:-;13326:20;;;;:27;13322:45;;13202:1673;:::o;13322:45::-;13412:27;;13381:59;;:21;;:30;:59::i;:::-;13376:85;;13202:1673;:::o;13376:85::-;13512:27;;13471;13501:39;;;:10;:39;;;;;13576:19;;;13631:18;;;13501:39;;-1:-1:-1;;;;;13576:19:13;;;;13631:18;;;;13661:1208;13681:13;:20;;;:27;13677:1;:31;13661:1208;;;13729:17;13749:13;:20;;;13770:1;13749:23;;;;;;;;:::i;:::-;;;;;;;13729:43;;13870:1;13862:10;;13849:9;:23;13845:34;;;13874:5;;;13845:34;13958:46;:26;;;13994:9;13958:35;:46::i;:::-;13953:58;;14006:5;;;13953:58;14026:37;14066:27;;;:16;;;;:27;;;;;;14259:23;;;;14228:28;;;;14066:27;;14228:54;;;:::i;:::-;14192:15;:91;14171:132;;14298:5;;;;14171:132;14340:25;;;;14394:19;;-1:-1:-1;;;;;14394:19:13;14319:18;14442:141;14484:9;14511:8;14340:25;14394:19;14442:24;:141::i;:::-;14427:156;;14601:7;14597:262;;;14659:15;14628:28;;;:46;14711:27;;14697:53;;;19984:25:14;;;20040:2;20025:18;;20018:34;;;14697:53:13;;19957:18:14;14697:53:13;;;;;;;14597:262;;;14805:27;;14794:50;;;19984:25:14;;;20040:2;20025:18;;20018:34;;;14794:50:13;;19957:18:14;14794:50:13;;;;;;;14597:262;13715:1154;;;;;13710:3;;;;;:::i;:::-;;;;13661:1208;;;;13312:1563;;;13202:1673;:::o;1630:404:8:-;1693:4;3767:19;;;:12;;;:19;;;;;;1709:319;;-1:-1:-1;1751:23:8;;;;;;;;:11;:23;;;;;;;;;;;;;1931:18;;1909:19;;;:12;;;:19;;;;;;:40;;;;1963:11;;1709:319;-1:-1:-1;2012:5:8;2005:12;;2202:1388;2268:4;2405:19;;;:12;;;:19;;;;;;2439:15;;2435:1149;;2808:21;2832:14;2845:1;2832:10;:14;:::i;:::-;2880:18;;2808:38;;-1:-1:-1;2860:17:8;;2880:22;;2901:1;;2880:22;:::i;:::-;2860:42;;2934:13;2921:9;:26;2917:398;;2967:17;2987:3;:11;;2999:9;2987:22;;;;;;;;:::i;:::-;;;;;;;;;2967:42;;3138:9;3109:3;:11;;3121:13;3109:26;;;;;;;;:::i;:::-;;;;;;;;;;;;:38;;;;3221:23;;;:12;;;:23;;;;;:36;;;2917:398;3393:17;;:3;;:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;3485:3;:12;;:19;3498:5;3485:19;;;;;;;;;;;3478:26;;;3526:4;3519:11;;;;;;;2435:1149;3568:5;3561:12;;;;;249:248:14;317:6;325;378:2;366:9;357:7;353:23;349:32;346:52;;;394:1;391;384:12;346:52;-1:-1:-1;;417:23:14;;;487:2;472:18;;;459:32;;-1:-1:-1;249:248:14:o;969:131::-;-1:-1:-1;;;;;1044:31:14;;1034:42;;1024:70;;1090:1;1087;1080:12;1105:247;1164:6;1217:2;1205:9;1196:7;1192:23;1188:32;1185:52;;;1233:1;1230;1223:12;1185:52;1272:9;1259:23;1291:31;1316:5;1291:31;:::i;1357:632::-;1528:2;1580:21;;;1650:13;;1553:18;;;1672:22;;;1499:4;;1528:2;1751:15;;;;1725:2;1710:18;;;1499:4;1794:169;1808:6;1805:1;1802:13;1794:169;;;1869:13;;1857:26;;1938:15;;;;1903:12;;;;1830:1;1823:9;1794:169;;;-1:-1:-1;1980:3:14;;1357:632;-1:-1:-1;;;;;;1357:632:14:o;1994:591::-;2064:6;2072;2125:2;2113:9;2104:7;2100:23;2096:32;2093:52;;;2141:1;2138;2131:12;2093:52;2181:9;2168:23;2210:18;2251:2;2243:6;2240:14;2237:34;;;2267:1;2264;2257:12;2237:34;2305:6;2294:9;2290:22;2280:32;;2350:7;2343:4;2339:2;2335:13;2331:27;2321:55;;2372:1;2369;2362:12;2321:55;2412:2;2399:16;2438:2;2430:6;2427:14;2424:34;;;2454:1;2451;2444:12;2424:34;2499:7;2494:2;2485:6;2481:2;2477:15;2473:24;2470:37;2467:57;;;2520:1;2517;2510:12;2467:57;2551:2;2543:11;;;;;2573:6;;-1:-1:-1;1994:591:14;;-1:-1:-1;;;;1994:591:14:o;2590:594::-;2685:6;2693;2701;2709;2717;2770:3;2758:9;2749:7;2745:23;2741:33;2738:53;;;2787:1;2784;2777:12;2738:53;2826:9;2813:23;2845:31;2870:5;2845:31;:::i;:::-;2895:5;-1:-1:-1;2952:2:14;2937:18;;2924:32;2965:33;2924:32;2965:33;:::i;:::-;2590:594;;3017:7;;-1:-1:-1;;;;3071:2:14;3056:18;;3043:32;;3122:2;3107:18;;3094:32;;3173:3;3158:19;;;3145:33;;-1:-1:-1;2590:594:14:o;3189:676::-;3372:6;3365:14;3358:22;3347:9;3340:41;3321:4;3400:2;3438;3433;3422:9;3418:18;3411:30;3470:6;3464:13;3513:6;3508:2;3497:9;3493:18;3486:34;3538:1;3548:140;3562:6;3559:1;3556:13;3548:140;;;3657:14;;;3653:23;;3647:30;3623:17;;;3642:2;3619:26;3612:66;3577:10;;3548:140;;;3706:6;3703:1;3700:13;3697:91;;;3776:1;3771:2;3762:6;3751:9;3747:22;3743:31;3736:42;3697:91;-1:-1:-1;3849:2:14;3828:15;-1:-1:-1;;3824:29:14;3809:45;;;;3856:2;3805:54;;3189:676;-1:-1:-1;;;;3189:676:14:o;4052:525::-;4138:6;4146;4154;4162;4215:3;4203:9;4194:7;4190:23;4186:33;4183:53;;;4232:1;4229;4222:12;4183:53;4271:9;4258:23;4290:31;4315:5;4290:31;:::i;:::-;4340:5;-1:-1:-1;4397:2:14;4382:18;;4369:32;4410:33;4369:32;4410:33;:::i;:::-;4052:525;;4462:7;;-1:-1:-1;;;;4516:2:14;4501:18;;4488:32;;4567:2;4552:18;4539:32;;4052:525::o;4790:180::-;4849:6;4902:2;4890:9;4881:7;4877:23;4873:32;4870:52;;;4918:1;4915;4908:12;4870:52;-1:-1:-1;4941:23:14;;4790:180;-1:-1:-1;4790:180:14:o;5284:628::-;5400:6;5408;5416;5424;5477:3;5465:9;5456:7;5452:23;5448:33;5445:53;;;5494:1;5491;5484:12;5445:53;5533:9;5520:23;5552:31;5577:5;5552:31;:::i;:::-;5602:5;-1:-1:-1;5659:2:14;5644:18;;5631:32;5672:33;5631:32;5672:33;:::i;:::-;5724:7;-1:-1:-1;5778:2:14;5763:18;;5750:32;;-1:-1:-1;5834:2:14;5819:18;;5806:32;5847:33;5806:32;5847:33;:::i;:::-;5284:628;;;;-1:-1:-1;5284:628:14;;-1:-1:-1;;5284:628:14:o;6109:315::-;6177:6;6185;6238:2;6226:9;6217:7;6213:23;6209:32;6206:52;;;6254:1;6251;6244:12;6206:52;6293:9;6280:23;6312:31;6337:5;6312:31;:::i;:::-;6362:5;6414:2;6399:18;;;;6386:32;;-1:-1:-1;;;6109:315:14:o;6778:127::-;6839:10;6834:3;6830:20;6827:1;6820:31;6870:4;6867:1;6860:15;6894:4;6891:1;6884:15;6910:127;6971:10;6966:3;6962:20;6959:1;6952:31;7002:4;6999:1;6992:15;7026:4;7023:1;7016:15;7042:127;7103:10;7098:3;7094:20;7091:1;7084:31;7134:4;7131:1;7124:15;7158:4;7155:1;7148:15;7174:135;7213:3;-1:-1:-1;;7234:17:14;;7231:43;;;7254:18;;:::i;:::-;-1:-1:-1;7301:1:14;7290:13;;7174:135::o;7314:257::-;7386:4;7380:11;;;7418:17;;7465:18;7450:34;;7486:22;;;7447:62;7444:88;;;7512:18;;:::i;:::-;7548:4;7541:24;7314:257;:::o;7576:275::-;7647:2;7641:9;7712:2;7693:13;;-1:-1:-1;;7689:27:14;7677:40;;7747:18;7732:34;;7768:22;;;7729:62;7726:88;;;7794:18;;:::i;:::-;7830:2;7823:22;7576:275;;-1:-1:-1;7576:275:14:o;7856:205::-;7938:4;7971:18;7963:6;7960:30;7957:56;;;7993:18;;:::i;:::-;-1:-1:-1;8038:1:14;8034:14;8050:4;8030:25;;7856:205::o;8066:2509::-;8189:6;8220:2;8263;8251:9;8242:7;8238:23;8234:32;8231:52;;;8279:1;8276;8269:12;8231:52;8319:9;8306:23;8348:18;8389:2;8381:6;8378:14;8375:34;;;8405:1;8402;8395:12;8375:34;8443:6;8432:9;8428:22;8418:32;;8488:7;8481:4;8477:2;8473:13;8469:27;8459:55;;8510:1;8507;8500:12;8459:55;8546:2;8533:16;8569:82;8585:65;8647:2;8585:65;:::i;:::-;8569:82;:::i;:::-;8685:15;;;8767:1;8763:10;;;;8755:19;;8751:28;;;8716:12;;;;8791:19;;;8788:39;;;8823:1;8820;8813:12;8788:39;8855:2;8851;8847:11;8867:1678;8883:6;8878:3;8875:15;8867:1678;;;8969:3;8956:17;9005:2;8992:11;8989:19;8986:109;;;9049:1;9078:2;9074;9067:14;8986:109;9118:20;;9161:4;9189:16;;;-1:-1:-1;;9185:30:14;9181:39;-1:-1:-1;9178:129:14;;;9261:1;9290:2;9286;9279:14;9178:129;9333:22;;:::i;:::-;9403:2;9399;9395:11;9382:25;9375:5;9368:40;9458:2;9454;9450:11;9437:25;9491:2;9481:8;9478:16;9475:106;;;9535:1;9564:2;9560;9553:14;9475:106;9613:8;9609:2;9605:17;9594:28;;;9663:7;9658:2;9653:3;9649:12;9645:26;9635:127;;9714:1;9744:3;9739;9732:16;9635:127;9808:2;9803:3;9799:12;9786:26;9838:83;9854:66;9916:3;9854:66;:::i;9838:83::-;9965:18;;;10065:1;10061:11;;;;10052:21;;10048:30;;;10005:14;;;;10094:21;;;10091:114;;;10157:1;10187:3;10182;10175:16;10091:114;10231:12;;;;10256:174;10274:8;10267:5;10264:19;10256:174;;;10356:19;;10342:34;;10295:14;;;;10402;;;;10256:174;;;10450:14;;;10443:29;-1:-1:-1;;10485:18:14;;-1:-1:-1;;10523:12:14;;;;8900;;8867:1678;;;-1:-1:-1;10564:5:14;8066:2509;-1:-1:-1;;;;;;;;8066:2509:14:o;13362:128::-;13402:3;13433:1;13429:6;13426:1;13423:13;13420:39;;;13439:18;;:::i;:::-;-1:-1:-1;13475:9:14;;13362:128::o;13495:1532::-;13715:4;13744:2;13784;13773:9;13769:18;13814:2;13803:9;13796:21;13837:6;13872;13866:13;13903:6;13895;13888:22;13929:2;13919:12;;13962:2;13951:9;13947:18;13940:25;;14024:2;14014:6;14011:1;14007:14;13996:9;13992:30;13988:39;14062:2;14054:6;14050:15;14083:1;14104;14114:884;14130:6;14125:3;14122:15;14114:884;;;14199:22;;;-1:-1:-1;;14195:36:14;14183:49;;14255:13;;14338:9;;14323:25;;14387:11;;14381:18;14419:15;;;14412:27;;;14500:19;;14295:15;;;14532:24;;;14622:21;;;;14667:1;;14590:2;14578:15;;;14681:209;14697:8;14692:3;14689:17;14681:209;;;14774:15;;14760:30;;14859:17;;;;14725:1;14716:11;;;;;14816:14;;;;14681:209;;;-1:-1:-1;14976:12:14;;;;14913:5;-1:-1:-1;;;14941:15:14;;;;14156:1;14147:11;14114:884;;;-1:-1:-1;15015:6:14;;13495:1532;-1:-1:-1;;;;;;;;;13495:1532:14:o;16949:277::-;17016:6;17069:2;17057:9;17048:7;17044:23;17040:32;17037:52;;;17085:1;17082;17075:12;17037:52;17117:9;17111:16;17170:5;17163:13;17156:21;17149:5;17146:32;17136:60;;17192:1;17189;17182:12;17510:980;17772:4;17820:3;17809:9;17805:19;17851:6;17840:9;17833:25;17877:2;17915:6;17910:2;17899:9;17895:18;17888:34;17958:3;17953:2;17942:9;17938:18;17931:31;17982:6;18017;18011:13;18048:6;18040;18033:22;18086:3;18075:9;18071:19;18064:26;;18125:2;18117:6;18113:15;18099:29;;18146:1;18156:195;18170:6;18167:1;18164:13;18156:195;;;18235:13;;-1:-1:-1;;;;;18231:39:14;18219:52;;18326:15;;;;18291:12;;;;18267:1;18185:9;18156:195;;;-1:-1:-1;;;;;;;18407:32:14;;;;18402:2;18387:18;;18380:60;-1:-1:-1;;;18471:3:14;18456:19;18449:35;18368:3;17510:980;-1:-1:-1;;;17510:980:14:o;18495:903::-;18590:6;18621:2;18664;18652:9;18643:7;18639:23;18635:32;18632:52;;;18680:1;18677;18670:12;18632:52;18713:9;18707:16;18746:18;18738:6;18735:30;18732:50;;;18778:1;18775;18768:12;18732:50;18801:22;;18854:4;18846:13;;18842:27;-1:-1:-1;18832:55:14;;18883:1;18880;18873:12;18832:55;18912:2;18906:9;18935:82;18951:65;19013:2;18951:65;:::i;18935:82::-;19051:15;;;19133:1;19129:10;;;;19121:19;;19117:28;;;19082:12;;;;19157:19;;;19154:39;;;19189:1;19186;19179:12;19154:39;19213:11;;;;19233:135;19249:6;19244:3;19241:15;19233:135;;;19315:10;;19303:23;;19266:12;;;;19346;;;;19233:135;;;19387:5;18495:903;-1:-1:-1;;;;;;;18495:903:14:o;20063:125::-;20103:4;20131:1;20128;20125:8;20122:34;;;20136:18;;:::i;:::-;-1:-1:-1;20173:9:14;;20063:125::o;20193:127::-;20254:10;20249:3;20245:20;20242:1;20235:31;20285:4;20282:1;20275:15;20309:4;20306:1;20299:15",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "notice": "Check if Upkeep is needed and generate performData",
        "returns": {
          "performData": "     Serialized array of structs identifying orders to be executed in next upkeep",
          "upkeepNeeded": "    Boolean indicating wether upkeep needs to be performed"
        }
      },
      "constructor": {
        "notice": "Creates new instance of Trickle contract",
        "params": {
          "_exchangeRouter": "Address of Sushiswap / UniswapV2 router contract to execute trades against",
          "_minimumUpkeepInterval": "Minimum interval between upkeeps independent of users orders"
        }
      },
      "deleteRecurringOrder(bytes32,bytes32)": {
        "notice": "Delete a given recurring order",
        "params": {
          "_orderHash": "Hash of remaining order data (user address, amount, interval)",
          "_tokenPairHash": "Hash of sell and buyToken addresses identifying the tokenPair."
        }
      },
      "getOrderData(bytes32,bytes32)": {
        "notice": "Utility function for frontend to get data on a given order",
        "params": {
          "_orderHash": "Hash of remaining order data (user address, amount, interval)",
          "_tokenPairHash": "Hash of sell and buyToken addresses identifying the tokenPair."
        },
        "returns": {
          "_0": "Instance of RecurringOrder struct containing amount interval etc."
        }
      },
      "getOrders(address,bytes32)": {
        "notice": "List hashes of active orders for given tokenPair and user",
        "params": {
          "_tokenPairHash": "Hash of sell and buyToken addresses identifying the tokenPair.",
          "_user": "Address of the user for which to query active token pairs"
        },
        "returns": {
          "_0": "Array of order-hashes identifying the orders set for given user and token pair"
        }
      },
      "getTokenPairData(bytes32)": {
        "notice": "Utility function for frontend to get data on a given token pair",
        "params": {
          "_tokenPairHash": "Hash of sell and buyToken addresses identifying the tokenPair."
        },
        "returns": {
          "_0": "Address of token to be sold",
          "_1": "Address of token to be bought"
        }
      },
      "getTokenPairs(address)": {
        "notice": "Utility function for frontend to get all token pairs for which the given user has set orders",
        "params": {
          "_user": "Address of the user for which to query active token pairs"
        },
        "returns": {
          "_0": "Array of tokenPair-hashes identifying combinations of sell / buyToken for which the user has active orders"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "performUpkeep(bytes)": {
        "notice": "Perform Upkeep executing all pending orders",
        "params": {
          "performData": "Serialized array of structs identifying orders to be executed as returned by checkUpkeep"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRecurringOrder(address,address,uint256,uint256)": {
        "notice": "Creates a new recurring order for the given User starting immediately.",
        "params": {
          "_buyToken": "Address of token to buy",
          "_interval": "Interval of execution in ms",
          "_sellAmount": "Amount of sell token to sell in each trade",
          "_sellToken": "Address of token to sell"
        }
      },
      "setRecurringOrderWithStartTimestamp(address,address,uint256,uint256,uint256)": {
        "notice": "Creates a new recurring order for the given User starting from the given block timestamp.",
        "params": {
          "_buyToken": "Address of token to buy",
          "_interval": "Interval of execution in ms",
          "_sellAmount": "Amount of sell token to sell in each trade",
          "_sellToken": "Address of token to sell",
          "_startTimestamp": "Block timestamp from which to start the execution of this order"
        }
      },
      "swapExactTokensForTokens(address,address,uint256,address)": {
        "notice": "Swap exact amount of input token for variable amount of output token",
        "params": {
          "_amountIn": "Amount of input tokens to sell",
          "_tokenIn": "Address of input token to sell ",
          "_tokenOut": "Address of output token to buy",
          "_user": "Address of user on whose behalf to trade."
        },
        "returns": {
          "_0": "Boolean indicating whether trade has been executed sucessfully"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "offset": [
    593,
    14877
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x790FC5FB GT PUSH2 0x97 JUMPI DUP1 PUSH4 0x96F10B27 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x96F10B27 EQ PUSH2 0x238 JUMPI DUP1 PUSH4 0xAD4207C8 EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0xC7C6AB04 EQ PUSH2 0x2B0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x790FC5FB EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x89C952A3 EQ PUSH2 0x201 JUMPI DUP1 PUSH4 0x8BD9DE58 EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4585E33B GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0x199 JUMPI DUP1 PUSH4 0x57819593 EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1CB85818 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x23D16E81 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0x2D57B185 EQ PUSH2 0x179 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x10D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13D PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0x1486 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x121 SWAP2 SWAP1 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH2 0x18C PUSH2 0x187 CALLDATASIZE PUSH1 0x4 PUSH2 0x14BD JUMP JUMPDEST PUSH2 0x3C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x121 SWAP2 SWAP1 PUSH2 0x14DA JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x1A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x151E JUMP JUMPDEST PUSH2 0x494 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1AC PUSH2 0x1BC CALLDATASIZE PUSH1 0x4 PUSH2 0x1590 JUMP JUMPDEST PUSH2 0x4BA JUMP JUMPDEST PUSH2 0x1D4 PUSH2 0x1CF CALLDATASIZE PUSH1 0x4 PUSH2 0x151E JUMP JUMPDEST PUSH2 0x83F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x121 SWAP3 SWAP2 SWAP1 PUSH2 0x15E1 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0xAB5 JUMP JUMPDEST PUSH2 0x1F3 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x121 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x20F CALLDATASIZE PUSH1 0x4 PUSH2 0x1486 JUMP JUMPDEST PUSH2 0xB1B JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x222 CALLDATASIZE PUSH1 0x4 PUSH2 0x1640 JUMP JUMPDEST PUSH2 0xC0B JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x10D JUMP JUMPDEST PUSH2 0x26D PUSH2 0x246 CALLDATASIZE PUSH1 0x4 PUSH2 0x1686 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 SWAP2 AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x121 JUMP JUMPDEST PUSH2 0x2A0 PUSH2 0x29B CALLDATASIZE PUSH1 0x4 PUSH2 0x169F JUMP JUMPDEST PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x121 JUMP JUMPDEST PUSH2 0x18C PUSH2 0x2BE CALLDATASIZE PUSH1 0x4 PUSH2 0x16F2 JUMP JUMPDEST PUSH2 0xED0 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x2D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x14BD JUMP JUMPDEST PUSH2 0xFB9 JUMP JUMPDEST PUSH2 0x30A PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x325 PUSH1 0x3 DUP3 ADD DUP5 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0x36D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x13D4911154881113D154C81393D50811561254D5 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 SWAP2 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x80 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP3 DUP4 ADD SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 SWAP1 SWAP2 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x3E7 SWAP1 PUSH2 0x109F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x404 JUMPI PUSH2 0x404 PUSH2 0x171E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x42D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x48C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x45D SWAP1 DUP3 PUSH2 0x10A9 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x46F JUMPI PUSH2 0x46F PUSH2 0x1734 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x484 DUP2 PUSH2 0x1760 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x433 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A2 DUP3 DUP5 ADD DUP5 PUSH2 0x17F9 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x4B5 JUMPI PUSH2 0x4B5 DUP2 PUSH2 0x10B5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0x4FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x616D6F756E742063616E6E6F74206265203 PUSH1 0x74 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x364 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x555 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73656C6C546F6B656E2063616E6E6F74206265207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x364 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x5AB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x627579546F6B656E2063616E6E6F74206265207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x364 JUMP JUMPDEST PUSH1 0x8 SLOAD DUP3 GT PUSH2 0x61A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E74657276616C2068617320746F2062652067726561746572207468616E20 PUSH1 0x44 DUP3 ADD MSTORE PUSH21 0x1B5A5B9A5B5D5B555C1AD9595C125B9D195C9D985B PUSH1 0x5A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP8 DUP2 SHL DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE DUP7 SWAP1 SHL AND PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x48 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 SWAP1 SWAP2 POP PUSH2 0x678 PUSH1 0x6 DUP4 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0x6F8 JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR DUP4 SSTORE PUSH1 0x1 DUP4 ADD DUP1 SLOAD SWAP2 DUP10 AND SWAP2 SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH2 0x6B3 PUSH1 0x6 DUP4 PUSH2 0x1113 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND DUP3 MSTORE DUP9 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xC10D5168CEDD6092198B6FEAF9C1340006C4737BE1B2F7C665DBC3421B3E255F SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x711 SWAP1 DUP4 PUSH2 0x1113 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x54 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x74 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x94 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP7 ADD SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 SWAP1 SWAP2 POP PUSH2 0x77E PUSH1 0x3 DUP5 ADD DUP4 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0x7A1 JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR DUP2 SSTORE PUSH2 0x79F PUSH1 0x3 DUP5 ADD DUP4 PUSH2 0x1113 JUMP JUMPDEST POP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x7C5 SWAP1 DUP4 PUSH2 0x1113 JUMP JUMPDEST POP PUSH1 0x1 DUP2 ADD DUP8 SWAP1 SSTORE PUSH1 0x2 DUP2 ADD DUP6 SWAP1 SSTORE PUSH1 0x3 DUP2 ADD DUP7 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP13 AND DUP3 MSTORE DUP11 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH32 0x683BC1B553FB7523892E96A28C87320B19C75A0E8A7294919AE8FBCE9ECEA524 SWAP1 PUSH1 0xA0 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH2 0x853 SWAP2 SWAP1 PUSH2 0x1944 JUMP JUMPDEST TIMESTAMP LT ISZERO PUSH2 0x85F JUMPI PUSH2 0xAAE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86B PUSH1 0x6 PUSH2 0x109F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x888 JUMPI PUSH2 0x888 PUSH2 0x171E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8CE JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x8A6 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA87 JUMPI PUSH1 0x0 PUSH2 0x8EA PUSH1 0x6 DUP4 PUSH2 0x10A9 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP SWAP1 PUSH2 0x908 SWAP1 PUSH1 0x3 ADD PUSH2 0x109F JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xA72 JUMPI PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x92B JUMPI PUSH2 0x92B PUSH2 0x171E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x954 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA2E JUMPI PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x97E SWAP1 PUSH1 0x3 ADD DUP4 PUSH2 0x10A9 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE PUSH1 0x2 SWAP1 DUP2 ADD DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP2 MLOAD PUSH1 0x80 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 DUP4 ADD SLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE SWAP3 SWAP4 POP SWAP2 PUSH2 0x9E2 SWAP2 PUSH2 0x1944 JUMP JUMPDEST TIMESTAMP GT ISZERO PUSH2 0xA19 JUMPI DUP2 DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x9FC JUMPI PUSH2 0x9FC PUSH2 0x1734 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP4 PUSH2 0xA11 DUP2 PUSH2 0x1760 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x1 SWAP13 POP JUMPDEST POP POP DUP1 DUP1 PUSH2 0xA26 SWAP1 PUSH2 0x1760 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x95B JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP DUP8 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0xA56 JUMPI PUSH2 0xA56 PUSH2 0x1734 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 DUP1 PUSH2 0xA6C SWAP1 PUSH2 0x1760 JUMP JUMPDEST SWAP7 POP POP POP POP JUMPDEST POP POP DUP1 DUP1 PUSH2 0xA7F SWAP1 PUSH2 0x1760 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x8D5 JUMP JUMPDEST POP DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA99 SWAP2 SWAP1 PUSH2 0x195C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP4 POP POP POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB0F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x364 JUMP JUMPDEST PUSH2 0xB19 PUSH1 0x0 PUSH2 0x111F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xB36 PUSH1 0x3 DUP3 ADD DUP4 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0xB82 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F5244455220544F2044454C45544520444F4553204E4F542045584953540000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x364 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xBF8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43414E4E4F542044454C455445204F52444552204F4620444946464552454E54 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x102AA9A2A9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x364 JUMP JUMPDEST PUSH2 0xC05 PUSH1 0x3 DUP3 ADD DUP4 PUSH2 0x1171 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xC05 DUP5 DUP5 DUP5 DUP5 PUSH1 0x0 PUSH2 0x4BA JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xC90 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E70757420616E64204F757470757420546F6B656E206861766520746F2062 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1948191A5CDD1A5B98DD PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP6 SWAP1 MSTORE DUP7 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xD10 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xD0D SWAP2 DUP2 ADD SWAP1 PUSH2 0x19FC JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xD1C JUMPI POP PUSH1 0x0 PUSH2 0xEC8 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 DUP7 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD7F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDA3 SWAP2 SWAP1 PUSH2 0x19FC JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP4 MSTORE PUSH1 0x0 SWAP3 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xDD9 JUMPI PUSH2 0xDD9 PUSH2 0x1734 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xE0D JUMPI PUSH2 0xE0D PUSH2 0x1734 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x38ED1739 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 AND SWAP1 PUSH4 0x38ED1739 SWAP1 PUSH2 0xE53 SWAP1 DUP8 SWAP1 PUSH1 0x0 SWAP1 DUP7 SWAP1 DUP10 SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x1A1E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE81 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xEA9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1A8F JUMP JUMPDEST PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xEBB JUMPI PUSH2 0xEBB PUSH2 0x1734 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 POP PUSH2 0xEC8 SWAP2 POP POP JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x60 SWAP2 SWAP1 PUSH2 0xF00 SWAP1 PUSH2 0x109F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF1D JUMPI PUSH2 0xF1D PUSH2 0x171E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xF46 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xFB0 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0xF81 SWAP1 DUP3 PUSH2 0x10A9 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF93 JUMPI PUSH2 0xF93 PUSH2 0x1734 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0xFA8 DUP2 PUSH2 0x1760 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xF4C JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1013 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x364 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1078 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x364 JUMP JUMPDEST PUSH2 0x1081 DUP2 PUSH2 0x111F JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO ISZERO JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BC DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1098 DUP4 DUP4 PUSH2 0x117D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x110F JUMPI PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x10D5 JUMPI PUSH2 0x10D5 PUSH2 0x1734 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 PUSH1 0x0 ADD MLOAD EQ ISZERO PUSH2 0x10F3 JUMPI POP POP POP JUMP JUMPDEST PUSH2 0x10FC DUP2 PUSH2 0x11A7 JUMP JUMPDEST POP DUP1 PUSH2 0x1107 DUP2 PUSH2 0x1760 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x10B8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1098 DUP4 DUP4 PUSH2 0x1344 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1098 DUP4 DUP4 PUSH2 0x1393 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1194 JUMPI PUSH2 0x1194 PUSH2 0x1734 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD MLOAD PUSH2 0x11B4 JUMPI POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x11C2 SWAP1 PUSH1 0x6 SWAP1 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0x11C9 JUMPI POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP2 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 SWAP1 SWAP2 AND SWAP1 JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x133D JUMPI PUSH1 0x0 DUP6 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1218 JUMPI PUSH2 0x1218 PUSH2 0x1734 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 EQ ISZERO PUSH2 0x1233 JUMPI POP PUSH2 0x133D JUMP JUMPDEST PUSH2 0x1240 PUSH1 0x3 DUP7 ADD DUP3 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0x124A JUMPI POP PUSH2 0x133D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP1 DUP8 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD SWAP2 DUP2 ADD SLOAD SWAP1 SWAP2 PUSH2 0x1270 SWAP2 PUSH2 0x1944 JUMP JUMPDEST TIMESTAMP GT PUSH2 0x127D JUMPI POP POP PUSH2 0x133D JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 PUSH2 0x129B DUP9 DUP9 DUP6 DUP6 PUSH2 0xC19 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x12E9 JUMPI TIMESTAMP PUSH1 0x2 DUP6 ADD SSTORE DUP10 MLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP8 SWAP1 MSTORE PUSH32 0x5DB58C70037AA768B73C40C300AFD09C428BC4BF9E881D02EB2A5F0E6FA295F9 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1325 JUMP JUMPDEST DUP10 MLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP8 SWAP1 MSTORE PUSH32 0x26916B3AEE826C0F5BF6F8AFA7138F7DB313ADA074B6BE7BA10AC7B28CCF51C8 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP DUP1 DUP1 PUSH2 0x1335 SWAP1 PUSH2 0x1760 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x11F3 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x138B JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x3BC JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x3BC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x147C JUMPI PUSH1 0x0 PUSH2 0x13B7 PUSH1 0x1 DUP4 PUSH2 0x1B20 JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x13CB SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x1B20 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x1430 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x13EB JUMPI PUSH2 0x13EB PUSH2 0x1734 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x140E JUMPI PUSH2 0x140E PUSH2 0x1734 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x1441 JUMPI PUSH2 0x1441 PUSH2 0x1B37 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x3BC JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x3BC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1499 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1081 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1098 DUP2 PUSH2 0x14A8 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1512 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x14F6 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1531 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1549 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x155D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x156C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x157E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x15A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x15B3 DUP2 PUSH2 0x14A8 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x15C3 DUP2 PUSH2 0x14A8 JUMP JUMPDEST SWAP5 SWAP8 SWAP5 SWAP7 POP POP POP POP PUSH1 0x40 DUP4 ADD CALLDATALOAD SWAP3 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP3 PUSH1 0x80 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0x40 DUP2 DUP5 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1617 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x60 ADD MSTORE DUP3 ADD PUSH2 0x15FB JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x1629 JUMPI PUSH1 0x0 PUSH1 0x60 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x60 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1656 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1661 DUP2 PUSH2 0x14A8 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1671 DUP2 PUSH2 0x14A8 JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x16B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x16C0 DUP2 PUSH2 0x14A8 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x16D0 DUP2 PUSH2 0x14A8 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x16E7 DUP2 PUSH2 0x14A8 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1705 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1710 DUP2 PUSH2 0x14A8 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x1774 JUMPI PUSH2 0x1774 PUSH2 0x174A JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x179E JUMPI PUSH2 0x179E PUSH2 0x171E JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x17CD JUMPI PUSH2 0x17CD PUSH2 0x171E JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x17EF JUMPI PUSH2 0x17EF PUSH2 0x171E JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x180C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1824 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1838 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x184B PUSH2 0x1846 DUP3 PUSH2 0x17D5 JUMP JUMPDEST PUSH2 0x17A4 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP9 DUP4 GT ISZERO PUSH2 0x186A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1937 JUMPI DUP1 CALLDATALOAD DUP6 DUP2 GT ISZERO PUSH2 0x1886 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP7 ADD PUSH1 0x40 DUP2 DUP13 SUB PUSH1 0x1F NOT ADD DUP2 SGT ISZERO PUSH2 0x189E JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x18A6 PUSH2 0x177B JUMP JUMPDEST DUP10 DUP4 ADD CALLDATALOAD DUP2 MSTORE DUP2 DUP4 ADD CALLDATALOAD DUP9 DUP2 GT ISZERO PUSH2 0x18BE JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP1 DUP5 ADD SWAP4 POP POP DUP13 PUSH1 0x3F DUP5 ADD SLT PUSH2 0x18D4 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP10 DUP4 ADD CALLDATALOAD PUSH2 0x18E4 PUSH2 0x1846 DUP3 PUSH2 0x17D5 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP5 ADD DUP4 ADD SWAP1 DUP12 DUP2 ADD SWAP1 DUP16 DUP4 GT ISZERO PUSH2 0x1904 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST SWAP5 DUP5 ADD SWAP5 JUMPDEST DUP3 DUP7 LT ISZERO PUSH2 0x1922 JUMPI DUP6 CALLDATALOAD DUP3 MSTORE SWAP5 DUP13 ADD SWAP5 SWAP1 DUP13 ADD SWAP1 PUSH2 0x1909 JUMP JUMPDEST DUP4 DUP14 ADD MSTORE POP POP DUP6 MSTORE POP POP SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x186E JUMP JUMPDEST POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1957 JUMPI PUSH2 0x1957 PUSH2 0x174A JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 SWAP3 POP DUP3 DUP7 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD DUP5 DUP9 ADD PUSH1 0x0 DUP1 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x19ED JUMPI DUP10 DUP5 SUB PUSH1 0x3F NOT ADD DUP7 MSTORE DUP3 MLOAD DUP1 MLOAD DUP6 MSTORE DUP9 ADD MLOAD DUP9 DUP6 ADD DUP9 SWAP1 MSTORE DUP1 MLOAD DUP9 DUP7 ADD DUP2 SWAP1 MSTORE SWAP1 DUP10 ADD SWAP1 DUP4 SWAP1 PUSH1 0x60 DUP8 ADD SWAP1 JUMPDEST DUP1 DUP4 LT ISZERO PUSH2 0x19D8 JUMPI DUP4 MLOAD DUP3 MSTORE SWAP3 DUP12 ADD SWAP3 PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD SWAP2 SWAP1 DUP12 ADD SWAP1 PUSH2 0x19B8 JUMP JUMPDEST POP SWAP8 DUP11 ADD SWAP8 SWAP6 POP POP POP SWAP2 DUP8 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1984 JUMP JUMPDEST POP SWAP2 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1098 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 0xC0 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1A6E JUMPI DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1A49 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 SWAP1 SWAP7 AND PUSH1 0x60 DUP6 ADD MSTORE POP POP POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1AA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1AB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x1ACA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1AD8 PUSH2 0x1846 DUP3 PUSH2 0x17D5 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP4 ADD SWAP1 DUP4 DUP2 ADD SWAP1 DUP8 DUP4 GT ISZERO PUSH2 0x1AF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 DUP5 ADD SWAP3 JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x1B15 JUMPI DUP4 MLOAD DUP3 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH2 0x1AFC JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1B32 JUMPI PUSH2 0x1B32 PUSH2 0x174A JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE SWAP14 0xC3 0xF 0xBC 0xED 0xC8 0xD4 SELFBALANCE GASLIMIT 0xE9 KECCAK256 PUSH22 0x597932CDCDE9976420B7B9B2D1BD9052E8DF2D64736F PUSH13 0x63430008090033000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        593,
        14877
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "5": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "CALLVALUE",
      "path": "13"
    },
    "6": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "7": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "8": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "12": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "REVERT",
      "path": "13"
    },
    "16": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "17": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "POP",
      "path": "13"
    },
    "18": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "CALLDATASIZE",
      "path": "13"
    },
    "21": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "LT",
      "path": "13"
    },
    "22": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xF5"
    },
    "25": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "26": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "CALLDATALOAD",
      "path": "13"
    },
    "29": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "SHR",
      "path": "13"
    },
    "32": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "33": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x790FC5FB"
    },
    "38": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "GT",
      "path": "13"
    },
    "39": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x97"
    },
    "42": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "43": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "44": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x96F10B27"
    },
    "49": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "GT",
      "path": "13"
    },
    "50": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x66"
    },
    "53": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "54": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "55": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x96F10B27"
    },
    "60": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "EQ",
      "path": "13"
    },
    "61": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x238"
    },
    "64": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "65": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "66": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0xAD4207C8"
    },
    "71": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "EQ",
      "path": "13"
    },
    "72": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x28D"
    },
    "75": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "76": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "77": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0xC7C6AB04"
    },
    "82": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "EQ",
      "path": "13"
    },
    "83": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2B0"
    },
    "86": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "87": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "88": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0xF2FDE38B"
    },
    "93": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "EQ",
      "path": "13"
    },
    "94": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2C3"
    },
    "97": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "98": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "100": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "101": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "REVERT",
      "path": "13"
    },
    "102": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "103": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "104": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x790FC5FB"
    },
    "109": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "EQ",
      "path": "13"
    },
    "110": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1EA"
    },
    "113": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "114": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "115": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x89C952A3"
    },
    "120": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "EQ",
      "path": "13"
    },
    "121": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x201"
    },
    "124": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "125": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "126": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x8BD9DE58"
    },
    "131": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "EQ",
      "path": "13"
    },
    "132": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x214"
    },
    "135": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "136": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "137": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x8DA5CB5B"
    },
    "142": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "EQ",
      "path": "13"
    },
    "143": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x227"
    },
    "146": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "147": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "149": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "150": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "REVERT",
      "path": "13"
    },
    "151": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "152": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "153": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x4585E33B"
    },
    "158": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "GT",
      "path": "13"
    },
    "159": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xD3"
    },
    "162": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "163": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "164": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x4585E33B"
    },
    "169": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "EQ",
      "path": "13"
    },
    "170": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x199"
    },
    "173": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "174": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "175": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x57819593"
    },
    "180": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "EQ",
      "path": "13"
    },
    "181": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1AE"
    },
    "184": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "185": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "186": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x6E04FF0D"
    },
    "191": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "EQ",
      "path": "13"
    },
    "192": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1C1"
    },
    "195": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "196": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "197": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x715018A6"
    },
    "202": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "EQ",
      "path": "13"
    },
    "203": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1E2"
    },
    "206": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "207": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "209": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "210": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "REVERT",
      "path": "13"
    },
    "211": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "212": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "213": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x1CB85818"
    },
    "218": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "EQ",
      "path": "13"
    },
    "219": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xFA"
    },
    "222": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "223": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "224": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x23D16E81"
    },
    "229": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "EQ",
      "path": "13"
    },
    "230": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x12A"
    },
    "233": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "234": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "235": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x2D57B185"
    },
    "240": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "EQ",
      "path": "13"
    },
    "241": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x179"
    },
    "244": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "245": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "246": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "248": {
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "DUP1",
      "path": "13"
    },
    "249": {
      "first_revert": true,
      "fn": null,
      "offset": [
        593,
        14877
      ],
      "op": "REVERT",
      "path": "13"
    },
    "250": {
      "offset": [
        945,
        985
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "251": {
      "fn": null,
      "offset": [
        945,
        985
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x2"
    },
    "253": {
      "fn": null,
      "offset": [
        945,
        985
      ],
      "op": "SLOAD",
      "path": "12"
    },
    "254": {
      "fn": null,
      "offset": [
        945,
        985
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0x10D"
    },
    "257": {
      "fn": null,
      "offset": [
        945,
        985
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "258": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "260": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "262": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "264": {
      "op": "SHL"
    },
    "265": {
      "op": "SUB"
    },
    "266": {
      "offset": [
        945,
        985
      ],
      "op": "AND",
      "path": "12"
    },
    "267": {
      "fn": null,
      "offset": [
        945,
        985
      ],
      "op": "DUP2",
      "path": "12"
    },
    "268": {
      "fn": null,
      "offset": [
        945,
        985
      ],
      "op": "JUMP",
      "path": "12"
    },
    "269": {
      "fn": null,
      "offset": [
        945,
        985
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "270": {
      "fn": null,
      "offset": [
        945,
        985
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x40"
    },
    "272": {
      "fn": null,
      "offset": [
        945,
        985
      ],
      "op": "MLOAD",
      "path": "12"
    },
    "273": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "275": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "277": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "279": {
      "op": "SHL"
    },
    "280": {
      "op": "SUB"
    },
    "281": {
      "op": "SWAP1"
    },
    "282": {
      "op": "SWAP2"
    },
    "283": {
      "op": "AND"
    },
    "284": {
      "op": "DUP2"
    },
    "285": {
      "op": "MSTORE"
    },
    "286": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "288": {
      "op": "ADD"
    },
    "289": {
      "offset": [
        945,
        985
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "290": {
      "fn": null,
      "offset": [
        945,
        985
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x40"
    },
    "292": {
      "fn": null,
      "offset": [
        945,
        985
      ],
      "op": "MLOAD",
      "path": "12"
    },
    "293": {
      "fn": null,
      "offset": [
        945,
        985
      ],
      "op": "DUP1",
      "path": "12"
    },
    "294": {
      "fn": null,
      "offset": [
        945,
        985
      ],
      "op": "SWAP2",
      "path": "12"
    },
    "295": {
      "fn": null,
      "offset": [
        945,
        985
      ],
      "op": "SUB",
      "path": "12"
    },
    "296": {
      "fn": null,
      "offset": [
        945,
        985
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "297": {
      "fn": null,
      "offset": [
        945,
        985
      ],
      "op": "RETURN",
      "path": "12"
    },
    "298": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "299": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x13D"
    },
    "302": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x138"
    },
    "305": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "CALLDATASIZE",
      "path": "13"
    },
    "306": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "308": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1486"
    },
    "311": {
      "fn": "Trickle.getOrderData",
      "jump": "i",
      "offset": [
        7206,
        7588
      ],
      "op": "JUMP",
      "path": "13"
    },
    "312": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "313": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2D6"
    },
    "316": {
      "fn": "Trickle.getOrderData",
      "jump": "i",
      "offset": [
        7206,
        7588
      ],
      "op": "JUMP",
      "path": "13"
    },
    "317": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "318": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "320": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "321": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x121"
    },
    "324": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "325": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "326": {
      "op": "DUP2"
    },
    "327": {
      "op": "MLOAD"
    },
    "328": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "330": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "332": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "334": {
      "op": "SHL"
    },
    "335": {
      "op": "SUB"
    },
    "336": {
      "op": "AND"
    },
    "337": {
      "op": "DUP2"
    },
    "338": {
      "op": "MSTORE"
    },
    "339": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "341": {
      "op": "DUP1"
    },
    "342": {
      "op": "DUP4"
    },
    "343": {
      "op": "ADD"
    },
    "344": {
      "op": "MLOAD"
    },
    "345": {
      "op": "SWAP1"
    },
    "346": {
      "op": "DUP3"
    },
    "347": {
      "op": "ADD"
    },
    "348": {
      "op": "MSTORE"
    },
    "349": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "351": {
      "op": "DUP1"
    },
    "352": {
      "op": "DUP4"
    },
    "353": {
      "op": "ADD"
    },
    "354": {
      "op": "MLOAD"
    },
    "355": {
      "op": "SWAP1"
    },
    "356": {
      "op": "DUP3"
    },
    "357": {
      "op": "ADD"
    },
    "358": {
      "op": "MSTORE"
    },
    "359": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "361": {
      "op": "SWAP2"
    },
    "362": {
      "op": "DUP3"
    },
    "363": {
      "op": "ADD"
    },
    "364": {
      "op": "MLOAD"
    },
    "365": {
      "op": "SWAP2"
    },
    "366": {
      "op": "DUP2"
    },
    "367": {
      "op": "ADD"
    },
    "368": {
      "op": "SWAP2"
    },
    "369": {
      "op": "SWAP1"
    },
    "370": {
      "op": "SWAP2"
    },
    "371": {
      "op": "MSTORE"
    },
    "372": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "374": {
      "op": "ADD"
    },
    "375": {
      "op": "SWAP1"
    },
    "376": {
      "op": "JUMP"
    },
    "377": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8481,
        8896
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "378": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8481,
        8896
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x18C"
    },
    "381": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8481,
        8896
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x187"
    },
    "384": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8481,
        8896
      ],
      "op": "CALLDATASIZE",
      "path": "13"
    },
    "385": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8481,
        8896
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "387": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8481,
        8896
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x14BD"
    },
    "390": {
      "fn": "Trickle.getTokenPairs",
      "jump": "i",
      "offset": [
        8481,
        8896
      ],
      "op": "JUMP",
      "path": "13"
    },
    "391": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8481,
        8896
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "392": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8481,
        8896
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x3C2"
    },
    "395": {
      "fn": "Trickle.getTokenPairs",
      "jump": "i",
      "offset": [
        8481,
        8896
      ],
      "op": "JUMP",
      "path": "13"
    },
    "396": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8481,
        8896
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "397": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8481,
        8896
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "399": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8481,
        8896
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "400": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8481,
        8896
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x121"
    },
    "403": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8481,
        8896
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "404": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8481,
        8896
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "405": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8481,
        8896
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x14DA"
    },
    "408": {
      "fn": "Trickle.getTokenPairs",
      "jump": "i",
      "offset": [
        8481,
        8896
      ],
      "op": "JUMP",
      "path": "13"
    },
    "409": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        11898,
        12232
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "410": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        11898,
        12232
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1AC"
    },
    "413": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        11898,
        12232
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1A7"
    },
    "416": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        11898,
        12232
      ],
      "op": "CALLDATASIZE",
      "path": "13"
    },
    "417": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        11898,
        12232
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "419": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        11898,
        12232
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x151E"
    },
    "422": {
      "fn": "Trickle.performUpkeep",
      "jump": "i",
      "offset": [
        11898,
        12232
      ],
      "op": "JUMP",
      "path": "13"
    },
    "423": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        11898,
        12232
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "424": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        11898,
        12232
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x494"
    },
    "427": {
      "fn": "Trickle.performUpkeep",
      "jump": "i",
      "offset": [
        11898,
        12232
      ],
      "op": "JUMP",
      "path": "13"
    },
    "428": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        11898,
        12232
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "429": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        11898,
        12232
      ],
      "op": "STOP",
      "path": "13"
    },
    "430": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4191,
        6066
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "431": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4191,
        6066
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1AC"
    },
    "434": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4191,
        6066
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1BC"
    },
    "437": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4191,
        6066
      ],
      "op": "CALLDATASIZE",
      "path": "13"
    },
    "438": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4191,
        6066
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "440": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4191,
        6066
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1590"
    },
    "443": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "jump": "i",
      "offset": [
        4191,
        6066
      ],
      "op": "JUMP",
      "path": "13"
    },
    "444": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4191,
        6066
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "445": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4191,
        6066
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x4BA"
    },
    "448": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "jump": "i",
      "offset": [
        4191,
        6066
      ],
      "op": "JUMP",
      "path": "13"
    },
    "449": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "450": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1D4"
    },
    "453": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1CF"
    },
    "456": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "CALLDATASIZE",
      "path": "13"
    },
    "457": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "459": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x151E"
    },
    "462": {
      "fn": "Trickle.checkUpkeep",
      "jump": "i",
      "offset": [
        10015,
        11691
      ],
      "op": "JUMP",
      "path": "13"
    },
    "463": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "464": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x83F"
    },
    "467": {
      "fn": "Trickle.checkUpkeep",
      "jump": "i",
      "offset": [
        10015,
        11691
      ],
      "op": "JUMP",
      "path": "13"
    },
    "468": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "469": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "471": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "472": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x121"
    },
    "475": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "476": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "477": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "478": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x15E1"
    },
    "481": {
      "fn": "Trickle.checkUpkeep",
      "jump": "i",
      "offset": [
        10015,
        11691
      ],
      "op": "JUMP",
      "path": "13"
    },
    "482": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "483": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AC"
    },
    "486": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAB5"
    },
    "489": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1605,
        1697
      ],
      "op": "JUMP",
      "path": "0"
    },
    "490": {
      "offset": [
        2415,
        2451
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "491": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        2415,
        2451
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1F3"
    },
    "494": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        2415,
        2451
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x8"
    },
    "496": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        2415,
        2451
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "497": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        2415,
        2451
      ],
      "op": "DUP2",
      "path": "13"
    },
    "498": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        2415,
        2451
      ],
      "op": "JUMP",
      "path": "13"
    },
    "499": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        2415,
        2451
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "500": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        2415,
        2451
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "502": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        2415,
        2451
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "503": {
      "op": "SWAP1"
    },
    "504": {
      "op": "DUP2"
    },
    "505": {
      "op": "MSTORE"
    },
    "506": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "508": {
      "op": "ADD"
    },
    "509": {
      "offset": [
        2415,
        2451
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x121"
    },
    "512": {
      "op": "JUMP"
    },
    "513": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6329,
        6827
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "514": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6329,
        6827
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1AC"
    },
    "517": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6329,
        6827
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x20F"
    },
    "520": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6329,
        6827
      ],
      "op": "CALLDATASIZE",
      "path": "13"
    },
    "521": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6329,
        6827
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "523": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6329,
        6827
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1486"
    },
    "526": {
      "fn": "Trickle.deleteRecurringOrder",
      "jump": "i",
      "offset": [
        6329,
        6827
      ],
      "op": "JUMP",
      "path": "13"
    },
    "527": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6329,
        6827
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "528": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6329,
        6827
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xB1B"
    },
    "531": {
      "fn": "Trickle.deleteRecurringOrder",
      "jump": "i",
      "offset": [
        6329,
        6827
      ],
      "op": "JUMP",
      "path": "13"
    },
    "532": {
      "fn": "Trickle.setRecurringOrder",
      "offset": [
        3391,
        3714
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "533": {
      "fn": "Trickle.setRecurringOrder",
      "offset": [
        3391,
        3714
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1AC"
    },
    "536": {
      "fn": "Trickle.setRecurringOrder",
      "offset": [
        3391,
        3714
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x222"
    },
    "539": {
      "fn": "Trickle.setRecurringOrder",
      "offset": [
        3391,
        3714
      ],
      "op": "CALLDATASIZE",
      "path": "13"
    },
    "540": {
      "fn": "Trickle.setRecurringOrder",
      "offset": [
        3391,
        3714
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "542": {
      "fn": "Trickle.setRecurringOrder",
      "offset": [
        3391,
        3714
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1640"
    },
    "545": {
      "fn": "Trickle.setRecurringOrder",
      "jump": "i",
      "offset": [
        3391,
        3714
      ],
      "op": "JUMP",
      "path": "13"
    },
    "546": {
      "fn": "Trickle.setRecurringOrder",
      "offset": [
        3391,
        3714
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "547": {
      "fn": "Trickle.setRecurringOrder",
      "offset": [
        3391,
        3714
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xC0B"
    },
    "550": {
      "fn": "Trickle.setRecurringOrder",
      "jump": "i",
      "offset": [
        3391,
        3714
      ],
      "op": "JUMP",
      "path": "13"
    },
    "551": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "552": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 0,
      "value": "0x1"
    },
    "554": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "555": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "557": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "559": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "561": {
      "op": "SHL"
    },
    "562": {
      "op": "SUB"
    },
    "563": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "AND",
      "path": "0"
    },
    "564": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10D"
    },
    "567": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "JUMP",
      "path": "0"
    },
    "568": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        7885,
        8135
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "569": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        7885,
        8135
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x26D"
    },
    "572": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        7885,
        8135
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x246"
    },
    "575": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        7885,
        8135
      ],
      "op": "CALLDATASIZE",
      "path": "13"
    },
    "576": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        7885,
        8135
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "578": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        7885,
        8135
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1686"
    },
    "581": {
      "fn": "Trickle.getTokenPairData",
      "jump": "i",
      "offset": [
        7885,
        8135
      ],
      "op": "JUMP",
      "path": "13"
    },
    "582": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        7885,
        8135
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "583": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        7982,
        7989
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "585": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8044,
        8070
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "586": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8044,
        8070
      ],
      "op": "DUP2",
      "path": "13"
    },
    "587": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8044,
        8070
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "588": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8044,
        8054
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x5"
    },
    "590": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8044,
        8070
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "592": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8044,
        8070
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "593": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8044,
        8070
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "595": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8044,
        8070
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "596": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8044,
        8070
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "597": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8088,
        8107
      ],
      "op": "DUP1",
      "path": "13",
      "statement": 1
    },
    "598": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8088,
        8107
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "599": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8088,
        8107
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "601": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8109,
        8127
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "602": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8109,
        8127
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "603": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8109,
        8127
      ],
      "op": "ADD",
      "path": "13"
    },
    "604": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8109,
        8127
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "605": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "607": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "609": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "611": {
      "op": "SHL"
    },
    "612": {
      "op": "SUB"
    },
    "613": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8088,
        8107
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "614": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8088,
        8107
      ],
      "op": "DUP3",
      "path": "13"
    },
    "615": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8088,
        8107
      ],
      "op": "AND",
      "path": "13"
    },
    "616": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8088,
        8107
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "617": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8109,
        8127
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "618": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8109,
        8127
      ],
      "op": "AND",
      "path": "13"
    },
    "619": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        8109,
        8127
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "620": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        7885,
        8135
      ],
      "op": "JUMP",
      "path": "13"
    },
    "621": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        7885,
        8135
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "622": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        7885,
        8135
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "624": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        7885,
        8135
      ],
      "op": "DUP1",
      "path": "13"
    },
    "625": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        7885,
        8135
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "626": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "628": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "630": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "632": {
      "op": "SHL"
    },
    "633": {
      "op": "SUB"
    },
    "634": {
      "op": "SWAP4"
    },
    "635": {
      "op": "DUP5"
    },
    "636": {
      "op": "AND"
    },
    "637": {
      "op": "DUP2"
    },
    "638": {
      "op": "MSTORE"
    },
    "639": {
      "op": "SWAP3"
    },
    "640": {
      "op": "SWAP1"
    },
    "641": {
      "op": "SWAP2"
    },
    "642": {
      "op": "AND"
    },
    "643": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "645": {
      "op": "DUP4"
    },
    "646": {
      "op": "ADD"
    },
    "647": {
      "op": "MSTORE"
    },
    "648": {
      "op": "ADD"
    },
    "649": {
      "fn": "Trickle.getTokenPairData",
      "offset": [
        7885,
        8135
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x121"
    },
    "652": {
      "op": "JUMP"
    },
    "653": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1528,
        2363
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "654": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1528,
        2363
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0x2A0"
    },
    "657": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1528,
        2363
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0x29B"
    },
    "660": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1528,
        2363
      ],
      "op": "CALLDATASIZE",
      "path": "12"
    },
    "661": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1528,
        2363
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x4"
    },
    "663": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1528,
        2363
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0x169F"
    },
    "666": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "jump": "i",
      "offset": [
        1528,
        2363
      ],
      "op": "JUMP",
      "path": "12"
    },
    "667": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1528,
        2363
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "668": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1528,
        2363
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xC19"
    },
    "671": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "jump": "i",
      "offset": [
        1528,
        2363
      ],
      "op": "JUMP",
      "path": "12"
    },
    "672": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1528,
        2363
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "673": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1528,
        2363
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x40"
    },
    "675": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1528,
        2363
      ],
      "op": "MLOAD",
      "path": "12"
    },
    "676": {
      "op": "SWAP1"
    },
    "677": {
      "op": "ISZERO"
    },
    "678": {
      "op": "ISZERO"
    },
    "679": {
      "op": "DUP2"
    },
    "680": {
      "op": "MSTORE"
    },
    "681": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "683": {
      "op": "ADD"
    },
    "684": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1528,
        2363
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0x121"
    },
    "687": {
      "op": "JUMP"
    },
    "688": {
      "fn": "Trickle.getOrders",
      "offset": [
        9283,
        9718
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "689": {
      "fn": "Trickle.getOrders",
      "offset": [
        9283,
        9718
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x18C"
    },
    "692": {
      "fn": "Trickle.getOrders",
      "offset": [
        9283,
        9718
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2BE"
    },
    "695": {
      "fn": "Trickle.getOrders",
      "offset": [
        9283,
        9718
      ],
      "op": "CALLDATASIZE",
      "path": "13"
    },
    "696": {
      "fn": "Trickle.getOrders",
      "offset": [
        9283,
        9718
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "698": {
      "fn": "Trickle.getOrders",
      "offset": [
        9283,
        9718
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x16F2"
    },
    "701": {
      "fn": "Trickle.getOrders",
      "jump": "i",
      "offset": [
        9283,
        9718
      ],
      "op": "JUMP",
      "path": "13"
    },
    "702": {
      "fn": "Trickle.getOrders",
      "offset": [
        9283,
        9718
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "703": {
      "fn": "Trickle.getOrders",
      "offset": [
        9283,
        9718
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xED0"
    },
    "706": {
      "fn": "Trickle.getOrders",
      "jump": "i",
      "offset": [
        9283,
        9718
      ],
      "op": "JUMP",
      "path": "13"
    },
    "707": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "708": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AC"
    },
    "711": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2D1"
    },
    "714": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "715": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "717": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14BD"
    },
    "720": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1846,
        2035
      ],
      "op": "JUMP",
      "path": "0"
    },
    "721": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "722": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFB9"
    },
    "725": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1846,
        2035
      ],
      "op": "JUMP",
      "path": "0"
    },
    "726": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "727": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7319,
        7340
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x30A"
    },
    "730": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "732": {
      "op": "MLOAD"
    },
    "733": {
      "op": "DUP1"
    },
    "734": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "736": {
      "op": "ADD"
    },
    "737": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "739": {
      "op": "MSTORE"
    },
    "740": {
      "op": "DUP1"
    },
    "741": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "743": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "745": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "747": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "749": {
      "op": "SHL"
    },
    "750": {
      "op": "SUB"
    },
    "751": {
      "op": "AND"
    },
    "752": {
      "op": "DUP2"
    },
    "753": {
      "op": "MSTORE"
    },
    "754": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "756": {
      "op": "ADD"
    },
    "757": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "759": {
      "op": "DUP2"
    },
    "760": {
      "op": "MSTORE"
    },
    "761": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "763": {
      "op": "ADD"
    },
    "764": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "766": {
      "op": "DUP2"
    },
    "767": {
      "op": "MSTORE"
    },
    "768": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "770": {
      "op": "ADD"
    },
    "771": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "773": {
      "op": "DUP2"
    },
    "774": {
      "op": "MSTORE"
    },
    "775": {
      "op": "POP"
    },
    "776": {
      "op": "SWAP1"
    },
    "777": {
      "op": "JUMP"
    },
    "778": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7319,
        7340
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "779": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7356,
        7383
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "781": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7386,
        7412
      ],
      "op": "DUP4",
      "path": "13"
    },
    "782": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7386,
        7412
      ],
      "op": "DUP2",
      "path": "13"
    },
    "783": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7386,
        7412
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "784": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7386,
        7396
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x5"
    },
    "786": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7386,
        7412
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "788": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7386,
        7412
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "789": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7386,
        7412
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "791": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7386,
        7412
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "792": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7386,
        7412
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "793": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7443,
        7490
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 2,
      "value": "0x325"
    },
    "796": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7443,
        7469
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x3"
    },
    "798": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7443,
        7469
      ],
      "op": "DUP3",
      "path": "13"
    },
    "799": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7443,
        7469
      ],
      "op": "ADD",
      "path": "13"
    },
    "800": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7479,
        7489
      ],
      "op": "DUP5",
      "path": "13"
    },
    "801": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7443,
        7478
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1084"
    },
    "804": {
      "fn": "Trickle.getOrderData",
      "jump": "i",
      "offset": [
        7443,
        7490
      ],
      "op": "JUMP",
      "path": "13"
    },
    "805": {
      "branch": 81,
      "fn": "Trickle.getOrderData",
      "offset": [
        7443,
        7490
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "806": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7422,
        7536
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x36D"
    },
    "809": {
      "branch": 81,
      "fn": "Trickle.getOrderData",
      "offset": [
        7422,
        7536
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "810": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7422,
        7536
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "812": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7422,
        7536
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "813": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "817": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "819": {
      "op": "SHL"
    },
    "820": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7422,
        7536
      ],
      "op": "DUP2",
      "path": "13"
    },
    "821": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7422,
        7536
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "822": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "824": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7422,
        7536
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "826": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7422,
        7536
      ],
      "op": "DUP3",
      "path": "13"
    },
    "827": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7422,
        7536
      ],
      "op": "ADD",
      "path": "13"
    },
    "828": {
      "op": "MSTORE"
    },
    "829": {
      "op": "PUSH1",
      "value": "0x14"
    },
    "831": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "833": {
      "op": "DUP3"
    },
    "834": {
      "op": "ADD"
    },
    "835": {
      "op": "MSTORE"
    },
    "836": {
      "op": "PUSH20",
      "value": "0x13D4911154881113D154C81393D50811561254D5"
    },
    "857": {
      "op": "PUSH1",
      "value": "0x62"
    },
    "859": {
      "op": "SHL"
    },
    "860": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "862": {
      "op": "DUP3"
    },
    "863": {
      "op": "ADD"
    },
    "864": {
      "op": "MSTORE"
    },
    "865": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "867": {
      "op": "ADD"
    },
    "868": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7422,
        7536
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "869": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7422,
        7536
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "871": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7422,
        7536
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "872": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7422,
        7536
      ],
      "op": "DUP1",
      "path": "13"
    },
    "873": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7422,
        7536
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "874": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7422,
        7536
      ],
      "op": "SUB",
      "path": "13"
    },
    "875": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7422,
        7536
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "876": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7422,
        7536
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "13"
    },
    "877": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7422,
        7536
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "878": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7553,
        7581
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 3,
      "value": "0x0"
    },
    "880": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7553,
        7581
      ],
      "op": "DUP4",
      "path": "13"
    },
    "881": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7553,
        7581
      ],
      "op": "DUP2",
      "path": "13"
    },
    "882": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7553,
        7581
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "883": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7553,
        7569
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x2"
    },
    "885": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7553,
        7569
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "886": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7553,
        7569
      ],
      "op": "DUP3",
      "path": "13"
    },
    "887": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7553,
        7569
      ],
      "op": "ADD",
      "path": "13"
    },
    "888": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7553,
        7581
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "890": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7553,
        7581
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "891": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7553,
        7581
      ],
      "op": "DUP2",
      "path": "13"
    },
    "892": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7553,
        7581
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "893": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7553,
        7581
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "895": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7553,
        7581
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "896": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7553,
        7581
      ],
      "op": "DUP3",
      "path": "13"
    },
    "897": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7553,
        7581
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "898": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7553,
        7581
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "899": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "DUP3",
      "path": "13"
    },
    "900": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "901": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x80"
    },
    "903": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "DUP2",
      "path": "13"
    },
    "904": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "ADD",
      "path": "13"
    },
    "905": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "DUP5",
      "path": "13"
    },
    "906": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "907": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "DUP2",
      "path": "13"
    },
    "908": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "909": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "911": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "913": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "915": {
      "op": "SHL"
    },
    "916": {
      "op": "SUB"
    },
    "917": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "AND",
      "path": "13"
    },
    "918": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "DUP2",
      "path": "13"
    },
    "919": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "920": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "922": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "DUP3",
      "path": "13"
    },
    "923": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "ADD",
      "path": "13"
    },
    "924": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "925": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "926": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "DUP2",
      "path": "13"
    },
    "927": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "ADD",
      "path": "13"
    },
    "928": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "929": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "930": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "931": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "932": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "933": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "DUP4",
      "path": "13"
    },
    "934": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "ADD",
      "path": "13"
    },
    "935": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "936": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "937": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "DUP2",
      "path": "13"
    },
    "938": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "ADD",
      "path": "13"
    },
    "939": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "940": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "941": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "942": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "943": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x3"
    },
    "945": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "946": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "947": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "ADD",
      "path": "13"
    },
    "948": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "949": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x60"
    },
    "951": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "DUP3",
      "path": "13"
    },
    "952": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "ADD",
      "path": "13"
    },
    "953": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "954": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7546,
        7581
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "955": {
      "op": "POP"
    },
    "956": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "957": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "958": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "959": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "POP",
      "path": "13"
    },
    "960": {
      "fn": "Trickle.getOrderData",
      "offset": [
        7206,
        7588
      ],
      "op": "POP",
      "path": "13"
    },
    "961": {
      "fn": "Trickle.getOrderData",
      "jump": "o",
      "offset": [
        7206,
        7588
      ],
      "op": "JUMP",
      "path": "13"
    },
    "962": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8481,
        8896
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "963": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "965": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "967": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "969": {
      "op": "SHL"
    },
    "970": {
      "op": "SUB"
    },
    "971": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8622,
        8648
      ],
      "op": "DUP2",
      "path": "13"
    },
    "972": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8622,
        8648
      ],
      "op": "AND",
      "path": "13"
    },
    "973": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8598,
        8619
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "975": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8622,
        8648
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "976": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8622,
        8648
      ],
      "op": "DUP2",
      "path": "13"
    },
    "977": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8622,
        8648
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "978": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8622,
        8641
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x3"
    },
    "980": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8622,
        8648
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "982": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8622,
        8648
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "983": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8622,
        8648
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "985": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8622,
        8648
      ],
      "op": "DUP2",
      "path": "13"
    },
    "986": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8622,
        8648
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "987": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8566,
        8582
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x60"
    },
    "989": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8566,
        8582
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "990": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8598,
        8619
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "991": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8622,
        8657
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x3E7"
    },
    "994": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8622,
        8657
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "995": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8622,
        8655
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x109F"
    },
    "998": {
      "fn": "Trickle.getTokenPairs",
      "jump": "i",
      "offset": [
        8622,
        8657
      ],
      "op": "JUMP",
      "path": "13"
    },
    "999": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8622,
        8657
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1000": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8598,
        8657
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1001": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8598,
        8657
      ],
      "op": "POP",
      "path": "13"
    },
    "1002": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8667,
        8699
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1004": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8716,
        8729
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1005": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "PUSH8",
      "path": "13",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1014": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1015": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "GT",
      "path": "13"
    },
    "1016": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "1017": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x404"
    },
    "1020": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1021": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x404"
    },
    "1024": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x171E"
    },
    "1027": {
      "fn": "Trickle.getTokenPairs",
      "jump": "i",
      "offset": [
        8702,
        8730
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1028": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1029": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1031": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1032": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1033": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1034": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1035": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1036": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1037": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1039": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "MUL",
      "path": "13"
    },
    "1040": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1042": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "ADD",
      "path": "13"
    },
    "1043": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1044": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "ADD",
      "path": "13"
    },
    "1045": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1047": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1048": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1049": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "1050": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x42D"
    },
    "1053": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1054": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1055": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1057": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "ADD",
      "path": "13"
    },
    "1058": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1060": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1061": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "MUL",
      "path": "13"
    },
    "1062": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1063": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "CALLDATASIZE",
      "path": "13"
    },
    "1064": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1065": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "CALLDATACOPY",
      "path": "13"
    },
    "1066": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "ADD",
      "path": "13"
    },
    "1067": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1068": {
      "op": "POP"
    },
    "1069": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1070": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8702,
        8730
      ],
      "op": "POP",
      "path": "13"
    },
    "1071": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8667,
        8730
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1072": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8667,
        8730
      ],
      "op": "POP",
      "path": "13"
    },
    "1073": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8745,
        8754
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1075": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8740,
        8858
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1076": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8760,
        8773
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1077": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8756,
        8757
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1078": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8756,
        8773
      ],
      "op": "LT",
      "path": "13"
    },
    "1079": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8740,
        8858
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "1080": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8740,
        8858
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x48C"
    },
    "1083": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8740,
        8858
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1084": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1086": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1088": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1090": {
      "op": "SHL"
    },
    "1091": {
      "op": "SUB"
    },
    "1092": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8815,
        8841
      ],
      "op": "DUP6",
      "path": "13",
      "statement": 4
    },
    "1093": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8815,
        8841
      ],
      "op": "AND",
      "path": "13"
    },
    "1094": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8815,
        8841
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1096": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8815,
        8841
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1097": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8815,
        8841
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1098": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8815,
        8841
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1099": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8815,
        8834
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x3"
    },
    "1101": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8815,
        8841
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1103": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8815,
        8841
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1104": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8815,
        8841
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1106": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8815,
        8841
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1107": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8815,
        8841
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "1108": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8815,
        8847
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x45D"
    },
    "1111": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8815,
        8847
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1112": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8845,
        8846
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1113": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8815,
        8844
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x10A9"
    },
    "1116": {
      "fn": "Trickle.getTokenPairs",
      "jump": "i",
      "offset": [
        8815,
        8847
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1117": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8815,
        8847
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1118": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8809
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1119": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8810,
        8811
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1120": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8812
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1121": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8812
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1122": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8812
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1123": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8812
      ],
      "op": "LT",
      "path": "13"
    },
    "1124": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8812
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x46F"
    },
    "1127": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8812
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1128": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8812
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x46F"
    },
    "1131": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8812
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1734"
    },
    "1134": {
      "fn": "Trickle.getTokenPairs",
      "jump": "i",
      "offset": [
        8794,
        8812
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1135": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8812
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1136": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8812
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1138": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8812
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1139": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8812
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1140": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8812
      ],
      "op": "MUL",
      "path": "13"
    },
    "1141": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8812
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1142": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8812
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1143": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8812
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1144": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8812
      ],
      "op": "ADD",
      "path": "13"
    },
    "1145": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8812
      ],
      "op": "ADD",
      "path": "13"
    },
    "1146": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8794,
        8847
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1147": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8775,
        8778
      ],
      "op": "DUP1",
      "path": "13",
      "statement": 5
    },
    "1148": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8775,
        8778
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x484"
    },
    "1151": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8775,
        8778
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1152": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8775,
        8778
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1760"
    },
    "1155": {
      "fn": "Trickle.getTokenPairs",
      "jump": "i",
      "offset": [
        8775,
        8778
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1156": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8775,
        8778
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1157": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8775,
        8778
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1158": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8775,
        8778
      ],
      "op": "POP",
      "path": "13"
    },
    "1159": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8775,
        8778
      ],
      "op": "POP",
      "path": "13"
    },
    "1160": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8740,
        8858
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x433"
    },
    "1163": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8740,
        8858
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1164": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8740,
        8858
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1165": {
      "op": "POP"
    },
    "1166": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8874,
        8889
      ],
      "op": "SWAP4",
      "path": "13",
      "statement": 6
    },
    "1167": {
      "fn": "Trickle.getTokenPairs",
      "offset": [
        8481,
        8896
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1168": {
      "op": "POP"
    },
    "1169": {
      "op": "POP"
    },
    "1170": {
      "op": "POP"
    },
    "1171": {
      "fn": "Trickle.getTokenPairs",
      "jump": "o",
      "offset": [
        8481,
        8896
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1172": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        11898,
        12232
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1173": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        11977,
        12024
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1175": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        12027,
        12112
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x4A2"
    },
    "1178": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        12027,
        12112
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1179": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        12027,
        12112
      ],
      "op": "DUP5",
      "path": "13"
    },
    "1180": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        12027,
        12112
      ],
      "op": "ADD",
      "path": "13"
    },
    "1181": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        12051,
        12062
      ],
      "op": "DUP5",
      "path": "13"
    },
    "1182": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        12027,
        12112
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x17F9"
    },
    "1185": {
      "fn": "Trickle.performUpkeep",
      "jump": "i",
      "offset": [
        12027,
        12112
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1186": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        12027,
        12112
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1187": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        12126,
        12148
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1188": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        12126,
        12148
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1189": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        11977,
        12112
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1190": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        11977,
        12112
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1191": {
      "op": "POP"
    },
    "1192": {
      "branch": 82,
      "fn": "Trickle.performUpkeep",
      "offset": [
        12126,
        12152
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "1193": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        12122,
        12226
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x4B5"
    },
    "1196": {
      "branch": 82,
      "fn": "Trickle.performUpkeep",
      "offset": [
        12122,
        12226
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1197": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        12168,
        12215
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 7,
      "value": "0x4B5"
    },
    "1200": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        12199,
        12214
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1201": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        12168,
        12198
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x10B5"
    },
    "1204": {
      "fn": "Trickle.performUpkeep",
      "jump": "i",
      "offset": [
        12168,
        12215
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1205": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        12168,
        12215
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1206": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        11967,
        12232
      ],
      "op": "POP",
      "path": "13"
    },
    "1207": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        11898,
        12232
      ],
      "op": "POP",
      "path": "13"
    },
    "1208": {
      "fn": "Trickle.performUpkeep",
      "offset": [
        11898,
        12232
      ],
      "op": "POP",
      "path": "13"
    },
    "1209": {
      "fn": "Trickle.performUpkeep",
      "jump": "o",
      "offset": [
        11898,
        12232
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1210": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4191,
        6066
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1211": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4425,
        4426
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 8,
      "value": "0x0"
    },
    "1213": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4411,
        4422
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1214": {
      "branch": 83,
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4411,
        4426
      ],
      "op": "GT",
      "path": "13"
    },
    "1215": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4403,
        4449
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x4FF"
    },
    "1218": {
      "branch": 83,
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4403,
        4449
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1219": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4403,
        4449
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1221": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4403,
        4449
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1222": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1226": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1228": {
      "op": "SHL"
    },
    "1229": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4403,
        4449
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1230": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4403,
        4449
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1231": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1233": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4403,
        4449
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "1235": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4403,
        4449
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1236": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4403,
        4449
      ],
      "op": "ADD",
      "path": "13"
    },
    "1237": {
      "op": "MSTORE"
    },
    "1238": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "1240": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1242": {
      "op": "DUP3"
    },
    "1243": {
      "op": "ADD"
    },
    "1244": {
      "op": "MSTORE"
    },
    "1245": {
      "op": "PUSH18",
      "value": "0x616D6F756E742063616E6E6F74206265203"
    },
    "1264": {
      "op": "PUSH1",
      "value": "0x74"
    },
    "1266": {
      "op": "SHL"
    },
    "1267": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1269": {
      "op": "DUP3"
    },
    "1270": {
      "op": "ADD"
    },
    "1271": {
      "op": "MSTORE"
    },
    "1272": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1274": {
      "op": "ADD"
    },
    "1275": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4403,
        4449
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x364"
    },
    "1278": {
      "op": "JUMP"
    },
    "1279": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4403,
        4449
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1280": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1282": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1284": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1286": {
      "op": "SHL"
    },
    "1287": {
      "op": "SUB"
    },
    "1288": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4467,
        4491
      ],
      "op": "DUP6",
      "path": "13",
      "statement": 9
    },
    "1289": {
      "branch": 84,
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4467,
        4491
      ],
      "op": "AND",
      "path": "13"
    },
    "1290": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4459,
        4528
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x555"
    },
    "1293": {
      "branch": 84,
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4459,
        4528
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1294": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4459,
        4528
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1296": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4459,
        4528
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1297": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1301": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1303": {
      "op": "SHL"
    },
    "1304": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4459,
        4528
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1305": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4459,
        4528
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1306": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1308": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4459,
        4528
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "1310": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4459,
        4528
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1311": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4459,
        4528
      ],
      "op": "ADD",
      "path": "13"
    },
    "1312": {
      "op": "DUP2"
    },
    "1313": {
      "op": "SWAP1"
    },
    "1314": {
      "op": "MSTORE"
    },
    "1315": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1317": {
      "op": "DUP3"
    },
    "1318": {
      "op": "ADD"
    },
    "1319": {
      "op": "MSTORE"
    },
    "1320": {
      "op": "PUSH32",
      "value": "0x73656C6C546F6B656E2063616E6E6F74206265207A65726F2061646472657373"
    },
    "1353": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1355": {
      "op": "DUP3"
    },
    "1356": {
      "op": "ADD"
    },
    "1357": {
      "op": "MSTORE"
    },
    "1358": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1360": {
      "op": "ADD"
    },
    "1361": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4459,
        4528
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x364"
    },
    "1364": {
      "op": "JUMP"
    },
    "1365": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4459,
        4528
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1366": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1368": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1370": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1372": {
      "op": "SHL"
    },
    "1373": {
      "op": "SUB"
    },
    "1374": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4546,
        4569
      ],
      "op": "DUP5",
      "path": "13",
      "statement": 10
    },
    "1375": {
      "branch": 85,
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4546,
        4569
      ],
      "op": "AND",
      "path": "13"
    },
    "1376": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4538,
        4605
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x5AB"
    },
    "1379": {
      "branch": 85,
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4538,
        4605
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1380": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4538,
        4605
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1382": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4538,
        4605
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1383": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1387": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1389": {
      "op": "SHL"
    },
    "1390": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4538,
        4605
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1391": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4538,
        4605
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1392": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1394": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4538,
        4605
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "1396": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4538,
        4605
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1397": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4538,
        4605
      ],
      "op": "ADD",
      "path": "13"
    },
    "1398": {
      "op": "MSTORE"
    },
    "1399": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1401": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1403": {
      "op": "DUP3"
    },
    "1404": {
      "op": "ADD"
    },
    "1405": {
      "op": "MSTORE"
    },
    "1406": {
      "op": "PUSH32",
      "value": "0x627579546F6B656E2063616E6E6F74206265207A65726F206164647265737300"
    },
    "1439": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1441": {
      "op": "DUP3"
    },
    "1442": {
      "op": "ADD"
    },
    "1443": {
      "op": "MSTORE"
    },
    "1444": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1446": {
      "op": "ADD"
    },
    "1447": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4538,
        4605
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x364"
    },
    "1450": {
      "op": "JUMP"
    },
    "1451": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4538,
        4605
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1452": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4648,
        4669
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 11,
      "value": "0x8"
    },
    "1454": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4648,
        4669
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "1455": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4636,
        4645
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1456": {
      "branch": 86,
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4636,
        4669
      ],
      "op": "GT",
      "path": "13"
    },
    "1457": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4615,
        4748
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x61A"
    },
    "1460": {
      "branch": 86,
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4615,
        4748
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1461": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4615,
        4748
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1463": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4615,
        4748
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1464": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1468": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1470": {
      "op": "SHL"
    },
    "1471": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4615,
        4748
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1472": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4615,
        4748
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1473": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1475": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4615,
        4748
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "1477": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4615,
        4748
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1478": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4615,
        4748
      ],
      "op": "ADD",
      "path": "13"
    },
    "1479": {
      "op": "MSTORE"
    },
    "1480": {
      "op": "PUSH1",
      "value": "0x35"
    },
    "1482": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1484": {
      "op": "DUP3"
    },
    "1485": {
      "op": "ADD"
    },
    "1486": {
      "op": "MSTORE"
    },
    "1487": {
      "op": "PUSH32",
      "value": "0x696E74657276616C2068617320746F2062652067726561746572207468616E20"
    },
    "1520": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1522": {
      "op": "DUP3"
    },
    "1523": {
      "op": "ADD"
    },
    "1524": {
      "op": "MSTORE"
    },
    "1525": {
      "op": "PUSH21",
      "value": "0x1B5A5B9A5B5D5B555C1AD9595C125B9D195C9D985B"
    },
    "1547": {
      "op": "PUSH1",
      "value": "0x5A"
    },
    "1549": {
      "op": "SHL"
    },
    "1550": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1552": {
      "op": "DUP3"
    },
    "1553": {
      "op": "ADD"
    },
    "1554": {
      "op": "MSTORE"
    },
    "1555": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1557": {
      "op": "ADD"
    },
    "1558": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4615,
        4748
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x364"
    },
    "1561": {
      "op": "JUMP"
    },
    "1562": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4615,
        4748
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1563": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4805,
        4844
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1565": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4805,
        4844
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1566": {
      "op": "PUSH12",
      "value": "0xFFFFFFFFFFFFFFFFFFFFFFFF"
    },
    "1579": {
      "op": "NOT"
    },
    "1580": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1582": {
      "op": "DUP8"
    },
    "1583": {
      "op": "DUP2"
    },
    "1584": {
      "op": "SHL"
    },
    "1585": {
      "op": "DUP3"
    },
    "1586": {
      "op": "AND"
    },
    "1587": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4805,
        4844
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1589": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4805,
        4844
      ],
      "op": "DUP5",
      "path": "13"
    },
    "1590": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4805,
        4844
      ],
      "op": "ADD",
      "path": "13"
    },
    "1591": {
      "op": "MSTORE"
    },
    "1592": {
      "op": "DUP7"
    },
    "1593": {
      "op": "SWAP1"
    },
    "1594": {
      "op": "SHL"
    },
    "1595": {
      "op": "AND"
    },
    "1596": {
      "op": "PUSH1",
      "value": "0x34"
    },
    "1598": {
      "op": "DUP3"
    },
    "1599": {
      "op": "ADD"
    },
    "1600": {
      "op": "MSTORE"
    },
    "1601": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4758,
        4779
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1603": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4758,
        4779
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1604": {
      "op": "PUSH1",
      "value": "0x48"
    },
    "1606": {
      "op": "ADD"
    },
    "1607": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4805,
        4844
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1609": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4805,
        4844
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1610": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4805,
        4844
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1611": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1613": {
      "op": "NOT"
    },
    "1614": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4805,
        4844
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1615": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4805,
        4844
      ],
      "op": "DUP5",
      "path": "13"
    },
    "1616": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4805,
        4844
      ],
      "op": "SUB",
      "path": "13"
    },
    "1617": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4805,
        4844
      ],
      "op": "ADD",
      "path": "13"
    },
    "1618": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4805,
        4844
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1619": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4805,
        4844
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1620": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4805,
        4844
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1621": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4805,
        4844
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1622": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4805,
        4844
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1623": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4782,
        4854
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1624": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4782,
        4854
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1625": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4805,
        4844
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1627": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4782,
        4854
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1628": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4782,
        4854
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1629": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4782,
        4854
      ],
      "op": "ADD",
      "path": "13"
    },
    "1630": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4782,
        4854
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "1631": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4865,
        4892
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1633": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4895,
        4920
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1634": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4895,
        4920
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1635": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4895,
        4920
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1636": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4895,
        4905
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x5"
    },
    "1638": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4895,
        4920
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1639": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4895,
        4920
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "1640": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4895,
        4920
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1641": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4895,
        4920
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1642": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4895,
        4920
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "1643": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4782,
        4854
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1644": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4782,
        4854
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1645": {
      "op": "POP"
    },
    "1646": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4935,
        4980
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x678"
    },
    "1649": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4935,
        4956
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x6"
    },
    "1651": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4782,
        4854
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1652": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4935,
        4965
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1084"
    },
    "1655": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "jump": "i",
      "offset": [
        4935,
        4980
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1656": {
      "branch": 87,
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4935,
        4980
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1657": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4930,
        5195
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x6F8"
    },
    "1660": {
      "branch": 87,
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4930,
        5195
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1661": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4996,
        5028
      ],
      "op": "DUP1",
      "path": "13",
      "statement": 12
    },
    "1662": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4996,
        5028
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "1663": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1665": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1667": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1669": {
      "op": "SHL"
    },
    "1670": {
      "op": "SUB"
    },
    "1671": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4996,
        5028
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1672": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4996,
        5028
      ],
      "op": "DUP10",
      "path": "13"
    },
    "1673": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4996,
        5028
      ],
      "op": "AND",
      "path": "13"
    },
    "1674": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1676": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1678": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1680": {
      "op": "SHL"
    },
    "1681": {
      "op": "SUB"
    },
    "1682": {
      "op": "NOT"
    },
    "1683": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4996,
        5028
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1684": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4996,
        5028
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1685": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4996,
        5028
      ],
      "op": "AND",
      "path": "13"
    },
    "1686": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4996,
        5028
      ],
      "op": "OR",
      "path": "13"
    },
    "1687": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4996,
        5028
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1688": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4996,
        5028
      ],
      "op": "SSTORE",
      "path": "13"
    },
    "1689": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4996,
        5028
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "1691": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5042,
        5060
      ],
      "op": "DUP4",
      "path": "13",
      "statement": 13
    },
    "1692": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5042,
        5060
      ],
      "op": "ADD",
      "path": "13"
    },
    "1693": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5042,
        5072
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1694": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5042,
        5072
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "1695": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5042,
        5072
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1696": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5042,
        5072
      ],
      "op": "DUP10",
      "path": "13"
    },
    "1697": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5042,
        5072
      ],
      "op": "AND",
      "path": "13"
    },
    "1698": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5042,
        5072
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1699": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5042,
        5072
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1700": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5042,
        5072
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1701": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5042,
        5072
      ],
      "op": "AND",
      "path": "13"
    },
    "1702": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5042,
        5072
      ],
      "op": "OR",
      "path": "13"
    },
    "1703": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5042,
        5072
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1704": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5042,
        5072
      ],
      "op": "SSTORE",
      "path": "13"
    },
    "1705": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5086,
        5126
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 14,
      "value": "0x6B3"
    },
    "1708": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5086,
        5107
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x6"
    },
    "1710": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5112,
        5125
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1711": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5086,
        5111
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1113"
    },
    "1714": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "jump": "i",
      "offset": [
        5086,
        5126
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1715": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5086,
        5126
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1716": {
      "op": "POP"
    },
    "1717": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5145,
        5184
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 15,
      "value": "0x40"
    },
    "1719": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5145,
        5184
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1720": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5145,
        5184
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1721": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1723": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1725": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1727": {
      "op": "SHL"
    },
    "1728": {
      "op": "SUB"
    },
    "1729": {
      "op": "DUP1"
    },
    "1730": {
      "op": "DUP11"
    },
    "1731": {
      "op": "AND"
    },
    "1732": {
      "op": "DUP3"
    },
    "1733": {
      "op": "MSTORE"
    },
    "1734": {
      "op": "DUP9"
    },
    "1735": {
      "op": "AND"
    },
    "1736": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1738": {
      "op": "DUP3"
    },
    "1739": {
      "op": "ADD"
    },
    "1740": {
      "op": "MSTORE"
    },
    "1741": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5145,
        5184
      ],
      "op": "PUSH32",
      "path": "13",
      "value": "0xC10D5168CEDD6092198B6FEAF9C1340006C4737BE1B2F7C665DBC3421B3E255F"
    },
    "1774": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5145,
        5184
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1775": {
      "op": "ADD"
    },
    "1776": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5145,
        5184
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1778": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5145,
        5184
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1779": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5145,
        5184
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1780": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5145,
        5184
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1781": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5145,
        5184
      ],
      "op": "SUB",
      "path": "13"
    },
    "1782": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5145,
        5184
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1783": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5145,
        5184
      ],
      "op": "LOG1",
      "path": "13"
    },
    "1784": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4930,
        5195
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1785": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5224,
        5234
      ],
      "op": "CALLER",
      "path": "13",
      "statement": 16
    },
    "1786": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5204,
        5235
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1788": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5204,
        5235
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1789": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5204,
        5235
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1790": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5204,
        5235
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1791": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5204,
        5223
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x3"
    },
    "1793": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5204,
        5235
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1795": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5204,
        5235
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1796": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5204,
        5235
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1798": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5204,
        5235
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1799": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5204,
        5235
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "1800": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5204,
        5254
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x711"
    },
    "1803": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5204,
        5254
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1804": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5240,
        5253
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1805": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5204,
        5239
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1113"
    },
    "1808": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "jump": "i",
      "offset": [
        5204,
        5254
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1809": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5204,
        5254
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1810": {
      "op": "POP"
    },
    "1811": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5308,
        5455
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1813": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5308,
        5455
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1814": {
      "op": "PUSH12",
      "value": "0xFFFFFFFFFFFFFFFFFFFFFFFF"
    },
    "1827": {
      "op": "NOT"
    },
    "1828": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5342,
        5352
      ],
      "op": "CALLER",
      "path": "13"
    },
    "1829": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1831": {
      "op": "SHL"
    },
    "1832": {
      "op": "AND"
    },
    "1833": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5308,
        5455
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1835": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5308,
        5455
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1836": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5308,
        5455
      ],
      "op": "ADD",
      "path": "13"
    },
    "1837": {
      "op": "MSTORE"
    },
    "1838": {
      "op": "PUSH1",
      "value": "0x34"
    },
    "1840": {
      "op": "DUP2"
    },
    "1841": {
      "op": "ADD"
    },
    "1842": {
      "op": "DUP7"
    },
    "1843": {
      "op": "SWAP1"
    },
    "1844": {
      "op": "MSTORE"
    },
    "1845": {
      "op": "PUSH1",
      "value": "0x54"
    },
    "1847": {
      "op": "DUP2"
    },
    "1848": {
      "op": "ADD"
    },
    "1849": {
      "op": "DUP6"
    },
    "1850": {
      "op": "SWAP1"
    },
    "1851": {
      "op": "MSTORE"
    },
    "1852": {
      "op": "PUSH1",
      "value": "0x74"
    },
    "1854": {
      "op": "DUP2"
    },
    "1855": {
      "op": "ADD"
    },
    "1856": {
      "op": "DUP5"
    },
    "1857": {
      "op": "SWAP1"
    },
    "1858": {
      "op": "MSTORE"
    },
    "1859": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5265,
        5282
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1861": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5265,
        5282
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1862": {
      "op": "PUSH1",
      "value": "0x94"
    },
    "1864": {
      "op": "ADD"
    },
    "1865": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5308,
        5455
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1867": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5308,
        5455
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1868": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5308,
        5455
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1869": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1871": {
      "op": "NOT"
    },
    "1872": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5308,
        5455
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1873": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5308,
        5455
      ],
      "op": "DUP5",
      "path": "13"
    },
    "1874": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5308,
        5455
      ],
      "op": "SUB",
      "path": "13"
    },
    "1875": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5308,
        5455
      ],
      "op": "ADD",
      "path": "13"
    },
    "1876": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5308,
        5455
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1877": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5308,
        5455
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1878": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5308,
        5455
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1879": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5308,
        5455
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1880": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5308,
        5455
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1881": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5285,
        5465
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1882": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5285,
        5465
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1883": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5308,
        5455
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1885": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5285,
        5465
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1886": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5285,
        5465
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1887": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5285,
        5465
      ],
      "op": "ADD",
      "path": "13"
    },
    "1888": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5285,
        5465
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "1889": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5475,
        5503
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1891": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5506,
        5533
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1892": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5506,
        5533
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1893": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5506,
        5533
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1894": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5506,
        5522
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x2"
    },
    "1896": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5506,
        5522
      ],
      "op": "DUP7",
      "path": "13"
    },
    "1897": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5506,
        5522
      ],
      "op": "ADD",
      "path": "13"
    },
    "1898": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5506,
        5533
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1899": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5506,
        5533
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "1900": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5506,
        5533
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1901": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5506,
        5533
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1902": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5506,
        5533
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "1903": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5285,
        5465
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1904": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5285,
        5465
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1905": {
      "op": "POP"
    },
    "1906": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5548,
        5594
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x77E"
    },
    "1909": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5548,
        5574
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x3"
    },
    "1911": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5548,
        5574
      ],
      "op": "DUP5",
      "path": "13"
    },
    "1912": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5548,
        5574
      ],
      "op": "ADD",
      "path": "13"
    },
    "1913": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5285,
        5465
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1914": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5548,
        5583
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1084"
    },
    "1917": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "jump": "i",
      "offset": [
        5548,
        5594
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1918": {
      "branch": 88,
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5548,
        5594
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1919": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5543,
        5699
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x7A1"
    },
    "1922": {
      "branch": 88,
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5543,
        5699
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1923": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5610,
        5633
      ],
      "op": "DUP1",
      "path": "13",
      "statement": 17
    },
    "1924": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5610,
        5633
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "1925": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1927": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1929": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1931": {
      "op": "SHL"
    },
    "1932": {
      "op": "SUB"
    },
    "1933": {
      "op": "NOT"
    },
    "1934": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5610,
        5633
      ],
      "op": "AND",
      "path": "13"
    },
    "1935": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5623,
        5633
      ],
      "op": "CALLER",
      "path": "13"
    },
    "1936": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5610,
        5633
      ],
      "op": "OR",
      "path": "13"
    },
    "1937": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5610,
        5633
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1938": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5610,
        5633
      ],
      "op": "SSTORE",
      "path": "13"
    },
    "1939": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5647,
        5688
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 18,
      "value": "0x79F"
    },
    "1942": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5647,
        5673
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x3"
    },
    "1944": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5647,
        5673
      ],
      "op": "DUP5",
      "path": "13"
    },
    "1945": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5647,
        5673
      ],
      "op": "ADD",
      "path": "13"
    },
    "1946": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5678,
        5687
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1947": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5647,
        5677
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1113"
    },
    "1950": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "jump": "i",
      "offset": [
        5647,
        5688
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1951": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5647,
        5688
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1952": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5647,
        5688
      ],
      "op": "POP",
      "path": "13"
    },
    "1953": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5543,
        5699
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1954": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5724,
        5734
      ],
      "op": "CALLER",
      "path": "13",
      "statement": 19
    },
    "1955": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5735
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1957": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5735
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1958": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5735
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1959": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5735
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1960": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5723
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "1962": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5735
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1964": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5735
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1965": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5735
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1966": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5735
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1967": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5735
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1969": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5735
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1970": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5735
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1971": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5735
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "1972": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5750
      ],
      "op": "DUP8",
      "path": "13"
    },
    "1973": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5750
      ],
      "op": "DUP5",
      "path": "13"
    },
    "1974": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5750
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1975": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5750
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1976": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5750
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1977": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5750
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1978": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5750
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1979": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5750
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "1980": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5765
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x7C5"
    },
    "1983": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5765
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1984": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5755,
        5764
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1985": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5754
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1113"
    },
    "1988": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "jump": "i",
      "offset": [
        5708,
        5765
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1989": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5708,
        5765
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1990": {
      "op": "POP"
    },
    "1991": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5776,
        5792
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 20,
      "value": "0x1"
    },
    "1993": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5776,
        5792
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1994": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5776,
        5792
      ],
      "op": "ADD",
      "path": "13"
    },
    "1995": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5776,
        5806
      ],
      "op": "DUP8",
      "path": "13"
    },
    "1996": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5776,
        5806
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1997": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5776,
        5806
      ],
      "op": "SSTORE",
      "path": "13"
    },
    "1998": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5816,
        5835
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 21,
      "value": "0x2"
    },
    "2000": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5816,
        5835
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2001": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5816,
        5835
      ],
      "op": "ADD",
      "path": "13"
    },
    "2002": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5816,
        5853
      ],
      "op": "DUP6",
      "path": "13"
    },
    "2003": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5816,
        5853
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2004": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5816,
        5853
      ],
      "op": "SSTORE",
      "path": "13"
    },
    "2005": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5863,
        5877
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 22,
      "value": "0x3"
    },
    "2007": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5863,
        5877
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2008": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5863,
        5877
      ],
      "op": "ADD",
      "path": "13"
    },
    "2009": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5863,
        5889
      ],
      "op": "DUP7",
      "path": "13"
    },
    "2010": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5863,
        5889
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2011": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5863,
        5889
      ],
      "op": "SSTORE",
      "path": "13"
    },
    "2012": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5904,
        6059
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 23,
      "value": "0x40"
    },
    "2014": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5904,
        6059
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2015": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5904,
        6059
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2016": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2018": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2020": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2022": {
      "op": "SHL"
    },
    "2023": {
      "op": "SUB"
    },
    "2024": {
      "op": "DUP1"
    },
    "2025": {
      "op": "DUP13"
    },
    "2026": {
      "op": "AND"
    },
    "2027": {
      "op": "DUP3"
    },
    "2028": {
      "op": "MSTORE"
    },
    "2029": {
      "op": "DUP11"
    },
    "2030": {
      "op": "AND"
    },
    "2031": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2033": {
      "op": "DUP3"
    },
    "2034": {
      "op": "ADD"
    },
    "2035": {
      "op": "MSTORE"
    },
    "2036": {
      "op": "SWAP1"
    },
    "2037": {
      "op": "DUP2"
    },
    "2038": {
      "op": "ADD"
    },
    "2039": {
      "op": "DUP9"
    },
    "2040": {
      "op": "SWAP1"
    },
    "2041": {
      "op": "MSTORE"
    },
    "2042": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2044": {
      "op": "DUP2"
    },
    "2045": {
      "op": "ADD"
    },
    "2046": {
      "op": "DUP8"
    },
    "2047": {
      "op": "SWAP1"
    },
    "2048": {
      "op": "MSTORE"
    },
    "2049": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2051": {
      "op": "DUP2"
    },
    "2052": {
      "op": "ADD"
    },
    "2053": {
      "op": "DUP7"
    },
    "2054": {
      "op": "SWAP1"
    },
    "2055": {
      "op": "MSTORE"
    },
    "2056": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5904,
        6059
      ],
      "op": "PUSH32",
      "path": "13",
      "value": "0x683BC1B553FB7523892E96A28C87320B19C75A0E8A7294919AE8FBCE9ECEA524"
    },
    "2089": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5904,
        6059
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2090": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2092": {
      "op": "ADD"
    },
    "2093": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5904,
        6059
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2095": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5904,
        6059
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2096": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5904,
        6059
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2097": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5904,
        6059
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "2098": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5904,
        6059
      ],
      "op": "SUB",
      "path": "13"
    },
    "2099": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5904,
        6059
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2100": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        5904,
        6059
      ],
      "op": "LOG1",
      "path": "13"
    },
    "2101": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4393,
        6066
      ],
      "op": "POP",
      "path": "13"
    },
    "2102": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4393,
        6066
      ],
      "op": "POP",
      "path": "13"
    },
    "2103": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4393,
        6066
      ],
      "op": "POP",
      "path": "13"
    },
    "2104": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4393,
        6066
      ],
      "op": "POP",
      "path": "13"
    },
    "2105": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4191,
        6066
      ],
      "op": "POP",
      "path": "13"
    },
    "2106": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4191,
        6066
      ],
      "op": "POP",
      "path": "13"
    },
    "2107": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4191,
        6066
      ],
      "op": "POP",
      "path": "13"
    },
    "2108": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4191,
        6066
      ],
      "op": "POP",
      "path": "13"
    },
    "2109": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "offset": [
        4191,
        6066
      ],
      "op": "POP",
      "path": "13"
    },
    "2110": {
      "fn": "Trickle.setRecurringOrderWithStartTimestamp",
      "jump": "o",
      "offset": [
        4191,
        6066
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2111": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2112": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10116,
        10133
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "2114": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10135,
        10159
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x60"
    },
    "2116": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10210,
        10231
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x8"
    },
    "2118": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10210,
        10231
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "2119": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10197,
        10207
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x9"
    },
    "2121": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10197,
        10207
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "2122": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10197,
        10231
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x853"
    },
    "2125": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10197,
        10231
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "2126": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10197,
        10231
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2127": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10197,
        10231
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1944"
    },
    "2130": {
      "fn": "Trickle.checkUpkeep",
      "jump": "i",
      "offset": [
        10197,
        10231
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2131": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10197,
        10231
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2132": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10179,
        10194
      ],
      "op": "TIMESTAMP",
      "path": "13"
    },
    "2133": {
      "branch": 89,
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10179,
        10231
      ],
      "op": "LT",
      "path": "13"
    },
    "2134": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10175,
        10292
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "2135": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10175,
        10292
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x85F"
    },
    "2138": {
      "branch": 89,
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10175,
        10292
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "2139": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10247,
        10281
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 24,
      "value": "0xAAE"
    },
    "2142": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10247,
        10281
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2143": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10175,
        10292
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2144": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10302,
        10318
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "2146": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10321,
        10351
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x86B"
    },
    "2149": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10321,
        10342
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x6"
    },
    "2151": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10321,
        10349
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x109F"
    },
    "2154": {
      "fn": "Trickle.checkUpkeep",
      "jump": "i",
      "offset": [
        10321,
        10351
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2155": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10321,
        10351
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2156": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10302,
        10351
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2157": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10302,
        10351
      ],
      "op": "POP",
      "path": "13"
    },
    "2158": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10361,
        10420
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "2160": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10452,
        10460
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2161": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "PUSH8",
      "path": "13",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2170": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2171": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "GT",
      "path": "13"
    },
    "2172": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "2173": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x888"
    },
    "2176": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "2177": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x888"
    },
    "2180": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x171E"
    },
    "2183": {
      "fn": "Trickle.checkUpkeep",
      "jump": "i",
      "offset": [
        10423,
        10461
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2184": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2185": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2187": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2188": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2189": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2190": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2191": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2192": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2193": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2195": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "MUL",
      "path": "13"
    },
    "2196": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2198": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "ADD",
      "path": "13"
    },
    "2199": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2200": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "ADD",
      "path": "13"
    },
    "2201": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2203": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2204": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2205": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "2206": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x8CE"
    },
    "2209": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "2210": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2211": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2213": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "ADD",
      "path": "13"
    },
    "2214": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2215": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2217": {
      "op": "DUP1"
    },
    "2218": {
      "op": "MLOAD"
    },
    "2219": {
      "op": "DUP1"
    },
    "2220": {
      "op": "DUP3"
    },
    "2221": {
      "op": "ADD"
    },
    "2222": {
      "op": "SWAP1"
    },
    "2223": {
      "op": "SWAP2"
    },
    "2224": {
      "op": "MSTORE"
    },
    "2225": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2227": {
      "op": "DUP2"
    },
    "2228": {
      "op": "MSTORE"
    },
    "2229": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2231": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2233": {
      "op": "DUP3"
    },
    "2234": {
      "op": "ADD"
    },
    "2235": {
      "op": "MSTORE"
    },
    "2236": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2237": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2238": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2240": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "ADD",
      "path": "13"
    },
    "2241": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2242": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "2244": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2245": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "SUB",
      "path": "13"
    },
    "2246": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2247": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2248": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x8A6"
    },
    "2251": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "2252": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2253": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "POP",
      "path": "13"
    },
    "2254": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10423,
        10461
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2255": {
      "op": "POP"
    },
    "2256": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10361,
        10461
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2257": {
      "op": "POP"
    },
    "2258": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10471,
        10480
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "2260": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10471,
        10480
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2261": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10490,
        11634
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2262": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10514,
        10522
      ],
      "op": "DUP4",
      "path": "13"
    },
    "2263": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10510,
        10511
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2264": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10510,
        10522
      ],
      "op": "LT",
      "path": "13"
    },
    "2265": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10490,
        11634
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "2266": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10490,
        11634
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xA87"
    },
    "2269": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10490,
        11634
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "2270": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10543,
        10564
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "2272": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10567,
        10594
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x8EA"
    },
    "2275": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10567,
        10588
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x6"
    },
    "2277": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10592,
        10593
      ],
      "op": "DUP4",
      "path": "13"
    },
    "2278": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10567,
        10591
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x10A9"
    },
    "2281": {
      "fn": "Trickle.checkUpkeep",
      "jump": "i",
      "offset": [
        10567,
        10594
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2282": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10567,
        10594
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2283": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10608,
        10625
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "2285": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10628,
        10653
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2286": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10628,
        10653
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2287": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10628,
        10653
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2288": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10628,
        10638
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x5"
    },
    "2290": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10628,
        10653
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2292": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10628,
        10653
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2293": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10628,
        10653
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2295": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10628,
        10653
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2296": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10628,
        10653
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "2297": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10543,
        10594
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "2298": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10543,
        10594
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "2299": {
      "op": "POP"
    },
    "2300": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10608,
        10625
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2301": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10628,
        10713
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x908"
    },
    "2304": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10628,
        10713
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2305": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10628,
        10687
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x3"
    },
    "2307": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10628,
        10687
      ],
      "op": "ADD",
      "path": "13"
    },
    "2308": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10628,
        10711
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x109F"
    },
    "2311": {
      "fn": "Trickle.checkUpkeep",
      "jump": "i",
      "offset": [
        10628,
        10713
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2312": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10628,
        10713
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2313": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10608,
        10713
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2314": {
      "op": "POP"
    },
    "2315": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10731,
        10744
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2316": {
      "branch": 90,
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10731,
        10744
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "2317": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10727,
        11624
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xA72"
    },
    "2320": {
      "branch": 90,
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10727,
        11624
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "2321": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10764,
        10787
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "2323": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10804,
        10813
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2324": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "PUSH8",
      "path": "13",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2333": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2334": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "GT",
      "path": "13"
    },
    "2335": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "2336": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x92B"
    },
    "2339": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "2340": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x92B"
    },
    "2343": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x171E"
    },
    "2346": {
      "fn": "Trickle.checkUpkeep",
      "jump": "i",
      "offset": [
        10790,
        10814
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2347": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2348": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2350": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2351": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2352": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2353": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2354": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2355": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2356": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2358": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "MUL",
      "path": "13"
    },
    "2359": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2361": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "ADD",
      "path": "13"
    },
    "2362": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2363": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "ADD",
      "path": "13"
    },
    "2364": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2366": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2367": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2368": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "2369": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x954"
    },
    "2372": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "2373": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2374": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2376": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "ADD",
      "path": "13"
    },
    "2377": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2379": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2380": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "MUL",
      "path": "13"
    },
    "2381": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2382": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "CALLDATASIZE",
      "path": "13"
    },
    "2383": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "DUP4",
      "path": "13"
    },
    "2384": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "CALLDATACOPY",
      "path": "13"
    },
    "2385": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "ADD",
      "path": "13"
    },
    "2386": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2387": {
      "op": "POP"
    },
    "2388": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2389": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10790,
        10814
      ],
      "op": "POP",
      "path": "13"
    },
    "2390": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10764,
        10814
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2391": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10764,
        10814
      ],
      "op": "POP",
      "path": "13"
    },
    "2392": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10832,
        10841
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "2394": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10864,
        10873
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2395": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10859,
        11447
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2396": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10879,
        10888
      ],
      "op": "DUP4",
      "path": "13"
    },
    "2397": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10875,
        10876
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2398": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10875,
        10888
      ],
      "op": "LT",
      "path": "13"
    },
    "2399": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10859,
        11447
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "2400": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10859,
        11447
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xA2E"
    },
    "2403": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10859,
        11447
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "2404": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10917,
        10934
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "2406": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10937,
        10962
      ],
      "op": "DUP6",
      "path": "13"
    },
    "2407": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10937,
        10962
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2408": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10937,
        10962
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2409": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10937,
        10947
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x5"
    },
    "2411": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10937,
        10962
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2413": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10937,
        10962
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2414": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10937,
        10962
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2416": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10937,
        10962
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2417": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10937,
        10962
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "2418": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10937,
        11035
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x97E"
    },
    "2421": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10937,
        11035
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2422": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10937,
        11004
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x3"
    },
    "2424": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10937,
        11004
      ],
      "op": "ADD",
      "path": "13"
    },
    "2425": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11033,
        11034
      ],
      "op": "DUP4",
      "path": "13"
    },
    "2426": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10937,
        11032
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x10A9"
    },
    "2429": {
      "fn": "Trickle.checkUpkeep",
      "jump": "i",
      "offset": [
        10937,
        11035
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2430": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10937,
        11035
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2431": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11084
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "2433": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11112
      ],
      "op": "DUP8",
      "path": "13"
    },
    "2434": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11112
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2435": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11112
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2436": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11097
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x5"
    },
    "2438": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11112
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2440": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11112
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2441": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11112
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2442": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11112
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2443": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11112
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2445": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11112
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2446": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11112
      ],
      "op": "DUP4",
      "path": "13"
    },
    "2447": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11112
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "2448": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11155
      ],
      "op": "DUP5",
      "path": "13"
    },
    "2449": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11155
      ],
      "op": "DUP5",
      "path": "13"
    },
    "2450": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11155
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2451": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11144
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x2"
    },
    "2453": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11144
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2454": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11144
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2455": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11144
      ],
      "op": "ADD",
      "path": "13"
    },
    "2456": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11155
      ],
      "op": "DUP4",
      "path": "13"
    },
    "2457": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11155
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2458": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11155
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "2459": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11155
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2460": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11155
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2461": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11087,
        11155
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "2462": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2463": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2464": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x80"
    },
    "2466": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2467": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "ADD",
      "path": "13"
    },
    "2468": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "DUP4",
      "path": "13"
    },
    "2469": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2470": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2471": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "2472": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2474": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2476": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2478": {
      "op": "SHL"
    },
    "2479": {
      "op": "SUB"
    },
    "2480": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "AND",
      "path": "13"
    },
    "2481": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2482": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2483": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "2485": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2486": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "ADD",
      "path": "13"
    },
    "2487": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "2488": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "2489": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2490": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "ADD",
      "path": "13"
    },
    "2491": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "2492": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2493": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "2494": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2495": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "2496": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "DUP4",
      "path": "13"
    },
    "2497": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "ADD",
      "path": "13"
    },
    "2498": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "2499": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2500": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2501": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "ADD",
      "path": "13"
    },
    "2502": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2503": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2504": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2505": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x3"
    },
    "2507": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2508": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "2509": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "ADD",
      "path": "13"
    },
    "2510": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "2511": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x60"
    },
    "2513": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2514": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "ADD",
      "path": "13"
    },
    "2515": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2516": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2517": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2518": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10917,
        11035
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "2519": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10917,
        11035
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "2520": {
      "op": "POP"
    },
    "2521": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11057,
        11155
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "2522": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11225,
        11261
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x9E2"
    },
    "2525": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11225,
        11261
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "2526": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11225,
        11261
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1944"
    },
    "2529": {
      "fn": "Trickle.checkUpkeep",
      "jump": "i",
      "offset": [
        11225,
        11261
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2530": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11225,
        11261
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2531": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11206,
        11221
      ],
      "op": "TIMESTAMP",
      "path": "13"
    },
    "2532": {
      "branch": 91,
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11206,
        11262
      ],
      "op": "GT",
      "path": "13"
    },
    "2533": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11177,
        11429
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "2534": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11177,
        11429
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xA19"
    },
    "2537": {
      "branch": 91,
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11177,
        11429
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "2538": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11323,
        11332
      ],
      "op": "DUP2",
      "path": "13",
      "statement": 25
    },
    "2539": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11317
      ],
      "op": "DUP6",
      "path": "13"
    },
    "2540": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11318,
        11319
      ],
      "op": "DUP6",
      "path": "13"
    },
    "2541": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11320
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2542": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11320
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2543": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11320
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2544": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11320
      ],
      "op": "LT",
      "path": "13"
    },
    "2545": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11320
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x9FC"
    },
    "2548": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11320
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "2549": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11320
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x9FC"
    },
    "2552": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11320
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1734"
    },
    "2555": {
      "fn": "Trickle.checkUpkeep",
      "jump": "i",
      "offset": [
        11311,
        11320
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2556": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11320
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2557": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11320
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2559": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11320
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2560": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11320
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2561": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11320
      ],
      "op": "MUL",
      "path": "13"
    },
    "2562": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11320
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "2563": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11320
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2564": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11320
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "2565": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11320
      ],
      "op": "ADD",
      "path": "13"
    },
    "2566": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11320
      ],
      "op": "ADD",
      "path": "13"
    },
    "2567": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11311,
        11332
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2568": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11358,
        11361
      ],
      "op": "DUP4",
      "path": "13",
      "statement": 26
    },
    "2569": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11358,
        11361
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xA11"
    },
    "2572": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11358,
        11361
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2573": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11358,
        11361
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1760"
    },
    "2576": {
      "fn": "Trickle.checkUpkeep",
      "jump": "i",
      "offset": [
        11358,
        11361
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2577": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11358,
        11361
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2578": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11358,
        11361
      ],
      "op": "SWAP5",
      "path": "13"
    },
    "2579": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11358,
        11361
      ],
      "op": "POP",
      "path": "13"
    },
    "2580": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11358,
        11361
      ],
      "op": "POP",
      "path": "13"
    },
    "2581": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11402,
        11406
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 27,
      "value": "0x1"
    },
    "2583": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11387,
        11406
      ],
      "op": "SWAP13",
      "path": "13"
    },
    "2584": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11387,
        11406
      ],
      "op": "POP",
      "path": "13"
    },
    "2585": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11177,
        11429
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2586": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10895,
        11447
      ],
      "op": "POP",
      "path": "13"
    },
    "2587": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10895,
        11447
      ],
      "op": "POP",
      "path": "13"
    },
    "2588": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10890,
        10893
      ],
      "op": "DUP1",
      "path": "13",
      "statement": 28
    },
    "2589": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10890,
        10893
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2590": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10890,
        10893
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xA26"
    },
    "2593": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10890,
        10893
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2594": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10890,
        10893
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1760"
    },
    "2597": {
      "fn": "Trickle.checkUpkeep",
      "jump": "i",
      "offset": [
        10890,
        10893
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2598": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10890,
        10893
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2599": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10890,
        10893
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "2600": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10890,
        10893
      ],
      "op": "POP",
      "path": "13"
    },
    "2601": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10890,
        10893
      ],
      "op": "POP",
      "path": "13"
    },
    "2602": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10859,
        11447
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x95B"
    },
    "2605": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10859,
        11447
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2606": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10859,
        11447
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2607": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10859,
        11447
      ],
      "op": "POP",
      "path": "13"
    },
    "2608": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11485,
        11588
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 29,
      "value": "0x40"
    },
    "2610": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11485,
        11588
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2611": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11485,
        11588
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2612": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11485,
        11588
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2614": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11485,
        11588
      ],
      "op": "ADD",
      "path": "13"
    },
    "2615": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11485,
        11588
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2617": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11485,
        11588
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2618": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11485,
        11588
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2619": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11529,
        11542
      ],
      "op": "DUP6",
      "path": "13"
    },
    "2620": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11485,
        11588
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2621": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11485,
        11588
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2622": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11485,
        11588
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2624": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11485,
        11588
      ],
      "op": "ADD",
      "path": "13"
    },
    "2625": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11564,
        11570
      ],
      "op": "DUP4",
      "path": "13"
    },
    "2626": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11485,
        11588
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2627": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11485,
        11588
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2628": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11485,
        11588
      ],
      "op": "POP",
      "path": "13"
    },
    "2629": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11464,
        11479
      ],
      "op": "DUP8",
      "path": "13"
    },
    "2630": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11480,
        11481
      ],
      "op": "DUP8",
      "path": "13"
    },
    "2631": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11464,
        11482
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2632": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11464,
        11482
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2633": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11464,
        11482
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2634": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11464,
        11482
      ],
      "op": "LT",
      "path": "13"
    },
    "2635": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11464,
        11482
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xA56"
    },
    "2638": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11464,
        11482
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "2639": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11464,
        11482
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xA56"
    },
    "2642": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11464,
        11482
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1734"
    },
    "2645": {
      "fn": "Trickle.checkUpkeep",
      "jump": "i",
      "offset": [
        11464,
        11482
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2646": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11464,
        11482
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2647": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11464,
        11482
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2649": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11464,
        11482
      ],
      "op": "MUL",
      "path": "13"
    },
    "2650": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11464,
        11482
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2652": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11464,
        11482
      ],
      "op": "ADD",
      "path": "13"
    },
    "2653": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11464,
        11482
      ],
      "op": "ADD",
      "path": "13"
    },
    "2654": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11464,
        11588
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2655": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11464,
        11588
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2656": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11464,
        11588
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2657": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11464,
        11588
      ],
      "op": "POP",
      "path": "13"
    },
    "2658": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11606,
        11609
      ],
      "op": "DUP6",
      "path": "13",
      "statement": 30
    },
    "2659": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11606,
        11609
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2660": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11606,
        11609
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xA6C"
    },
    "2663": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11606,
        11609
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2664": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11606,
        11609
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1760"
    },
    "2667": {
      "fn": "Trickle.checkUpkeep",
      "jump": "i",
      "offset": [
        11606,
        11609
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2668": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11606,
        11609
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2669": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11606,
        11609
      ],
      "op": "SWAP7",
      "path": "13"
    },
    "2670": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11606,
        11609
      ],
      "op": "POP",
      "path": "13"
    },
    "2671": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11606,
        11609
      ],
      "op": "POP",
      "path": "13"
    },
    "2672": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10746,
        11624
      ],
      "op": "POP",
      "path": "13"
    },
    "2673": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10746,
        11624
      ],
      "op": "POP",
      "path": "13"
    },
    "2674": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10727,
        11624
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2675": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10529,
        11634
      ],
      "op": "POP",
      "path": "13"
    },
    "2676": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10529,
        11634
      ],
      "op": "POP",
      "path": "13"
    },
    "2677": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10524,
        10527
      ],
      "op": "DUP1",
      "path": "13",
      "statement": 31
    },
    "2678": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10524,
        10527
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2679": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10524,
        10527
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xA7F"
    },
    "2682": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10524,
        10527
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2683": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10524,
        10527
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1760"
    },
    "2686": {
      "fn": "Trickle.checkUpkeep",
      "jump": "i",
      "offset": [
        10524,
        10527
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2687": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10524,
        10527
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2688": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10524,
        10527
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "2689": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10524,
        10527
      ],
      "op": "POP",
      "path": "13"
    },
    "2690": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10524,
        10527
      ],
      "op": "POP",
      "path": "13"
    },
    "2691": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10490,
        11634
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x8D5"
    },
    "2694": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10490,
        11634
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2695": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10490,
        11634
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2696": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10490,
        11634
      ],
      "op": "POP",
      "path": "13"
    },
    "2697": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11668,
        11683
      ],
      "op": "DUP2",
      "path": "13",
      "statement": 32
    },
    "2698": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2700": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2701": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2703": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "ADD",
      "path": "13"
    },
    "2704": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xA99"
    },
    "2707": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "2708": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2709": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x195C"
    },
    "2712": {
      "fn": "Trickle.checkUpkeep",
      "jump": "i",
      "offset": [
        11657,
        11684
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2713": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2714": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2716": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2717": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2719": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2720": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "DUP4",
      "path": "13"
    },
    "2721": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "SUB",
      "path": "13"
    },
    "2722": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "SUB",
      "path": "13"
    },
    "2723": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2724": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2725": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2726": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2728": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11657,
        11684
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2729": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11643,
        11684
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "2730": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        11643,
        11684
      ],
      "op": "POP",
      "path": "13"
    },
    "2731": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10165,
        11691
      ],
      "op": "POP",
      "path": "13"
    },
    "2732": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10165,
        11691
      ],
      "op": "POP",
      "path": "13"
    },
    "2733": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10165,
        11691
      ],
      "op": "POP",
      "path": "13"
    },
    "2734": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2735": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "2736": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "POP",
      "path": "13"
    },
    "2737": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "2738": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2739": {
      "fn": "Trickle.checkUpkeep",
      "offset": [
        10015,
        11691
      ],
      "op": "POP",
      "path": "13"
    },
    "2740": {
      "fn": "Trickle.checkUpkeep",
      "jump": "o",
      "offset": [
        10015,
        11691
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2741": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2742": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2744": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2745": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2747": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2749": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2751": {
      "op": "SHL"
    },
    "2752": {
      "op": "SUB"
    },
    "2753": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "AND",
      "path": "0"
    },
    "2754": {
      "fn": "Context._msgSender",
      "offset": [
        666,
        676
      ],
      "op": "CALLER",
      "path": "5",
      "statement": 33
    },
    "2755": {
      "offset": [
        1185,
        1208
      ],
      "op": "EQ",
      "path": "0"
    },
    "2756": {
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB0F"
    },
    "2759": {
      "offset": [
        1177,
        1245
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2760": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2762": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2763": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2767": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2769": {
      "op": "SHL"
    },
    "2770": {
      "offset": [
        1177,
        1245
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2771": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2772": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2774": {
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2776": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2777": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "ADD",
      "path": "0"
    },
    "2778": {
      "op": "DUP2"
    },
    "2779": {
      "op": "SWAP1"
    },
    "2780": {
      "op": "MSTORE"
    },
    "2781": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2783": {
      "op": "DUP3"
    },
    "2784": {
      "op": "ADD"
    },
    "2785": {
      "op": "MSTORE"
    },
    "2786": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
    },
    "2819": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2821": {
      "op": "DUP3"
    },
    "2822": {
      "op": "ADD"
    },
    "2823": {
      "op": "MSTORE"
    },
    "2824": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2826": {
      "op": "ADD"
    },
    "2827": {
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x364"
    },
    "2830": {
      "op": "JUMP"
    },
    "2831": {
      "offset": [
        1177,
        1245
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2832": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1669,
        1690
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 34,
      "value": "0xB19"
    },
    "2835": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1687,
        1688
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2837": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1669,
        1678
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x111F"
    },
    "2840": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1669,
        1690
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2841": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1669,
        1690
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2842": {
      "fn": "Ownable.renounceOwnership",
      "jump": "o",
      "offset": [
        1605,
        1697
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2843": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6329,
        6827
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2844": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6434,
        6461
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "2846": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6464,
        6490
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2847": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6464,
        6490
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2848": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6464,
        6490
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2849": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6464,
        6474
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x5"
    },
    "2851": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6464,
        6490
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2853": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6464,
        6490
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2854": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6464,
        6490
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2856": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6464,
        6490
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2857": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6464,
        6490
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "2858": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6521,
        6568
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 35,
      "value": "0xB36"
    },
    "2861": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6521,
        6547
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x3"
    },
    "2863": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6521,
        6547
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2864": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6521,
        6547
      ],
      "op": "ADD",
      "path": "13"
    },
    "2865": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6557,
        6567
      ],
      "op": "DUP4",
      "path": "13"
    },
    "2866": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6521,
        6556
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1084"
    },
    "2869": {
      "fn": "Trickle.deleteRecurringOrder",
      "jump": "i",
      "offset": [
        6521,
        6568
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2870": {
      "branch": 92,
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6521,
        6568
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2871": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6500,
        6624
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xB82"
    },
    "2874": {
      "branch": 92,
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6500,
        6624
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "2875": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6500,
        6624
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2877": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6500,
        6624
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2878": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2882": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2884": {
      "op": "SHL"
    },
    "2885": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6500,
        6624
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2886": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6500,
        6624
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2887": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2889": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6500,
        6624
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "2891": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6500,
        6624
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2892": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6500,
        6624
      ],
      "op": "ADD",
      "path": "13"
    },
    "2893": {
      "op": "MSTORE"
    },
    "2894": {
      "op": "PUSH1",
      "value": "0x1E"
    },
    "2896": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2898": {
      "op": "DUP3"
    },
    "2899": {
      "op": "ADD"
    },
    "2900": {
      "op": "MSTORE"
    },
    "2901": {
      "op": "PUSH32",
      "value": "0x4F5244455220544F2044454C45544520444F4553204E4F542045584953540000"
    },
    "2934": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2936": {
      "op": "DUP3"
    },
    "2937": {
      "op": "ADD"
    },
    "2938": {
      "op": "MSTORE"
    },
    "2939": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2941": {
      "op": "ADD"
    },
    "2942": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6500,
        6624
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x364"
    },
    "2945": {
      "op": "JUMP"
    },
    "2946": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6500,
        6624
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2947": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6655,
        6683
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 36,
      "value": "0x0"
    },
    "2949": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6655,
        6683
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2950": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6655,
        6683
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2951": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6655,
        6683
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2952": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6655,
        6671
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x2"
    },
    "2954": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6655,
        6671
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2955": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6655,
        6671
      ],
      "op": "ADD",
      "path": "13"
    },
    "2956": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6655,
        6683
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2958": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6655,
        6683
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2959": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6655,
        6683
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2961": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6655,
        6683
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2962": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6655,
        6683
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "2963": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6655,
        6688
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "2964": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2966": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2968": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2970": {
      "op": "SHL"
    },
    "2971": {
      "op": "SUB"
    },
    "2972": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6655,
        6688
      ],
      "op": "AND",
      "path": "13"
    },
    "2973": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6692,
        6702
      ],
      "op": "CALLER",
      "path": "13"
    },
    "2974": {
      "branch": 93,
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6655,
        6702
      ],
      "op": "EQ",
      "path": "13"
    },
    "2975": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6634,
        6765
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xBF8"
    },
    "2978": {
      "branch": 93,
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6634,
        6765
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "2979": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6634,
        6765
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2981": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6634,
        6765
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2982": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2986": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2988": {
      "op": "SHL"
    },
    "2989": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6634,
        6765
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2990": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6634,
        6765
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2991": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2993": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6634,
        6765
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "2995": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6634,
        6765
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2996": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6634,
        6765
      ],
      "op": "ADD",
      "path": "13"
    },
    "2997": {
      "op": "MSTORE"
    },
    "2998": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "3000": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3002": {
      "op": "DUP3"
    },
    "3003": {
      "op": "ADD"
    },
    "3004": {
      "op": "MSTORE"
    },
    "3005": {
      "op": "PUSH32",
      "value": "0x43414E4E4F542044454C455445204F52444552204F4620444946464552454E54"
    },
    "3038": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3040": {
      "op": "DUP3"
    },
    "3041": {
      "op": "ADD"
    },
    "3042": {
      "op": "MSTORE"
    },
    "3043": {
      "op": "PUSH5",
      "value": "0x102AA9A2A9"
    },
    "3049": {
      "op": "PUSH1",
      "value": "0xD9"
    },
    "3051": {
      "op": "SHL"
    },
    "3052": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3054": {
      "op": "DUP3"
    },
    "3055": {
      "op": "ADD"
    },
    "3056": {
      "op": "MSTORE"
    },
    "3057": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "3059": {
      "op": "ADD"
    },
    "3060": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6634,
        6765
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x364"
    },
    "3063": {
      "op": "JUMP"
    },
    "3064": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6634,
        6765
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "3065": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6775,
        6820
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 37,
      "value": "0xC05"
    },
    "3068": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6775,
        6801
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x3"
    },
    "3070": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6775,
        6801
      ],
      "op": "DUP3",
      "path": "13"
    },
    "3071": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6775,
        6801
      ],
      "op": "ADD",
      "path": "13"
    },
    "3072": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6809,
        6819
      ],
      "op": "DUP4",
      "path": "13"
    },
    "3073": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6775,
        6808
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1171"
    },
    "3076": {
      "fn": "Trickle.deleteRecurringOrder",
      "jump": "i",
      "offset": [
        6775,
        6820
      ],
      "op": "JUMP",
      "path": "13"
    },
    "3077": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6775,
        6820
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "3078": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6775,
        6820
      ],
      "op": "POP",
      "path": "13"
    },
    "3079": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6424,
        6827
      ],
      "op": "POP",
      "path": "13"
    },
    "3080": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6329,
        6827
      ],
      "op": "POP",
      "path": "13"
    },
    "3081": {
      "fn": "Trickle.deleteRecurringOrder",
      "offset": [
        6329,
        6827
      ],
      "op": "POP",
      "path": "13"
    },
    "3082": {
      "fn": "Trickle.deleteRecurringOrder",
      "jump": "o",
      "offset": [
        6329,
        6827
      ],
      "op": "JUMP",
      "path": "13"
    },
    "3083": {
      "fn": "Trickle.setRecurringOrder",
      "offset": [
        3391,
        3714
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "3084": {
      "fn": "Trickle.setRecurringOrder",
      "offset": [
        3552,
        3707
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 38,
      "value": "0xC05"
    },
    "3087": {
      "fn": "Trickle.setRecurringOrder",
      "offset": [
        3601,
        3611
      ],
      "op": "DUP5",
      "path": "13"
    },
    "3088": {
      "fn": "Trickle.setRecurringOrder",
      "offset": [
        3625,
        3634
      ],
      "op": "DUP5",
      "path": "13"
    },
    "3089": {
      "fn": "Trickle.setRecurringOrder",
      "offset": [
        3648,
        3659
      ],
      "op": "DUP5",
      "path": "13"
    },
    "3090": {
      "fn": "Trickle.setRecurringOrder",
      "offset": [
        3673,
        3682
      ],
      "op": "DUP5",
      "path": "13"
    },
    "3091": {
      "fn": "Trickle.setRecurringOrder",
      "offset": [
        3696,
        3697
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "3093": {
      "fn": "Trickle.setRecurringOrder",
      "offset": [
        3552,
        3587
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x4BA"
    },
    "3096": {
      "fn": "Trickle.setRecurringOrder",
      "jump": "i",
      "offset": [
        3552,
        3707
      ],
      "op": "JUMP",
      "path": "13"
    },
    "3097": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1528,
        2363
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "3098": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1685,
        1689
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x0"
    },
    "3100": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1734,
        1743
      ],
      "op": "DUP4",
      "path": "12",
      "statement": 39
    },
    "3101": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3103": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3105": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3107": {
      "op": "SHL"
    },
    "3108": {
      "op": "SUB"
    },
    "3109": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1722,
        1743
      ],
      "op": "AND",
      "path": "12"
    },
    "3110": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1722,
        1730
      ],
      "op": "DUP6",
      "path": "12"
    },
    "3111": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3113": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3115": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3117": {
      "op": "SHL"
    },
    "3118": {
      "op": "SUB"
    },
    "3119": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1722,
        1743
      ],
      "op": "AND",
      "path": "12"
    },
    "3120": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1722,
        1743
      ],
      "op": "EQ",
      "path": "12"
    },
    "3121": {
      "branch": 102,
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1722,
        1743
      ],
      "op": "ISZERO",
      "path": "12"
    },
    "3122": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1701,
        1811
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xC90"
    },
    "3125": {
      "branch": 102,
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1701,
        1811
      ],
      "op": "JUMPI",
      "path": "12"
    },
    "3126": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1701,
        1811
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x40"
    },
    "3128": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1701,
        1811
      ],
      "op": "MLOAD",
      "path": "12"
    },
    "3129": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3133": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3135": {
      "op": "SHL"
    },
    "3136": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1701,
        1811
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3137": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1701,
        1811
      ],
      "op": "MSTORE",
      "path": "12"
    },
    "3138": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3140": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1701,
        1811
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x4"
    },
    "3142": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1701,
        1811
      ],
      "op": "DUP3",
      "path": "12"
    },
    "3143": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1701,
        1811
      ],
      "op": "ADD",
      "path": "12"
    },
    "3144": {
      "op": "MSTORE"
    },
    "3145": {
      "op": "PUSH1",
      "value": "0x2A"
    },
    "3147": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3149": {
      "op": "DUP3"
    },
    "3150": {
      "op": "ADD"
    },
    "3151": {
      "op": "MSTORE"
    },
    "3152": {
      "op": "PUSH32",
      "value": "0x496E70757420616E64204F757470757420546F6B656E206861766520746F2062"
    },
    "3185": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3187": {
      "op": "DUP3"
    },
    "3188": {
      "op": "ADD"
    },
    "3189": {
      "op": "MSTORE"
    },
    "3190": {
      "op": "PUSH10",
      "value": "0x1948191A5CDD1A5B98DD"
    },
    "3201": {
      "op": "PUSH1",
      "value": "0xB2"
    },
    "3203": {
      "op": "SHL"
    },
    "3204": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3206": {
      "op": "DUP3"
    },
    "3207": {
      "op": "ADD"
    },
    "3208": {
      "op": "MSTORE"
    },
    "3209": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "3211": {
      "op": "ADD"
    },
    "3212": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1701,
        1811
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0x364"
    },
    "3215": {
      "op": "JUMP"
    },
    "3216": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1701,
        1811
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "3217": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x40"
    },
    "3219": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "MLOAD",
      "path": "12"
    },
    "3220": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "3225": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3227": {
      "op": "SHL"
    },
    "3228": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3229": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "MSTORE",
      "path": "12"
    },
    "3230": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3232": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3234": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3236": {
      "op": "SHL"
    },
    "3237": {
      "op": "SUB"
    },
    "3238": {
      "op": "DUP4"
    },
    "3239": {
      "op": "DUP2"
    },
    "3240": {
      "op": "AND"
    },
    "3241": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x4"
    },
    "3243": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "DUP4",
      "path": "12"
    },
    "3244": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "ADD",
      "path": "12"
    },
    "3245": {
      "op": "MSTORE"
    },
    "3246": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1862,
        1866
      ],
      "op": "ADDRESS",
      "path": "12"
    },
    "3247": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3249": {
      "op": "DUP4"
    },
    "3250": {
      "op": "ADD"
    },
    "3251": {
      "op": "MSTORE"
    },
    "3252": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3254": {
      "op": "DUP3"
    },
    "3255": {
      "op": "ADD"
    },
    "3256": {
      "op": "DUP6"
    },
    "3257": {
      "op": "SWAP1"
    },
    "3258": {
      "op": "MSTORE"
    },
    "3259": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1846
      ],
      "op": "DUP7",
      "path": "12"
    },
    "3260": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1846
      ],
      "op": "AND",
      "path": "12"
    },
    "3261": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1846
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3262": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1846
      ],
      "op": "PUSH4",
      "path": "12",
      "value": "0x23B872DD"
    },
    "3267": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1846
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3268": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3270": {
      "op": "ADD"
    },
    "3271": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x20"
    },
    "3273": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x40"
    },
    "3275": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "MLOAD",
      "path": "12"
    },
    "3276": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3277": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "DUP4",
      "path": "12"
    },
    "3278": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "SUB",
      "path": "12"
    },
    "3279": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3280": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x0"
    },
    "3282": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "DUP8",
      "path": "12"
    },
    "3283": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3284": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "EXTCODESIZE",
      "path": "12"
    },
    "3285": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "ISZERO",
      "path": "12"
    },
    "3286": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3287": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "ISZERO",
      "path": "12"
    },
    "3288": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xCE0"
    },
    "3291": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "JUMPI",
      "path": "12"
    },
    "3292": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x0"
    },
    "3294": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3295": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "REVERT",
      "path": "12"
    },
    "3296": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "3297": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "POP",
      "path": "12"
    },
    "3298": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "GAS",
      "path": "12"
    },
    "3299": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "CALL",
      "path": "12"
    },
    "3300": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "SWAP3",
      "path": "12"
    },
    "3301": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "POP",
      "path": "12"
    },
    "3302": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "POP",
      "path": "12"
    },
    "3303": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "POP",
      "path": "12"
    },
    "3304": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3305": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "ISZERO",
      "path": "12"
    },
    "3306": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xD10"
    },
    "3309": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "JUMPI",
      "path": "12"
    },
    "3310": {
      "op": "POP"
    },
    "3311": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x40"
    },
    "3313": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3314": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "MLOAD",
      "path": "12"
    },
    "3315": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x1F"
    },
    "3317": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "RETURNDATASIZE",
      "path": "12"
    },
    "3318": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3319": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3320": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "ADD",
      "path": "12"
    },
    "3321": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3323": {
      "op": "NOT"
    },
    "3324": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "AND",
      "path": "12"
    },
    "3325": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "DUP3",
      "path": "12"
    },
    "3326": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "ADD",
      "path": "12"
    },
    "3327": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3328": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "SWAP3",
      "path": "12"
    },
    "3329": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "MSTORE",
      "path": "12"
    },
    "3330": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xD0D"
    },
    "3333": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "SWAP2",
      "path": "12"
    },
    "3334": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3335": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "ADD",
      "path": "12"
    },
    "3336": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3337": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0x19FC"
    },
    "3340": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "jump": "i",
      "offset": [
        1825,
        1879
      ],
      "op": "JUMP",
      "path": "12"
    },
    "3341": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "3342": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x1"
    },
    "3344": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1825,
        1879
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "3345": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1821,
        2357
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xD1C"
    },
    "3348": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1821,
        2357
      ],
      "op": "JUMPI",
      "path": "12"
    },
    "3349": {
      "op": "POP"
    },
    "3350": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2341,
        2346
      ],
      "op": "PUSH1",
      "path": "12",
      "statement": 40,
      "value": "0x0"
    },
    "3352": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2334,
        2346
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xEC8"
    },
    "3355": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2334,
        2346
      ],
      "op": "JUMP",
      "path": "12"
    },
    "3356": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1821,
        2357
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "3357": {
      "op": "POP"
    },
    "3358": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1919,
        1933
      ],
      "op": "PUSH1",
      "path": "12",
      "statement": 41,
      "value": "0x2"
    },
    "3360": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1919,
        1933
      ],
      "op": "SLOAD",
      "path": "12"
    },
    "3361": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x40"
    },
    "3363": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "MLOAD",
      "path": "12"
    },
    "3364": {
      "op": "PUSH4",
      "value": "0x95EA7B3"
    },
    "3369": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3371": {
      "op": "SHL"
    },
    "3372": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3373": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "MSTORE",
      "path": "12"
    },
    "3374": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3376": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3378": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3380": {
      "op": "SHL"
    },
    "3381": {
      "op": "SUB"
    },
    "3382": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1919,
        1933
      ],
      "op": "SWAP2",
      "path": "12"
    },
    "3383": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1919,
        1933
      ],
      "op": "DUP3",
      "path": "12"
    },
    "3384": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1919,
        1933
      ],
      "op": "AND",
      "path": "12"
    },
    "3385": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x4"
    },
    "3387": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "DUP3",
      "path": "12"
    },
    "3388": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "ADD",
      "path": "12"
    },
    "3389": {
      "op": "MSTORE"
    },
    "3390": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3392": {
      "op": "DUP2"
    },
    "3393": {
      "op": "ADD"
    },
    "3394": {
      "op": "DUP6"
    },
    "3395": {
      "op": "SWAP1"
    },
    "3396": {
      "op": "MSTORE"
    },
    "3397": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1910
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3398": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1910
      ],
      "op": "DUP7",
      "path": "12"
    },
    "3399": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1910
      ],
      "op": "AND",
      "path": "12"
    },
    "3400": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1910
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3401": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1910
      ],
      "op": "PUSH4",
      "path": "12",
      "value": "0x95EA7B3"
    },
    "3406": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1910
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3407": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3409": {
      "op": "ADD"
    },
    "3410": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x20"
    },
    "3412": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x40"
    },
    "3414": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "MLOAD",
      "path": "12"
    },
    "3415": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3416": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "DUP4",
      "path": "12"
    },
    "3417": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "SUB",
      "path": "12"
    },
    "3418": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3419": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x0"
    },
    "3421": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "DUP8",
      "path": "12"
    },
    "3422": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3423": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "EXTCODESIZE",
      "path": "12"
    },
    "3424": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "ISZERO",
      "path": "12"
    },
    "3425": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3426": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "ISZERO",
      "path": "12"
    },
    "3427": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xD6B"
    },
    "3430": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "JUMPI",
      "path": "12"
    },
    "3431": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x0"
    },
    "3433": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3434": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "REVERT",
      "path": "12"
    },
    "3435": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "3436": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "POP",
      "path": "12"
    },
    "3437": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "GAS",
      "path": "12"
    },
    "3438": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "CALL",
      "path": "12"
    },
    "3439": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "ISZERO",
      "path": "12"
    },
    "3440": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3441": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "ISZERO",
      "path": "12"
    },
    "3442": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xD7F"
    },
    "3445": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "JUMPI",
      "path": "12"
    },
    "3446": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "RETURNDATASIZE",
      "path": "12"
    },
    "3447": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x0"
    },
    "3449": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3450": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "RETURNDATACOPY",
      "path": "12"
    },
    "3451": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "RETURNDATASIZE",
      "path": "12"
    },
    "3452": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x0"
    },
    "3454": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "REVERT",
      "path": "12"
    },
    "3455": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "3456": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "POP",
      "path": "12"
    },
    "3457": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "POP",
      "path": "12"
    },
    "3458": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "POP",
      "path": "12"
    },
    "3459": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "POP",
      "path": "12"
    },
    "3460": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x40"
    },
    "3462": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "MLOAD",
      "path": "12"
    },
    "3463": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "RETURNDATASIZE",
      "path": "12"
    },
    "3464": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x1F"
    },
    "3466": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "NOT",
      "path": "12"
    },
    "3467": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x1F"
    },
    "3469": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "DUP3",
      "path": "12"
    },
    "3470": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "ADD",
      "path": "12"
    },
    "3471": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "AND",
      "path": "12"
    },
    "3472": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "DUP3",
      "path": "12"
    },
    "3473": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "ADD",
      "path": "12"
    },
    "3474": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3475": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x40"
    },
    "3477": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "MSTORE",
      "path": "12"
    },
    "3478": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "POP",
      "path": "12"
    },
    "3479": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3480": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "ADD",
      "path": "12"
    },
    "3481": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3482": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xDA3"
    },
    "3485": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "SWAP2",
      "path": "12"
    },
    "3486": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3487": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0x19FC"
    },
    "3490": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "jump": "i",
      "offset": [
        1894,
        1946
      ],
      "op": "JUMP",
      "path": "12"
    },
    "3491": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1894,
        1946
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "3492": {
      "op": "POP"
    },
    "3493": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x40"
    },
    "3495": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3496": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "MLOAD",
      "path": "12"
    },
    "3497": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1998,
        1999
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x2"
    },
    "3499": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3500": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "DUP3",
      "path": "12"
    },
    "3501": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "MSTORE",
      "path": "12"
    },
    "3502": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x60"
    },
    "3504": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "DUP3",
      "path": "12"
    },
    "3505": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "ADD",
      "path": "12"
    },
    "3506": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "DUP4",
      "path": "12"
    },
    "3507": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "MSTORE",
      "path": "12"
    },
    "3508": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1960,
        1981
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x0"
    },
    "3510": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1960,
        1981
      ],
      "op": "SWAP3",
      "path": "12"
    },
    "3511": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x20"
    },
    "3513": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "DUP4",
      "path": "12"
    },
    "3514": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "ADD",
      "path": "12"
    },
    "3515": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3516": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3517": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "CALLDATASIZE",
      "path": "12"
    },
    "3518": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "DUP4",
      "path": "12"
    },
    "3519": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "CALLDATACOPY",
      "path": "12"
    },
    "3520": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "ADD",
      "path": "12"
    },
    "3521": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3522": {
      "op": "POP"
    },
    "3523": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1984,
        2000
      ],
      "op": "POP",
      "path": "12"
    },
    "3524": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1960,
        2000
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3525": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1960,
        2000
      ],
      "op": "POP",
      "path": "12"
    },
    "3526": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2032,
        2040
      ],
      "op": "DUP6",
      "path": "12",
      "statement": 42
    },
    "3527": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2018
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3528": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2019,
        2020
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x0"
    },
    "3530": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2021
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3531": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2021
      ],
      "op": "MLOAD",
      "path": "12"
    },
    "3532": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2021
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3533": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2021
      ],
      "op": "LT",
      "path": "12"
    },
    "3534": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2021
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xDD9"
    },
    "3537": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2021
      ],
      "op": "JUMPI",
      "path": "12"
    },
    "3538": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2021
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xDD9"
    },
    "3541": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2021
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0x1734"
    },
    "3544": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "jump": "i",
      "offset": [
        2014,
        2021
      ],
      "op": "JUMP",
      "path": "12"
    },
    "3545": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2021
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "3546": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2021
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x20"
    },
    "3548": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2021
      ],
      "op": "MUL",
      "path": "12"
    },
    "3549": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2021
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x20"
    },
    "3551": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2021
      ],
      "op": "ADD",
      "path": "12"
    },
    "3552": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2021
      ],
      "op": "ADD",
      "path": "12"
    },
    "3553": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2041
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3554": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3556": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3558": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3560": {
      "op": "SHL"
    },
    "3561": {
      "op": "SUB"
    },
    "3562": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2041
      ],
      "op": "AND",
      "path": "12"
    },
    "3563": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2041
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3564": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2041
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3565": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3567": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3569": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3571": {
      "op": "SHL"
    },
    "3572": {
      "op": "SUB"
    },
    "3573": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2041
      ],
      "op": "AND",
      "path": "12"
    },
    "3574": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2041
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3575": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2041
      ],
      "op": "MSTORE",
      "path": "12"
    },
    "3576": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2041
      ],
      "op": "POP",
      "path": "12"
    },
    "3577": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2014,
        2041
      ],
      "op": "POP",
      "path": "12"
    },
    "3578": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2073,
        2082
      ],
      "op": "DUP5",
      "path": "12",
      "statement": 43
    },
    "3579": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2059
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3580": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2060,
        2061
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x1"
    },
    "3582": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2062
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3583": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2062
      ],
      "op": "MLOAD",
      "path": "12"
    },
    "3584": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2062
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3585": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2062
      ],
      "op": "LT",
      "path": "12"
    },
    "3586": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2062
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xE0D"
    },
    "3589": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2062
      ],
      "op": "JUMPI",
      "path": "12"
    },
    "3590": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2062
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xE0D"
    },
    "3593": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2062
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0x1734"
    },
    "3596": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "jump": "i",
      "offset": [
        2055,
        2062
      ],
      "op": "JUMP",
      "path": "12"
    },
    "3597": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2062
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "3598": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3600": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3602": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3604": {
      "op": "SHL"
    },
    "3605": {
      "op": "SUB"
    },
    "3606": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2083
      ],
      "op": "SWAP3",
      "path": "12"
    },
    "3607": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2083
      ],
      "op": "DUP4",
      "path": "12"
    },
    "3608": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2083
      ],
      "op": "AND",
      "path": "12"
    },
    "3609": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2062
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x20"
    },
    "3611": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2062
      ],
      "op": "SWAP2",
      "path": "12"
    },
    "3612": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2062
      ],
      "op": "DUP3",
      "path": "12"
    },
    "3613": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2062
      ],
      "op": "MUL",
      "path": "12"
    },
    "3614": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2062
      ],
      "op": "SWAP3",
      "path": "12"
    },
    "3615": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2062
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3616": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2062
      ],
      "op": "SWAP3",
      "path": "12"
    },
    "3617": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2062
      ],
      "op": "ADD",
      "path": "12"
    },
    "3618": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2062
      ],
      "op": "ADD",
      "path": "12"
    },
    "3619": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2055,
        2083
      ],
      "op": "MSTORE",
      "path": "12"
    },
    "3620": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2111
      ],
      "op": "PUSH1",
      "path": "12",
      "statement": 44,
      "value": "0x2"
    },
    "3622": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2111
      ],
      "op": "SLOAD",
      "path": "12"
    },
    "3623": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x40"
    },
    "3625": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "MLOAD",
      "path": "12"
    },
    "3626": {
      "op": "PUSH4",
      "value": "0x38ED1739"
    },
    "3631": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3633": {
      "op": "SHL"
    },
    "3634": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3635": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "MSTORE",
      "path": "12"
    },
    "3636": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2111
      ],
      "op": "SWAP2",
      "path": "12"
    },
    "3637": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2111
      ],
      "op": "AND",
      "path": "12"
    },
    "3638": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2111
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3639": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2136
      ],
      "op": "PUSH4",
      "path": "12",
      "value": "0x38ED1739"
    },
    "3644": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2136
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3645": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xE53"
    },
    "3648": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3649": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2154,
        2163
      ],
      "op": "DUP8",
      "path": "12"
    },
    "3650": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2154,
        2163
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3651": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2111
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x0"
    },
    "3653": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2111
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3654": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2200,
        2204
      ],
      "op": "DUP7",
      "path": "12"
    },
    "3655": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2200,
        2204
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3656": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2222,
        2227
      ],
      "op": "DUP10",
      "path": "12"
    },
    "3657": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2222,
        2227
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3658": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2245,
        2260
      ],
      "op": "TIMESTAMP",
      "path": "12"
    },
    "3659": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2245,
        2260
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3660": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x4"
    },
    "3662": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "ADD",
      "path": "12"
    },
    "3663": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0x1A1E"
    },
    "3666": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "jump": "i",
      "offset": [
        2097,
        2274
      ],
      "op": "JUMP",
      "path": "12"
    },
    "3667": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "3668": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x0"
    },
    "3670": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x40"
    },
    "3672": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "MLOAD",
      "path": "12"
    },
    "3673": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3674": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "DUP4",
      "path": "12"
    },
    "3675": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "SUB",
      "path": "12"
    },
    "3676": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3677": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x0"
    },
    "3679": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "DUP8",
      "path": "12"
    },
    "3680": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3681": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "EXTCODESIZE",
      "path": "12"
    },
    "3682": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "ISZERO",
      "path": "12"
    },
    "3683": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3684": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "ISZERO",
      "path": "12"
    },
    "3685": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xE6D"
    },
    "3688": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "JUMPI",
      "path": "12"
    },
    "3689": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x0"
    },
    "3691": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3692": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "REVERT",
      "path": "12"
    },
    "3693": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "3694": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "POP",
      "path": "12"
    },
    "3695": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "GAS",
      "path": "12"
    },
    "3696": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "CALL",
      "path": "12"
    },
    "3697": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "ISZERO",
      "path": "12"
    },
    "3698": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3699": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "ISZERO",
      "path": "12"
    },
    "3700": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xE81"
    },
    "3703": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "JUMPI",
      "path": "12"
    },
    "3704": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "RETURNDATASIZE",
      "path": "12"
    },
    "3705": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x0"
    },
    "3707": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "DUP1",
      "path": "12"
    },
    "3708": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "RETURNDATACOPY",
      "path": "12"
    },
    "3709": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "RETURNDATASIZE",
      "path": "12"
    },
    "3710": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x0"
    },
    "3712": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "REVERT",
      "path": "12"
    },
    "3713": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "3714": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "POP",
      "path": "12"
    },
    "3715": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "POP",
      "path": "12"
    },
    "3716": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "POP",
      "path": "12"
    },
    "3717": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "POP",
      "path": "12"
    },
    "3718": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x40"
    },
    "3720": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "MLOAD",
      "path": "12"
    },
    "3721": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "RETURNDATASIZE",
      "path": "12"
    },
    "3722": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x0"
    },
    "3724": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "DUP3",
      "path": "12"
    },
    "3725": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "RETURNDATACOPY",
      "path": "12"
    },
    "3726": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x1F"
    },
    "3728": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "RETURNDATASIZE",
      "path": "12"
    },
    "3729": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3730": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3731": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "ADD",
      "path": "12"
    },
    "3732": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3734": {
      "op": "NOT"
    },
    "3735": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "AND",
      "path": "12"
    },
    "3736": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "DUP3",
      "path": "12"
    },
    "3737": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "ADD",
      "path": "12"
    },
    "3738": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x40"
    },
    "3740": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "MSTORE",
      "path": "12"
    },
    "3741": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xEA9"
    },
    "3744": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "SWAP2",
      "path": "12"
    },
    "3745": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3746": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3747": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "ADD",
      "path": "12"
    },
    "3748": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "SWAP1",
      "path": "12"
    },
    "3749": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0x1A8F"
    },
    "3752": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "jump": "i",
      "offset": [
        2097,
        2274
      ],
      "op": "JUMP",
      "path": "12"
    },
    "3753": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2274
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "3754": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2275,
        2276
      ],
      "op": "PUSH1",
      "path": "12",
      "value": "0x1"
    },
    "3756": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2277
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3757": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2277
      ],
      "op": "MLOAD",
      "path": "12"
    },
    "3758": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2277
      ],
      "op": "DUP2",
      "path": "12"
    },
    "3759": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2277
      ],
      "op": "LT",
      "path": "12"
    },
    "3760": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2277
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xEBB"
    },
    "3763": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2277
      ],
      "op": "JUMPI",
      "path": "12"
    },
    "3764": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2277
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xEBB"
    },
    "3767": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2277
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0x1734"
    },
    "3770": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "jump": "i",
      "offset": [
        2097,
        2277
      ],
      "op": "JUMP",
      "path": "12"
    },
    "3771": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2097,
        2277
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "3772": {
      "op": "POP"
    },
    "3773": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2298,
        2302
      ],
      "op": "PUSH1",
      "path": "12",
      "statement": 45,
      "value": "0x1"
    },
    "3775": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2298,
        2302
      ],
      "op": "SWAP3",
      "path": "12"
    },
    "3776": {
      "op": "POP"
    },
    "3777": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2291,
        2302
      ],
      "op": "PUSH2",
      "path": "12",
      "value": "0xEC8"
    },
    "3780": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2291,
        2302
      ],
      "op": "SWAP2",
      "path": "12"
    },
    "3781": {
      "op": "POP"
    },
    "3782": {
      "op": "POP"
    },
    "3783": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        2291,
        2302
      ],
      "op": "JUMP",
      "path": "12"
    },
    "3784": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1821,
        2357
      ],
      "op": "JUMPDEST",
      "path": "12"
    },
    "3785": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1528,
        2363
      ],
      "op": "SWAP5",
      "path": "12"
    },
    "3786": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1528,
        2363
      ],
      "op": "SWAP4",
      "path": "12"
    },
    "3787": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1528,
        2363
      ],
      "op": "POP",
      "path": "12"
    },
    "3788": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1528,
        2363
      ],
      "op": "POP",
      "path": "12"
    },
    "3789": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1528,
        2363
      ],
      "op": "POP",
      "path": "12"
    },
    "3790": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "offset": [
        1528,
        2363
      ],
      "op": "POP",
      "path": "12"
    },
    "3791": {
      "fn": "ExchangeAdapter.swapExactTokensForTokens",
      "jump": "o",
      "offset": [
        1528,
        2363
      ],
      "op": "JUMP",
      "path": "12"
    },
    "3792": {
      "fn": "Trickle.getOrders",
      "offset": [
        9283,
        9718
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "3793": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3795": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3797": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3799": {
      "op": "SHL"
    },
    "3800": {
      "op": "SUB"
    },
    "3801": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9462
      ],
      "op": "DUP3",
      "path": "13"
    },
    "3802": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9462
      ],
      "op": "AND",
      "path": "13"
    },
    "3803": {
      "fn": "Trickle.getOrders",
      "offset": [
        9420,
        9437
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "3805": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9462
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "3806": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9462
      ],
      "op": "DUP2",
      "path": "13"
    },
    "3807": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9462
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "3808": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9455
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "3810": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9462
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "3812": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9462
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "3813": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9462
      ],
      "op": "DUP2",
      "path": "13"
    },
    "3814": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9462
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "3815": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9462
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "3817": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9462
      ],
      "op": "DUP1",
      "path": "13"
    },
    "3818": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9462
      ],
      "op": "DUP4",
      "path": "13"
    },
    "3819": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9462
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "3820": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9478
      ],
      "op": "DUP5",
      "path": "13"
    },
    "3821": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9478
      ],
      "op": "DUP5",
      "path": "13"
    },
    "3822": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9478
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "3823": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9478
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "3824": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9478
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "3825": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9478
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "3826": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9478
      ],
      "op": "DUP2",
      "path": "13"
    },
    "3827": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9478
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "3828": {
      "fn": "Trickle.getOrders",
      "offset": [
        9388,
        9404
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x60"
    },
    "3830": {
      "fn": "Trickle.getOrders",
      "offset": [
        9388,
        9404
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "3831": {
      "fn": "Trickle.getOrders",
      "offset": [
        9420,
        9437
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "3832": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9487
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xF00"
    },
    "3835": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9487
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "3836": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9485
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x109F"
    },
    "3839": {
      "fn": "Trickle.getOrders",
      "jump": "i",
      "offset": [
        9440,
        9487
      ],
      "op": "JUMP",
      "path": "13"
    },
    "3840": {
      "fn": "Trickle.getOrders",
      "offset": [
        9440,
        9487
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "3841": {
      "fn": "Trickle.getOrders",
      "offset": [
        9420,
        9487
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "3842": {
      "fn": "Trickle.getOrders",
      "offset": [
        9420,
        9487
      ],
      "op": "POP",
      "path": "13"
    },
    "3843": {
      "fn": "Trickle.getOrders",
      "offset": [
        9497,
        9525
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "3845": {
      "fn": "Trickle.getOrders",
      "offset": [
        9542,
        9551
      ],
      "op": "DUP2",
      "path": "13"
    },
    "3846": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "PUSH8",
      "path": "13",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3855": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "DUP2",
      "path": "13"
    },
    "3856": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "GT",
      "path": "13"
    },
    "3857": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "3858": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xF1D"
    },
    "3861": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "3862": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xF1D"
    },
    "3865": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x171E"
    },
    "3868": {
      "fn": "Trickle.getOrders",
      "jump": "i",
      "offset": [
        9528,
        9552
      ],
      "op": "JUMP",
      "path": "13"
    },
    "3869": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "3870": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "3872": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "3873": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "3874": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "DUP1",
      "path": "13"
    },
    "3875": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "DUP3",
      "path": "13"
    },
    "3876": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "3877": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "DUP1",
      "path": "13"
    },
    "3878": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "3880": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "MUL",
      "path": "13"
    },
    "3881": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "3883": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "ADD",
      "path": "13"
    },
    "3884": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "DUP3",
      "path": "13"
    },
    "3885": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "ADD",
      "path": "13"
    },
    "3886": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "3888": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "3889": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "DUP1",
      "path": "13"
    },
    "3890": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "3891": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xF46"
    },
    "3894": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "3895": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "DUP2",
      "path": "13"
    },
    "3896": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "3898": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "ADD",
      "path": "13"
    },
    "3899": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "3901": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "DUP3",
      "path": "13"
    },
    "3902": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "MUL",
      "path": "13"
    },
    "3903": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "DUP1",
      "path": "13"
    },
    "3904": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "CALLDATASIZE",
      "path": "13"
    },
    "3905": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "DUP4",
      "path": "13"
    },
    "3906": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "CALLDATACOPY",
      "path": "13"
    },
    "3907": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "ADD",
      "path": "13"
    },
    "3908": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "3909": {
      "op": "POP"
    },
    "3910": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "3911": {
      "fn": "Trickle.getOrders",
      "offset": [
        9528,
        9552
      ],
      "op": "POP",
      "path": "13"
    },
    "3912": {
      "fn": "Trickle.getOrders",
      "offset": [
        9497,
        9552
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "3913": {
      "fn": "Trickle.getOrders",
      "offset": [
        9497,
        9552
      ],
      "op": "POP",
      "path": "13"
    },
    "3914": {
      "fn": "Trickle.getOrders",
      "offset": [
        9567,
        9576
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "3916": {
      "fn": "Trickle.getOrders",
      "offset": [
        9562,
        9684
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "3917": {
      "fn": "Trickle.getOrders",
      "offset": [
        9582,
        9591
      ],
      "op": "DUP3",
      "path": "13"
    },
    "3918": {
      "fn": "Trickle.getOrders",
      "offset": [
        9578,
        9579
      ],
      "op": "DUP2",
      "path": "13"
    },
    "3919": {
      "fn": "Trickle.getOrders",
      "offset": [
        9578,
        9591
      ],
      "op": "LT",
      "path": "13"
    },
    "3920": {
      "fn": "Trickle.getOrders",
      "offset": [
        9562,
        9684
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "3921": {
      "fn": "Trickle.getOrders",
      "offset": [
        9562,
        9684
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xFB0"
    },
    "3924": {
      "fn": "Trickle.getOrders",
      "offset": [
        9562,
        9684
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "3925": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3927": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3929": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3931": {
      "op": "SHL"
    },
    "3932": {
      "op": "SUB"
    },
    "3933": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9651
      ],
      "op": "DUP7",
      "path": "13",
      "statement": 46
    },
    "3934": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9651
      ],
      "op": "AND",
      "path": "13"
    },
    "3935": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9651
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "3937": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9651
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "3938": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9651
      ],
      "op": "DUP2",
      "path": "13"
    },
    "3939": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9651
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "3940": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9644
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "3942": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9651
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "3944": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9651
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "3945": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9651
      ],
      "op": "DUP2",
      "path": "13"
    },
    "3946": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9651
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "3947": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9651
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "3949": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9651
      ],
      "op": "DUP1",
      "path": "13"
    },
    "3950": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9651
      ],
      "op": "DUP4",
      "path": "13"
    },
    "3951": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9651
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "3952": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9667
      ],
      "op": "DUP9",
      "path": "13"
    },
    "3953": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9667
      ],
      "op": "DUP5",
      "path": "13"
    },
    "3954": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9667
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "3955": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9667
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "3956": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9667
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "3957": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9667
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "3958": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9667
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "3959": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9667
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "3960": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9673
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xF81"
    },
    "3963": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9673
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "3964": {
      "fn": "Trickle.getOrders",
      "offset": [
        9671,
        9672
      ],
      "op": "DUP3",
      "path": "13"
    },
    "3965": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9670
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x10A9"
    },
    "3968": {
      "fn": "Trickle.getOrders",
      "jump": "i",
      "offset": [
        9629,
        9673
      ],
      "op": "JUMP",
      "path": "13"
    },
    "3969": {
      "fn": "Trickle.getOrders",
      "offset": [
        9629,
        9673
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "3970": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9623
      ],
      "op": "DUP3",
      "path": "13"
    },
    "3971": {
      "fn": "Trickle.getOrders",
      "offset": [
        9624,
        9625
      ],
      "op": "DUP3",
      "path": "13"
    },
    "3972": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9626
      ],
      "op": "DUP2",
      "path": "13"
    },
    "3973": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9626
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "3974": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9626
      ],
      "op": "DUP2",
      "path": "13"
    },
    "3975": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9626
      ],
      "op": "LT",
      "path": "13"
    },
    "3976": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9626
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xF93"
    },
    "3979": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9626
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "3980": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9626
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xF93"
    },
    "3983": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9626
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1734"
    },
    "3986": {
      "fn": "Trickle.getOrders",
      "jump": "i",
      "offset": [
        9612,
        9626
      ],
      "op": "JUMP",
      "path": "13"
    },
    "3987": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9626
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "3988": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9626
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "3990": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9626
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "3991": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9626
      ],
      "op": "DUP2",
      "path": "13"
    },
    "3992": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9626
      ],
      "op": "MUL",
      "path": "13"
    },
    "3993": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9626
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "3994": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9626
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "3995": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9626
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "3996": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9626
      ],
      "op": "ADD",
      "path": "13"
    },
    "3997": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9626
      ],
      "op": "ADD",
      "path": "13"
    },
    "3998": {
      "fn": "Trickle.getOrders",
      "offset": [
        9612,
        9673
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "3999": {
      "fn": "Trickle.getOrders",
      "offset": [
        9593,
        9596
      ],
      "op": "DUP1",
      "path": "13",
      "statement": 47
    },
    "4000": {
      "fn": "Trickle.getOrders",
      "offset": [
        9593,
        9596
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xFA8"
    },
    "4003": {
      "fn": "Trickle.getOrders",
      "offset": [
        9593,
        9596
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4004": {
      "fn": "Trickle.getOrders",
      "offset": [
        9593,
        9596
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1760"
    },
    "4007": {
      "fn": "Trickle.getOrders",
      "jump": "i",
      "offset": [
        9593,
        9596
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4008": {
      "fn": "Trickle.getOrders",
      "offset": [
        9593,
        9596
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4009": {
      "fn": "Trickle.getOrders",
      "offset": [
        9593,
        9596
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "4010": {
      "fn": "Trickle.getOrders",
      "offset": [
        9593,
        9596
      ],
      "op": "POP",
      "path": "13"
    },
    "4011": {
      "fn": "Trickle.getOrders",
      "offset": [
        9593,
        9596
      ],
      "op": "POP",
      "path": "13"
    },
    "4012": {
      "fn": "Trickle.getOrders",
      "offset": [
        9562,
        9684
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xF4C"
    },
    "4015": {
      "fn": "Trickle.getOrders",
      "offset": [
        9562,
        9684
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4016": {
      "fn": "Trickle.getOrders",
      "offset": [
        9562,
        9684
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4017": {
      "op": "POP"
    },
    "4018": {
      "fn": "Trickle.getOrders",
      "offset": [
        9700,
        9711
      ],
      "op": "SWAP5",
      "path": "13",
      "statement": 48
    },
    "4019": {
      "fn": "Trickle.getOrders",
      "offset": [
        9283,
        9718
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "4020": {
      "op": "POP"
    },
    "4021": {
      "op": "POP"
    },
    "4022": {
      "op": "POP"
    },
    "4023": {
      "op": "POP"
    },
    "4024": {
      "fn": "Trickle.getOrders",
      "jump": "o",
      "offset": [
        9283,
        9718
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4025": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4026": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4028": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4029": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4031": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4033": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4035": {
      "op": "SHL"
    },
    "4036": {
      "op": "SUB"
    },
    "4037": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "AND",
      "path": "0"
    },
    "4038": {
      "fn": "Context._msgSender",
      "offset": [
        666,
        676
      ],
      "op": "CALLER",
      "path": "5"
    },
    "4039": {
      "offset": [
        1185,
        1208
      ],
      "op": "EQ",
      "path": "0"
    },
    "4040": {
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1013"
    },
    "4043": {
      "offset": [
        1177,
        1245
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4044": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4046": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4047": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4051": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4053": {
      "op": "SHL"
    },
    "4054": {
      "offset": [
        1177,
        1245
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4055": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4056": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4058": {
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "4060": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4061": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "ADD",
      "path": "0"
    },
    "4062": {
      "op": "DUP2"
    },
    "4063": {
      "op": "SWAP1"
    },
    "4064": {
      "op": "MSTORE"
    },
    "4065": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4067": {
      "op": "DUP3"
    },
    "4068": {
      "op": "ADD"
    },
    "4069": {
      "op": "MSTORE"
    },
    "4070": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
    },
    "4103": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4105": {
      "op": "DUP3"
    },
    "4106": {
      "op": "ADD"
    },
    "4107": {
      "op": "MSTORE"
    },
    "4108": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4110": {
      "op": "ADD"
    },
    "4111": {
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x364"
    },
    "4114": {
      "op": "JUMP"
    },
    "4115": {
      "offset": [
        1177,
        1245
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4116": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4118": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4120": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4122": {
      "op": "SHL"
    },
    "4123": {
      "op": "SUB"
    },
    "4124": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1934,
        1956
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 49
    },
    "4125": {
      "branch": 103,
      "fn": "Ownable.transferOwnership",
      "offset": [
        1934,
        1956
      ],
      "op": "AND",
      "path": "0"
    },
    "4126": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1078"
    },
    "4129": {
      "branch": 103,
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4130": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4132": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4133": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4137": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4139": {
      "op": "SHL"
    },
    "4140": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4141": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4142": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4144": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "4146": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4147": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "ADD",
      "path": "0"
    },
    "4148": {
      "op": "MSTORE"
    },
    "4149": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "4151": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4153": {
      "op": "DUP3"
    },
    "4154": {
      "op": "ADD"
    },
    "4155": {
      "op": "MSTORE"
    },
    "4156": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
    },
    "4189": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4191": {
      "op": "DUP3"
    },
    "4192": {
      "op": "ADD"
    },
    "4193": {
      "op": "MSTORE"
    },
    "4194": {
      "op": "PUSH6",
      "value": "0x646472657373"
    },
    "4201": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "4203": {
      "op": "SHL"
    },
    "4204": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4206": {
      "op": "DUP3"
    },
    "4207": {
      "op": "ADD"
    },
    "4208": {
      "op": "MSTORE"
    },
    "4209": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "4211": {
      "op": "ADD"
    },
    "4212": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x364"
    },
    "4215": {
      "op": "JUMP"
    },
    "4216": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4217": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2009,
        2028
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 50,
      "value": "0x1081"
    },
    "4220": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2019,
        2027
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4221": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2009,
        2018
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x111F"
    },
    "4224": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        2009,
        2028
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4225": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2009,
        2028
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4226": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "POP",
      "path": "0"
    },
    "4227": {
      "fn": "Ownable.transferOwnership",
      "jump": "o",
      "offset": [
        1846,
        2035
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4228": {
      "fn": "EnumerableSet.contains",
      "offset": [
        5836,
        5974
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "4229": {
      "fn": "EnumerableSet.contains",
      "offset": [
        5916,
        5920
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "4231": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3786
      ],
      "op": "DUP2",
      "path": "8",
      "statement": 51
    },
    "4232": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3786
      ],
      "op": "DUP2",
      "path": "8"
    },
    "4233": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3786
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "4234": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3779
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "4236": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3779
      ],
      "op": "DUP4",
      "path": "8"
    },
    "4237": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3779
      ],
      "op": "ADD",
      "path": "8"
    },
    "4238": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3786
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "4240": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3786
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "4241": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3786
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "4243": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3786
      ],
      "op": "DUP2",
      "path": "8"
    },
    "4244": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3786
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "4245": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3786
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "4246": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3791
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "4247": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3791
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "4248": {
      "fn": "EnumerableSet.contains",
      "offset": [
        5939,
        5967
      ],
      "op": "JUMPDEST",
      "path": "8",
      "statement": 52
    },
    "4249": {
      "fn": "EnumerableSet.contains",
      "offset": [
        5932,
        5967
      ],
      "op": "SWAP4",
      "path": "8"
    },
    "4250": {
      "fn": "EnumerableSet.contains",
      "offset": [
        5836,
        5974
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "4251": {
      "op": "POP"
    },
    "4252": {
      "op": "POP"
    },
    "4253": {
      "op": "POP"
    },
    "4254": {
      "fn": "EnumerableSet.contains",
      "jump": "o",
      "offset": [
        5836,
        5974
      ],
      "op": "JUMP",
      "path": "8"
    },
    "4255": {
      "fn": "EnumerableSet.length",
      "offset": [
        6055,
        6170
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "4256": {
      "fn": "EnumerableSet.length",
      "offset": [
        6118,
        6125
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "4258": {
      "fn": "EnumerableSet.length",
      "offset": [
        6144,
        6163
      ],
      "op": "PUSH2",
      "path": "8",
      "statement": 53,
      "value": "0x3BC"
    },
    "4261": {
      "fn": "EnumerableSet.length",
      "offset": [
        6152,
        6155
      ],
      "op": "DUP3",
      "path": "8"
    },
    "4262": {
      "fn": "EnumerableSet._length",
      "offset": [
        3961,
        3979
      ],
      "op": "SLOAD",
      "path": "8",
      "statement": 54
    },
    "4263": {
      "fn": "EnumerableSet._length",
      "offset": [
        3961,
        3979
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "4264": {
      "fn": "EnumerableSet._length",
      "offset": [
        3879,
        3986
      ],
      "op": "JUMP",
      "path": "8"
    },
    "4265": {
      "fn": "EnumerableSet.at",
      "offset": [
        6512,
        6641
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "4266": {
      "fn": "EnumerableSet.at",
      "offset": [
        6586,
        6593
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "4268": {
      "fn": "EnumerableSet.at",
      "offset": [
        6612,
        6634
      ],
      "op": "PUSH2",
      "path": "8",
      "statement": 55,
      "value": "0x1098"
    },
    "4271": {
      "fn": "EnumerableSet.at",
      "offset": [
        6616,
        6619
      ],
      "op": "DUP4",
      "path": "8"
    },
    "4272": {
      "fn": "EnumerableSet.at",
      "offset": [
        6628,
        6633
      ],
      "op": "DUP4",
      "path": "8"
    },
    "4273": {
      "fn": "EnumerableSet.at",
      "offset": [
        6612,
        6615
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x117D"
    },
    "4276": {
      "fn": "EnumerableSet.at",
      "jump": "i",
      "offset": [
        6612,
        6634
      ],
      "op": "JUMP",
      "path": "8"
    },
    "4277": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12552,
        12991
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4278": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12680,
        12689
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "4280": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12675,
        12985
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4281": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12695,
        12711
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4282": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12695,
        12718
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "4283": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12691,
        12692
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4284": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12691,
        12718
      ],
      "op": "LT",
      "path": "13"
    },
    "4285": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12675,
        12985
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "4286": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12675,
        12985
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x110F"
    },
    "4289": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12675,
        12985
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "4290": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12739,
        12807
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "4292": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12810,
        12826
      ],
      "op": "DUP3",
      "path": "13"
    },
    "4293": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12827,
        12828
      ],
      "op": "DUP3",
      "path": "13"
    },
    "4294": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12810,
        12829
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4295": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12810,
        12829
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "4296": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12810,
        12829
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4297": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12810,
        12829
      ],
      "op": "LT",
      "path": "13"
    },
    "4298": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12810,
        12829
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x10D5"
    },
    "4301": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12810,
        12829
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "4302": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12810,
        12829
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x10D5"
    },
    "4305": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12810,
        12829
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1734"
    },
    "4308": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "jump": "i",
      "offset": [
        12810,
        12829
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4309": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12810,
        12829
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4310": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12810,
        12829
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "4312": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12810,
        12829
      ],
      "op": "MUL",
      "path": "13"
    },
    "4313": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12810,
        12829
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "4315": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12810,
        12829
      ],
      "op": "ADD",
      "path": "13"
    },
    "4316": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12810,
        12829
      ],
      "op": "ADD",
      "path": "13"
    },
    "4317": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12810,
        12829
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "4318": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12739,
        12829
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "4319": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12739,
        12829
      ],
      "op": "POP",
      "path": "13"
    },
    "4320": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12895,
        12896
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "4322": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12887,
        12897
      ],
      "op": "DUP1",
      "path": "13"
    },
    "4323": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12887,
        12897
      ],
      "op": "SHL",
      "path": "13"
    },
    "4324": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12847,
        12869
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4325": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12847,
        12883
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "4327": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12847,
        12883
      ],
      "op": "ADD",
      "path": "13"
    },
    "4328": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12847,
        12883
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "4329": {
      "branch": 94,
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12847,
        12897
      ],
      "op": "EQ",
      "path": "13"
    },
    "4330": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12843,
        12904
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "4331": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12843,
        12904
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x10F3"
    },
    "4334": {
      "branch": 94,
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12843,
        12904
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "4335": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12899,
        12904
      ],
      "op": "POP",
      "path": "13",
      "statement": 56
    },
    "4336": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12675,
        12985
      ],
      "op": "POP",
      "path": "13"
    },
    "4337": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12552,
        12991
      ],
      "op": "POP",
      "path": "13"
    },
    "4338": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "jump": "o",
      "offset": [
        12552,
        12991
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4339": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12843,
        12904
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4340": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12918,
        12974
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 57,
      "value": "0x10FC"
    },
    "4343": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12951,
        12973
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4344": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12918,
        12950
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x11A7"
    },
    "4347": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "jump": "i",
      "offset": [
        12918,
        12974
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4348": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12918,
        12974
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4349": {
      "op": "POP"
    },
    "4350": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12720,
        12723
      ],
      "op": "DUP1",
      "path": "13",
      "statement": 58
    },
    "4351": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12720,
        12723
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1107"
    },
    "4354": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12720,
        12723
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4355": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12720,
        12723
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1760"
    },
    "4358": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "jump": "i",
      "offset": [
        12720,
        12723
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4359": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12720,
        12723
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4360": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12720,
        12723
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "4361": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12720,
        12723
      ],
      "op": "POP",
      "path": "13"
    },
    "4362": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12720,
        12723
      ],
      "op": "POP",
      "path": "13"
    },
    "4363": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12675,
        12985
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x10B8"
    },
    "4366": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12675,
        12985
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4367": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12675,
        12985
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4368": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12675,
        12985
      ],
      "op": "POP",
      "path": "13"
    },
    "4369": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "offset": [
        12552,
        12991
      ],
      "op": "POP",
      "path": "13"
    },
    "4370": {
      "fn": "Trickle._executeOrdersForAllTokenPairs",
      "jump": "o",
      "offset": [
        12552,
        12991
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4371": {
      "fn": "EnumerableSet.add",
      "offset": [
        5335,
        5458
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "4372": {
      "fn": "EnumerableSet.add",
      "offset": [
        5405,
        5409
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "4374": {
      "fn": "EnumerableSet.add",
      "offset": [
        5428,
        5451
      ],
      "op": "PUSH2",
      "path": "8",
      "statement": 59,
      "value": "0x1098"
    },
    "4377": {
      "fn": "EnumerableSet.add",
      "offset": [
        5433,
        5436
      ],
      "op": "DUP4",
      "path": "8"
    },
    "4378": {
      "fn": "EnumerableSet.add",
      "offset": [
        5445,
        5450
      ],
      "op": "DUP4",
      "path": "8"
    },
    "4379": {
      "fn": "EnumerableSet.add",
      "offset": [
        5428,
        5432
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1344"
    },
    "4382": {
      "fn": "EnumerableSet.add",
      "jump": "i",
      "offset": [
        5428,
        5451
      ],
      "op": "JUMP",
      "path": "8"
    },
    "4383": {
      "fn": "Ownable._setOwner",
      "offset": [
        2041,
        2210
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4384": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4386": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4387": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4388": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4390": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4392": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4394": {
      "op": "SHL"
    },
    "4395": {
      "op": "SUB"
    },
    "4396": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 60
    },
    "4397": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4398": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "AND",
      "path": "0"
    },
    "4399": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4401": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4403": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4405": {
      "op": "SHL"
    },
    "4406": {
      "op": "SUB"
    },
    "4407": {
      "op": "NOT"
    },
    "4408": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4409": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "AND",
      "path": "0"
    },
    "4410": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4411": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "OR",
      "path": "0"
    },
    "4412": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4413": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "4414": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "4415": {
      "fn": "Ownable._setOwner",
      "offset": [
        2163,
        2203
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 61,
      "value": "0x40"
    },
    "4417": {
      "fn": "Ownable._setOwner",
      "offset": [
        2163,
        2203
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4418": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4419": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "AND",
      "path": "0"
    },
    "4420": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4421": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4422": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4423": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4424": {
      "fn": "Ownable._setOwner",
      "offset": [
        2163,
        2203
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "4457": {
      "fn": "Ownable._setOwner",
      "offset": [
        2163,
        2203
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4458": {
      "fn": "Ownable._setOwner",
      "offset": [
        2096,
        2112
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4460": {
      "fn": "Ownable._setOwner",
      "offset": [
        2096,
        2112
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4461": {
      "fn": "Ownable._setOwner",
      "offset": [
        2163,
        2203
      ],
      "op": "LOG3",
      "path": "0"
    },
    "4462": {
      "fn": "Ownable._setOwner",
      "offset": [
        2086,
        2210
      ],
      "op": "POP",
      "path": "0"
    },
    "4463": {
      "fn": "Ownable._setOwner",
      "offset": [
        2041,
        2210
      ],
      "op": "POP",
      "path": "0"
    },
    "4464": {
      "fn": "Ownable._setOwner",
      "jump": "o",
      "offset": [
        2041,
        2210
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4465": {
      "fn": "EnumerableSet.remove",
      "offset": [
        5626,
        5755
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "4466": {
      "fn": "EnumerableSet.remove",
      "offset": [
        5699,
        5703
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "4468": {
      "fn": "EnumerableSet.remove",
      "offset": [
        5722,
        5748
      ],
      "op": "PUSH2",
      "path": "8",
      "statement": 62,
      "value": "0x1098"
    },
    "4471": {
      "fn": "EnumerableSet.remove",
      "offset": [
        5730,
        5733
      ],
      "op": "DUP4",
      "path": "8"
    },
    "4472": {
      "fn": "EnumerableSet.remove",
      "offset": [
        5742,
        5747
      ],
      "op": "DUP4",
      "path": "8"
    },
    "4473": {
      "fn": "EnumerableSet.remove",
      "offset": [
        5722,
        5729
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1393"
    },
    "4476": {
      "fn": "EnumerableSet.remove",
      "jump": "i",
      "offset": [
        5722,
        5748
      ],
      "op": "JUMP",
      "path": "8"
    },
    "4477": {
      "fn": "EnumerableSet._at",
      "offset": [
        4328,
        4446
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "4478": {
      "fn": "EnumerableSet._at",
      "offset": [
        4395,
        4402
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "4480": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4424
      ],
      "op": "DUP3",
      "path": "8",
      "statement": 63
    },
    "4481": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4432
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "4483": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4432
      ],
      "op": "ADD",
      "path": "8"
    },
    "4484": {
      "fn": "EnumerableSet._at",
      "offset": [
        4433,
        4438
      ],
      "op": "DUP3",
      "path": "8"
    },
    "4485": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4439
      ],
      "op": "DUP2",
      "path": "8"
    },
    "4486": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4439
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "4487": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4439
      ],
      "op": "DUP2",
      "path": "8"
    },
    "4488": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4439
      ],
      "op": "LT",
      "path": "8"
    },
    "4489": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4439
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1194"
    },
    "4492": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4439
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "4493": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4439
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1194"
    },
    "4496": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4439
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1734"
    },
    "4499": {
      "fn": "EnumerableSet._at",
      "jump": "i",
      "offset": [
        4421,
        4439
      ],
      "op": "JUMP",
      "path": "8"
    },
    "4500": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4439
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "4501": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4439
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "4502": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4439
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "4504": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4439
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "4505": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4439
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "4507": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4439
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "4509": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4439
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "4510": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4439
      ],
      "op": "ADD",
      "path": "8"
    },
    "4511": {
      "fn": "EnumerableSet._at",
      "offset": [
        4421,
        4439
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "4512": {
      "fn": "EnumerableSet._at",
      "offset": [
        4414,
        4439
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "4513": {
      "fn": "EnumerableSet._at",
      "offset": [
        4414,
        4439
      ],
      "op": "POP",
      "path": "8"
    },
    "4514": {
      "fn": "EnumerableSet._at",
      "offset": [
        4328,
        4446
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "4515": {
      "fn": "EnumerableSet._at",
      "offset": [
        4328,
        4446
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "4516": {
      "fn": "EnumerableSet._at",
      "offset": [
        4328,
        4446
      ],
      "op": "POP",
      "path": "8"
    },
    "4517": {
      "fn": "EnumerableSet._at",
      "offset": [
        4328,
        4446
      ],
      "op": "POP",
      "path": "8"
    },
    "4518": {
      "fn": "EnumerableSet._at",
      "jump": "o",
      "offset": [
        4328,
        4446
      ],
      "op": "JUMP",
      "path": "8"
    },
    "4519": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13202,
        14875
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4520": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13326,
        13346
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "4522": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13326,
        13346
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4523": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13326,
        13346
      ],
      "op": "ADD",
      "path": "13"
    },
    "4524": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13326,
        13346
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "4525": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13326,
        13353
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "4526": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13322,
        13367
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x11B4"
    },
    "4529": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13322,
        13367
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "4530": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13202,
        14875
      ],
      "op": "POP",
      "path": "13"
    },
    "4531": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "jump": "o",
      "offset": [
        13202,
        14875
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4532": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13322,
        13367
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4533": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13412,
        13439
      ],
      "op": "DUP1",
      "path": "13"
    },
    "4534": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13412,
        13439
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "4535": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13381,
        13440
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x11C2"
    },
    "4538": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13381,
        13440
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "4539": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13381,
        13402
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x6"
    },
    "4541": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13381,
        13402
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "4542": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13381,
        13411
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1084"
    },
    "4545": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "jump": "i",
      "offset": [
        13381,
        13440
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4546": {
      "branch": 95,
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13381,
        13440
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4547": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13376,
        13461
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x11C9"
    },
    "4550": {
      "branch": 95,
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13376,
        13461
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "4551": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13202,
        14875
      ],
      "op": "POP",
      "path": "13"
    },
    "4552": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "jump": "o",
      "offset": [
        13202,
        14875
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4553": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13376,
        13461
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4554": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13512,
        13539
      ],
      "op": "DUP1",
      "path": "13"
    },
    "4555": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13512,
        13539
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "4556": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13471,
        13498
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "4558": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13501,
        13540
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "4559": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13501,
        13540
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4560": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13501,
        13540
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "4561": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13501,
        13511
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x5"
    },
    "4563": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13501,
        13540
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "4565": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13501,
        13540
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "4566": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13501,
        13540
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "4568": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13501,
        13540
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4569": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13501,
        13540
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "4570": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13576,
        13595
      ],
      "op": "DUP1",
      "path": "13"
    },
    "4571": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13576,
        13595
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "4572": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13576,
        13595
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "4574": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13631,
        13649
      ],
      "op": "DUP3",
      "path": "13"
    },
    "4575": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13631,
        13649
      ],
      "op": "ADD",
      "path": "13"
    },
    "4576": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13631,
        13649
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "4577": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13501,
        13540
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "4578": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13501,
        13540
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "4579": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4581": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4583": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4585": {
      "op": "SHL"
    },
    "4586": {
      "op": "SUB"
    },
    "4587": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13576,
        13595
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "4588": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13576,
        13595
      ],
      "op": "DUP3",
      "path": "13"
    },
    "4589": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13576,
        13595
      ],
      "op": "AND",
      "path": "13"
    },
    "4590": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13576,
        13595
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "4591": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13631,
        13649
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "4592": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13631,
        13649
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "4593": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13631,
        13649
      ],
      "op": "AND",
      "path": "13"
    },
    "4594": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13631,
        13649
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "4595": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13661,
        14869
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4596": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13681,
        13694
      ],
      "op": "DUP5",
      "path": "13"
    },
    "4597": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13681,
        13701
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "4599": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13681,
        13701
      ],
      "op": "ADD",
      "path": "13"
    },
    "4600": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13681,
        13701
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "4601": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13681,
        13708
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "4602": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13677,
        13678
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4603": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13677,
        13708
      ],
      "op": "LT",
      "path": "13"
    },
    "4604": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13661,
        14869
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "4605": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13661,
        14869
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x133D"
    },
    "4608": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13661,
        14869
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "4609": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13729,
        13746
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "4611": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13749,
        13762
      ],
      "op": "DUP6",
      "path": "13"
    },
    "4612": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13749,
        13769
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "4614": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13749,
        13769
      ],
      "op": "ADD",
      "path": "13"
    },
    "4615": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13749,
        13769
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "4616": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13770,
        13771
      ],
      "op": "DUP3",
      "path": "13"
    },
    "4617": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13749,
        13772
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4618": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13749,
        13772
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "4619": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13749,
        13772
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4620": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13749,
        13772
      ],
      "op": "LT",
      "path": "13"
    },
    "4621": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13749,
        13772
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1218"
    },
    "4624": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13749,
        13772
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "4625": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13749,
        13772
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1218"
    },
    "4628": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13749,
        13772
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1734"
    },
    "4631": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "jump": "i",
      "offset": [
        13749,
        13772
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4632": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13749,
        13772
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4633": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13749,
        13772
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "4635": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13749,
        13772
      ],
      "op": "MUL",
      "path": "13"
    },
    "4636": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13749,
        13772
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "4638": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13749,
        13772
      ],
      "op": "ADD",
      "path": "13"
    },
    "4639": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13749,
        13772
      ],
      "op": "ADD",
      "path": "13"
    },
    "4640": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13749,
        13772
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "4641": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13729,
        13772
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "4642": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13729,
        13772
      ],
      "op": "POP",
      "path": "13"
    },
    "4643": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13870,
        13871
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "4645": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13862,
        13872
      ],
      "op": "DUP1",
      "path": "13"
    },
    "4646": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13862,
        13872
      ],
      "op": "SHL",
      "path": "13"
    },
    "4647": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13849,
        13858
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4648": {
      "branch": 96,
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13849,
        13872
      ],
      "op": "EQ",
      "path": "13"
    },
    "4649": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13845,
        13879
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "4650": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13845,
        13879
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1233"
    },
    "4653": {
      "branch": 96,
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13845,
        13879
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "4654": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13874,
        13879
      ],
      "op": "POP",
      "path": "13",
      "statement": 64
    },
    "4655": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13874,
        13879
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x133D"
    },
    "4658": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13874,
        13879
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4659": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13845,
        13879
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4660": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13958,
        14004
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1240"
    },
    "4663": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13958,
        13984
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x3"
    },
    "4665": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13958,
        13984
      ],
      "op": "DUP7",
      "path": "13"
    },
    "4666": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13958,
        13984
      ],
      "op": "ADD",
      "path": "13"
    },
    "4667": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13994,
        14003
      ],
      "op": "DUP3",
      "path": "13"
    },
    "4668": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13958,
        13993
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1084"
    },
    "4671": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "jump": "i",
      "offset": [
        13958,
        14004
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4672": {
      "branch": 97,
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13958,
        14004
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4673": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13953,
        14011
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x124A"
    },
    "4676": {
      "branch": 97,
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13953,
        14011
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "4677": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14006,
        14011
      ],
      "op": "POP",
      "path": "13",
      "statement": 65
    },
    "4678": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14006,
        14011
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x133D"
    },
    "4681": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14006,
        14011
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4682": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13953,
        14011
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4683": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14026,
        14063
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "4685": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14066,
        14093
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4686": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14066,
        14093
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4687": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14066,
        14093
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "4688": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14066,
        14082
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x2"
    },
    "4690": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14066,
        14082
      ],
      "op": "DUP1",
      "path": "13"
    },
    "4691": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14066,
        14082
      ],
      "op": "DUP8",
      "path": "13"
    },
    "4692": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14066,
        14082
      ],
      "op": "ADD",
      "path": "13"
    },
    "4693": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14066,
        14093
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "4695": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14066,
        14093
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "4696": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14066,
        14093
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "4698": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14066,
        14093
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "4699": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14066,
        14093
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "4700": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14066,
        14093
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "4701": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14259,
        14282
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x3"
    },
    "4703": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14259,
        14282
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4704": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14259,
        14282
      ],
      "op": "ADD",
      "path": "13"
    },
    "4705": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14259,
        14282
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "4706": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14228,
        14256
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "4707": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14228,
        14256
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4708": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14228,
        14256
      ],
      "op": "ADD",
      "path": "13"
    },
    "4709": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14228,
        14256
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "4710": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14066,
        14093
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "4711": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14066,
        14093
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "4712": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14228,
        14282
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1270"
    },
    "4715": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14228,
        14282
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "4716": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14228,
        14282
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1944"
    },
    "4719": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "jump": "i",
      "offset": [
        14228,
        14282
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4720": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14228,
        14282
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4721": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14192,
        14207
      ],
      "op": "TIMESTAMP",
      "path": "13"
    },
    "4722": {
      "branch": 98,
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14192,
        14283
      ],
      "op": "GT",
      "path": "13"
    },
    "4723": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14171,
        14303
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x127D"
    },
    "4726": {
      "branch": 98,
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14171,
        14303
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "4727": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14298,
        14303
      ],
      "op": "POP",
      "path": "13",
      "statement": 66
    },
    "4728": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14298,
        14303
      ],
      "op": "POP",
      "path": "13"
    },
    "4729": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14298,
        14303
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x133D"
    },
    "4732": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14298,
        14303
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4733": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14171,
        14303
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4734": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14340,
        14365
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "4736": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14340,
        14365
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4737": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14340,
        14365
      ],
      "op": "ADD",
      "path": "13"
    },
    "4738": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14340,
        14365
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "4739": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14394,
        14413
      ],
      "op": "DUP2",
      "path": "13"
    },
    "4740": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14394,
        14413
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "4741": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4743": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4745": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4747": {
      "op": "SHL"
    },
    "4748": {
      "op": "SUB"
    },
    "4749": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14394,
        14413
      ],
      "op": "AND",
      "path": "13"
    },
    "4750": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14319,
        14337
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "4752": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14442,
        14583
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x129B"
    },
    "4755": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14484,
        14493
      ],
      "op": "DUP9",
      "path": "13"
    },
    "4756": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14511,
        14519
      ],
      "op": "DUP9",
      "path": "13"
    },
    "4757": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14340,
        14365
      ],
      "op": "DUP6",
      "path": "13"
    },
    "4758": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14394,
        14413
      ],
      "op": "DUP6",
      "path": "13"
    },
    "4759": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14442,
        14466
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xC19"
    },
    "4762": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "jump": "i",
      "offset": [
        14442,
        14583
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4763": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14442,
        14583
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4764": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14427,
        14583
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "4765": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14427,
        14583
      ],
      "op": "POP",
      "path": "13"
    },
    "4766": {
      "branch": 99,
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14601,
        14608
      ],
      "op": "DUP1",
      "path": "13"
    },
    "4767": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14597,
        14859
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "4768": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14597,
        14859
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x12E9"
    },
    "4771": {
      "branch": 99,
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14597,
        14859
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "4772": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14659,
        14674
      ],
      "op": "TIMESTAMP",
      "path": "13",
      "statement": 67
    },
    "4773": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14628,
        14656
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x2"
    },
    "4775": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14628,
        14656
      ],
      "op": "DUP6",
      "path": "13"
    },
    "4776": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14628,
        14656
      ],
      "op": "ADD",
      "path": "13"
    },
    "4777": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14628,
        14674
      ],
      "op": "SSTORE",
      "path": "13"
    },
    "4778": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14711,
        14738
      ],
      "op": "DUP10",
      "path": "13",
      "statement": 68
    },
    "4779": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14711,
        14738
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "4780": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14697,
        14750
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "4782": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14697,
        14750
      ],
      "op": "DUP1",
      "path": "13"
    },
    "4783": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14697,
        14750
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "4784": {
      "op": "SWAP2"
    },
    "4785": {
      "op": "DUP3"
    },
    "4786": {
      "op": "MSTORE"
    },
    "4787": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4789": {
      "op": "DUP3"
    },
    "4790": {
      "op": "ADD"
    },
    "4791": {
      "op": "DUP8"
    },
    "4792": {
      "op": "SWAP1"
    },
    "4793": {
      "op": "MSTORE"
    },
    "4794": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14697,
        14750
      ],
      "op": "PUSH32",
      "path": "13",
      "value": "0x5DB58C70037AA768B73C40C300AFD09C428BC4BF9E881D02EB2A5F0E6FA295F9"
    },
    "4827": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14697,
        14750
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "4828": {
      "op": "ADD"
    },
    "4829": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14697,
        14750
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "4831": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14697,
        14750
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "4832": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14697,
        14750
      ],
      "op": "DUP1",
      "path": "13"
    },
    "4833": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14697,
        14750
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "4834": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14697,
        14750
      ],
      "op": "SUB",
      "path": "13"
    },
    "4835": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14697,
        14750
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "4836": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14697,
        14750
      ],
      "op": "LOG1",
      "path": "13"
    },
    "4837": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14597,
        14859
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1325"
    },
    "4840": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14597,
        14859
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4841": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14597,
        14859
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4842": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14805,
        14832
      ],
      "op": "DUP10",
      "path": "13",
      "statement": 69
    },
    "4843": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14805,
        14832
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "4844": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14794,
        14844
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "4846": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14794,
        14844
      ],
      "op": "DUP1",
      "path": "13"
    },
    "4847": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14794,
        14844
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "4848": {
      "op": "SWAP2"
    },
    "4849": {
      "op": "DUP3"
    },
    "4850": {
      "op": "MSTORE"
    },
    "4851": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4853": {
      "op": "DUP3"
    },
    "4854": {
      "op": "ADD"
    },
    "4855": {
      "op": "DUP8"
    },
    "4856": {
      "op": "SWAP1"
    },
    "4857": {
      "op": "MSTORE"
    },
    "4858": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14794,
        14844
      ],
      "op": "PUSH32",
      "path": "13",
      "value": "0x26916B3AEE826C0F5BF6F8AFA7138F7DB313ADA074B6BE7BA10AC7B28CCF51C8"
    },
    "4891": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14794,
        14844
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "4892": {
      "op": "ADD"
    },
    "4893": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14794,
        14844
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "4895": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14794,
        14844
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "4896": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14794,
        14844
      ],
      "op": "DUP1",
      "path": "13"
    },
    "4897": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14794,
        14844
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "4898": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14794,
        14844
      ],
      "op": "SUB",
      "path": "13"
    },
    "4899": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14794,
        14844
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "4900": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14794,
        14844
      ],
      "op": "LOG1",
      "path": "13"
    },
    "4901": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        14597,
        14859
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4902": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13715,
        14869
      ],
      "op": "POP",
      "path": "13"
    },
    "4903": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13715,
        14869
      ],
      "op": "POP",
      "path": "13"
    },
    "4904": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13715,
        14869
      ],
      "op": "POP",
      "path": "13"
    },
    "4905": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13715,
        14869
      ],
      "op": "POP",
      "path": "13"
    },
    "4906": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13715,
        14869
      ],
      "op": "POP",
      "path": "13"
    },
    "4907": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13710,
        13713
      ],
      "op": "DUP1",
      "path": "13",
      "statement": 70
    },
    "4908": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13710,
        13713
      ],
      "op": "DUP1",
      "path": "13"
    },
    "4909": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13710,
        13713
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1335"
    },
    "4912": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13710,
        13713
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "4913": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13710,
        13713
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1760"
    },
    "4916": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "jump": "i",
      "offset": [
        13710,
        13713
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4917": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13710,
        13713
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4918": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13710,
        13713
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "4919": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13710,
        13713
      ],
      "op": "POP",
      "path": "13"
    },
    "4920": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13710,
        13713
      ],
      "op": "POP",
      "path": "13"
    },
    "4921": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13661,
        14869
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x11F3"
    },
    "4924": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13661,
        14869
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4925": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13661,
        14869
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "4926": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13661,
        14869
      ],
      "op": "POP",
      "path": "13"
    },
    "4927": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13312,
        14875
      ],
      "op": "POP",
      "path": "13"
    },
    "4928": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13312,
        14875
      ],
      "op": "POP",
      "path": "13"
    },
    "4929": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13312,
        14875
      ],
      "op": "POP",
      "path": "13"
    },
    "4930": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "offset": [
        13202,
        14875
      ],
      "op": "POP",
      "path": "13"
    },
    "4931": {
      "fn": "Trickle._executeOrdersForSingleTokenPair",
      "jump": "o",
      "offset": [
        13202,
        14875
      ],
      "op": "JUMP",
      "path": "13"
    },
    "4932": {
      "fn": "EnumerableSet._add",
      "offset": [
        1630,
        2034
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "4933": {
      "fn": "EnumerableSet._add",
      "offset": [
        1693,
        1697
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "4935": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3786
      ],
      "op": "DUP2",
      "path": "8"
    },
    "4936": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3786
      ],
      "op": "DUP2",
      "path": "8"
    },
    "4937": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3786
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "4938": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3779
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "4940": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3779
      ],
      "op": "DUP4",
      "path": "8"
    },
    "4941": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3779
      ],
      "op": "ADD",
      "path": "8"
    },
    "4942": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3786
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "4944": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3786
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "4945": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3786
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "4947": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3786
      ],
      "op": "DUP2",
      "path": "8"
    },
    "4948": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3786
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "4949": {
      "fn": "EnumerableSet._contains",
      "offset": [
        3767,
        3786
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "4950": {
      "fn": "EnumerableSet._add",
      "offset": [
        1709,
        2028
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x138B"
    },
    "4953": {
      "fn": "EnumerableSet._add",
      "offset": [
        1709,
        2028
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "4954": {
      "op": "POP"
    },
    "4955": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "DUP2",
      "path": "8",
      "statement": 71
    },
    "4956": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "4957": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "4959": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "DUP2",
      "path": "8"
    },
    "4960": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "DUP2",
      "path": "8"
    },
    "4961": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "ADD",
      "path": "8"
    },
    "4962": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "DUP5",
      "path": "8"
    },
    "4963": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "4964": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1762
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "4966": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "DUP5",
      "path": "8"
    },
    "4967": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "DUP2",
      "path": "8"
    },
    "4968": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "4969": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "4971": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "DUP1",
      "path": "8"
    },
    "4972": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "DUP3",
      "path": "8"
    },
    "4973": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "4974": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "4975": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "SWAP4",
      "path": "8"
    },
    "4976": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "ADD",
      "path": "8"
    },
    "4977": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "DUP5",
      "path": "8"
    },
    "4978": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "4979": {
      "fn": "EnumerableSet._add",
      "offset": [
        1751,
        1774
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "4980": {
      "fn": "EnumerableSet._add",
      "offset": [
        1931,
        1949
      ],
      "op": "DUP5",
      "path": "8",
      "statement": 72
    },
    "4981": {
      "fn": "EnumerableSet._add",
      "offset": [
        1931,
        1949
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "4982": {
      "fn": "EnumerableSet._add",
      "offset": [
        1909,
        1928
      ],
      "op": "DUP5",
      "path": "8"
    },
    "4983": {
      "fn": "EnumerableSet._add",
      "offset": [
        1909,
        1928
      ],
      "op": "DUP3",
      "path": "8"
    },
    "4984": {
      "fn": "EnumerableSet._add",
      "offset": [
        1909,
        1928
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "4985": {
      "fn": "EnumerableSet._add",
      "offset": [
        1909,
        1921
      ],
      "op": "DUP3",
      "path": "8"
    },
    "4986": {
      "fn": "EnumerableSet._add",
      "offset": [
        1909,
        1921
      ],
      "op": "DUP7",
      "path": "8"
    },
    "4987": {
      "fn": "EnumerableSet._add",
      "offset": [
        1909,
        1921
      ],
      "op": "ADD",
      "path": "8"
    },
    "4988": {
      "fn": "EnumerableSet._add",
      "offset": [
        1909,
        1928
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "4989": {
      "fn": "EnumerableSet._add",
      "offset": [
        1909,
        1928
      ],
      "op": "SWAP4",
      "path": "8"
    },
    "4990": {
      "fn": "EnumerableSet._add",
      "offset": [
        1909,
        1928
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "4991": {
      "fn": "EnumerableSet._add",
      "offset": [
        1909,
        1928
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "4993": {
      "fn": "EnumerableSet._add",
      "offset": [
        1909,
        1928
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "4994": {
      "fn": "EnumerableSet._add",
      "offset": [
        1909,
        1928
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "4995": {
      "fn": "EnumerableSet._add",
      "offset": [
        1909,
        1949
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "4996": {
      "fn": "EnumerableSet._add",
      "offset": [
        1909,
        1949
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "4997": {
      "fn": "EnumerableSet._add",
      "offset": [
        1909,
        1949
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "4998": {
      "fn": "EnumerableSet._add",
      "offset": [
        1909,
        1949
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "4999": {
      "fn": "EnumerableSet._add",
      "offset": [
        1963,
        1974
      ],
      "op": "PUSH2",
      "path": "8",
      "statement": 73,
      "value": "0x3BC"
    },
    "5002": {
      "fn": "EnumerableSet._add",
      "offset": [
        1963,
        1974
      ],
      "op": "JUMP",
      "path": "8"
    },
    "5003": {
      "fn": "EnumerableSet._add",
      "offset": [
        1709,
        2028
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "5004": {
      "op": "POP"
    },
    "5005": {
      "fn": "EnumerableSet._add",
      "offset": [
        2012,
        2017
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 74,
      "value": "0x0"
    },
    "5007": {
      "fn": "EnumerableSet._add",
      "offset": [
        2005,
        2017
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3BC"
    },
    "5010": {
      "fn": "EnumerableSet._add",
      "offset": [
        2005,
        2017
      ],
      "op": "JUMP",
      "path": "8"
    },
    "5011": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2202,
        3590
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "5012": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2268,
        2272
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "5014": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2405,
        2424
      ],
      "op": "DUP2",
      "path": "8"
    },
    "5015": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2405,
        2424
      ],
      "op": "DUP2",
      "path": "8"
    },
    "5016": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2405,
        2424
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "5017": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2405,
        2417
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "5019": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2405,
        2417
      ],
      "op": "DUP4",
      "path": "8"
    },
    "5020": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2405,
        2417
      ],
      "op": "ADD",
      "path": "8"
    },
    "5021": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2405,
        2424
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "5023": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2405,
        2424
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "5024": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2405,
        2424
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "5026": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2405,
        2424
      ],
      "op": "DUP2",
      "path": "8"
    },
    "5027": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2405,
        2424
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "5028": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2405,
        2424
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "5029": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2439,
        2454
      ],
      "op": "DUP1",
      "path": "8"
    },
    "5030": {
      "branch": 100,
      "fn": "EnumerableSet._remove",
      "offset": [
        2439,
        2454
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "5031": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2435,
        3584
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x147C"
    },
    "5034": {
      "branch": 100,
      "fn": "EnumerableSet._remove",
      "offset": [
        2435,
        3584
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "5035": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2808,
        2829
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "5037": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2832,
        2846
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x13B7"
    },
    "5040": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2845,
        2846
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "5042": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2832,
        2842
      ],
      "op": "DUP4",
      "path": "8"
    },
    "5043": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2832,
        2846
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1B20"
    },
    "5046": {
      "fn": "EnumerableSet._remove",
      "jump": "i",
      "offset": [
        2832,
        2846
      ],
      "op": "JUMP",
      "path": "8"
    },
    "5047": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2832,
        2846
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "5048": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2880,
        2898
      ],
      "op": "DUP6",
      "path": "8"
    },
    "5049": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2880,
        2898
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "5050": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2808,
        2846
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "5051": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2808,
        2846
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "5052": {
      "op": "POP"
    },
    "5053": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2860,
        2877
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "5055": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2860,
        2877
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "5056": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2880,
        2902
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x13CB"
    },
    "5059": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2880,
        2902
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "5060": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2901,
        2902
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "5062": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2901,
        2902
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "5063": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2880,
        2902
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1B20"
    },
    "5066": {
      "fn": "EnumerableSet._remove",
      "jump": "i",
      "offset": [
        2880,
        2902
      ],
      "op": "JUMP",
      "path": "8"
    },
    "5067": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2880,
        2902
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "5068": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2860,
        2902
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "5069": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2860,
        2902
      ],
      "op": "POP",
      "path": "8"
    },
    "5070": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2934,
        2947
      ],
      "op": "DUP2",
      "path": "8"
    },
    "5071": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2921,
        2930
      ],
      "op": "DUP2",
      "path": "8"
    },
    "5072": {
      "branch": 101,
      "fn": "EnumerableSet._remove",
      "offset": [
        2921,
        2947
      ],
      "op": "EQ",
      "path": "8"
    },
    "5073": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2917,
        3315
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1430"
    },
    "5076": {
      "branch": 101,
      "fn": "EnumerableSet._remove",
      "offset": [
        2917,
        3315
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "5077": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2967,
        2984
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "5079": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        2990
      ],
      "op": "DUP7",
      "path": "8"
    },
    "5080": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        2998
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "5082": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        2998
      ],
      "op": "ADD",
      "path": "8"
    },
    "5083": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2999,
        3008
      ],
      "op": "DUP3",
      "path": "8"
    },
    "5084": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        3009
      ],
      "op": "DUP2",
      "path": "8"
    },
    "5085": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        3009
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "5086": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        3009
      ],
      "op": "DUP2",
      "path": "8"
    },
    "5087": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        3009
      ],
      "op": "LT",
      "path": "8"
    },
    "5088": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        3009
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x13EB"
    },
    "5091": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        3009
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "5092": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        3009
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x13EB"
    },
    "5095": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        3009
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1734"
    },
    "5098": {
      "fn": "EnumerableSet._remove",
      "jump": "i",
      "offset": [
        2987,
        3009
      ],
      "op": "JUMP",
      "path": "8"
    },
    "5099": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        3009
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "5100": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        3009
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "5101": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        3009
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "5103": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        3009
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "5104": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        3009
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "5106": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        3009
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "5108": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        3009
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "5109": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        3009
      ],
      "op": "ADD",
      "path": "8"
    },
    "5110": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2987,
        3009
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "5111": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2967,
        3009
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "5112": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2967,
        3009
      ],
      "op": "POP",
      "path": "8"
    },
    "5113": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3138,
        3147
      ],
      "op": "DUP1",
      "path": "8",
      "statement": 75
    },
    "5114": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3112
      ],
      "op": "DUP8",
      "path": "8"
    },
    "5115": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3120
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "5117": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3120
      ],
      "op": "ADD",
      "path": "8"
    },
    "5118": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3121,
        3134
      ],
      "op": "DUP5",
      "path": "8"
    },
    "5119": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "DUP2",
      "path": "8"
    },
    "5120": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "5121": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "DUP2",
      "path": "8"
    },
    "5122": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "LT",
      "path": "8"
    },
    "5123": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x140E"
    },
    "5126": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "5127": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x140E"
    },
    "5130": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1734"
    },
    "5133": {
      "fn": "EnumerableSet._remove",
      "jump": "i",
      "offset": [
        3109,
        3135
      ],
      "op": "JUMP",
      "path": "8"
    },
    "5134": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "5135": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "5137": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "5138": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "DUP3",
      "path": "8"
    },
    "5139": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "5140": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "5142": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "DUP1",
      "path": "8"
    },
    "5143": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "DUP4",
      "path": "8"
    },
    "5144": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "5145": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "5146": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "5147": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3135
      ],
      "op": "ADD",
      "path": "8"
    },
    "5148": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3147
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "5149": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3147
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "5150": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3147
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "5151": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3109,
        3147
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "5152": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3221,
        3244
      ],
      "op": "SWAP2",
      "path": "8",
      "statement": 76
    },
    "5153": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3221,
        3244
      ],
      "op": "DUP3",
      "path": "8"
    },
    "5154": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3221,
        3244
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "5155": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3221,
        3233
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "5157": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3221,
        3233
      ],
      "op": "DUP9",
      "path": "8"
    },
    "5158": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3221,
        3233
      ],
      "op": "ADD",
      "path": "8"
    },
    "5159": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3221,
        3244
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "5160": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3221,
        3244
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "5161": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3221,
        3244
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "5163": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3221,
        3244
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "5164": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3221,
        3244
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "5165": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3221,
        3257
      ],
      "op": "DUP4",
      "path": "8"
    },
    "5166": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3221,
        3257
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "5167": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3221,
        3257
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "5168": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2917,
        3315
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "5169": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "DUP6",
      "path": "8",
      "statement": 77
    },
    "5170": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "5171": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3396
      ],
      "op": "DUP7",
      "path": "8"
    },
    "5172": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3396
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "5173": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "DUP1",
      "path": "8"
    },
    "5174": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1441"
    },
    "5177": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "5178": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1441"
    },
    "5181": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1B37"
    },
    "5184": {
      "fn": "EnumerableSet._remove",
      "jump": "i",
      "offset": [
        3393,
        3410
      ],
      "op": "JUMP",
      "path": "8"
    },
    "5185": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "5186": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "5188": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "5189": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "SUB",
      "path": "8"
    },
    "5190": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "DUP2",
      "path": "8"
    },
    "5191": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "DUP2",
      "path": "8"
    },
    "5192": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "5193": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "5195": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "5196": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "5198": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "5200": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "5201": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "ADD",
      "path": "8"
    },
    "5202": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "5204": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "5205": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "5206": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "5207": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3393,
        3410
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "5208": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3485,
        3488
      ],
      "op": "DUP6",
      "path": "8",
      "statement": 78
    },
    "5209": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3485,
        3497
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "5211": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3485,
        3497
      ],
      "op": "ADD",
      "path": "8"
    },
    "5212": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3485,
        3504
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "5214": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3498,
        3503
      ],
      "op": "DUP7",
      "path": "8"
    },
    "5215": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3485,
        3504
      ],
      "op": "DUP2",
      "path": "8"
    },
    "5216": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3485,
        3504
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "5217": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3485,
        3504
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "5219": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3485,
        3504
      ],
      "op": "ADD",
      "path": "8"
    },
    "5220": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3485,
        3504
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "5221": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3485,
        3504
      ],
      "op": "DUP2",
      "path": "8"
    },
    "5222": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3485,
        3504
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "5223": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3485,
        3504
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "5225": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3485,
        3504
      ],
      "op": "ADD",
      "path": "8"
    },
    "5226": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3485,
        3504
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "5228": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3485,
        3504
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "5229": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3478,
        3504
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "5231": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3478,
        3504
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "5232": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3478,
        3504
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "5233": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3526,
        3530
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 79,
      "value": "0x1"
    },
    "5235": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3519,
        3530
      ],
      "op": "SWAP4",
      "path": "8"
    },
    "5236": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3519,
        3530
      ],
      "op": "POP",
      "path": "8"
    },
    "5237": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3519,
        3530
      ],
      "op": "POP",
      "path": "8"
    },
    "5238": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3519,
        3530
      ],
      "op": "POP",
      "path": "8"
    },
    "5239": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3519,
        3530
      ],
      "op": "POP",
      "path": "8"
    },
    "5240": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3519,
        3530
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3BC"
    },
    "5243": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3519,
        3530
      ],
      "op": "JUMP",
      "path": "8"
    },
    "5244": {
      "fn": "EnumerableSet._remove",
      "offset": [
        2435,
        3584
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "5245": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3568,
        3573
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 80,
      "value": "0x0"
    },
    "5247": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3561,
        3573
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "5248": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3561,
        3573
      ],
      "op": "POP",
      "path": "8"
    },
    "5249": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3561,
        3573
      ],
      "op": "POP",
      "path": "8"
    },
    "5250": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3561,
        3573
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3BC"
    },
    "5253": {
      "fn": "EnumerableSet._remove",
      "offset": [
        3561,
        3573
      ],
      "op": "JUMP",
      "path": "8"
    },
    "5254": {
      "op": "JUMPDEST"
    },
    "5255": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5257": {
      "op": "DUP1"
    },
    "5258": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5260": {
      "op": "DUP4"
    },
    "5261": {
      "op": "DUP6"
    },
    "5262": {
      "op": "SUB"
    },
    "5263": {
      "op": "SLT"
    },
    "5264": {
      "op": "ISZERO"
    },
    "5265": {
      "op": "PUSH2",
      "value": "0x1499"
    },
    "5268": {
      "op": "JUMPI"
    },
    "5269": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5271": {
      "op": "DUP1"
    },
    "5272": {
      "op": "REVERT"
    },
    "5273": {
      "op": "JUMPDEST"
    },
    "5274": {
      "op": "POP"
    },
    "5275": {
      "op": "POP"
    },
    "5276": {
      "op": "DUP1"
    },
    "5277": {
      "op": "CALLDATALOAD"
    },
    "5278": {
      "op": "SWAP3"
    },
    "5279": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5281": {
      "op": "SWAP1"
    },
    "5282": {
      "op": "SWAP2"
    },
    "5283": {
      "op": "ADD"
    },
    "5284": {
      "op": "CALLDATALOAD"
    },
    "5285": {
      "op": "SWAP2"
    },
    "5286": {
      "op": "POP"
    },
    "5287": {
      "jump": "o",
      "op": "JUMP"
    },
    "5288": {
      "op": "JUMPDEST"
    },
    "5289": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5291": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5293": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5295": {
      "op": "SHL"
    },
    "5296": {
      "op": "SUB"
    },
    "5297": {
      "op": "DUP2"
    },
    "5298": {
      "op": "AND"
    },
    "5299": {
      "op": "DUP2"
    },
    "5300": {
      "op": "EQ"
    },
    "5301": {
      "op": "PUSH2",
      "value": "0x1081"
    },
    "5304": {
      "op": "JUMPI"
    },
    "5305": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5307": {
      "op": "DUP1"
    },
    "5308": {
      "op": "REVERT"
    },
    "5309": {
      "op": "JUMPDEST"
    },
    "5310": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5312": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5314": {
      "op": "DUP3"
    },
    "5315": {
      "op": "DUP5"
    },
    "5316": {
      "op": "SUB"
    },
    "5317": {
      "op": "SLT"
    },
    "5318": {
      "op": "ISZERO"
    },
    "5319": {
      "op": "PUSH2",
      "value": "0x14CF"
    },
    "5322": {
      "op": "JUMPI"
    },
    "5323": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5325": {
      "op": "DUP1"
    },
    "5326": {
      "op": "REVERT"
    },
    "5327": {
      "op": "JUMPDEST"
    },
    "5328": {
      "op": "DUP2"
    },
    "5329": {
      "op": "CALLDATALOAD"
    },
    "5330": {
      "op": "PUSH2",
      "value": "0x1098"
    },
    "5333": {
      "op": "DUP2"
    },
    "5334": {
      "op": "PUSH2",
      "value": "0x14A8"
    },
    "5337": {
      "jump": "i",
      "op": "JUMP"
    },
    "5338": {
      "op": "JUMPDEST"
    },
    "5339": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5341": {
      "op": "DUP1"
    },
    "5342": {
      "op": "DUP3"
    },
    "5343": {
      "op": "MSTORE"
    },
    "5344": {
      "op": "DUP3"
    },
    "5345": {
      "op": "MLOAD"
    },
    "5346": {
      "op": "DUP3"
    },
    "5347": {
      "op": "DUP3"
    },
    "5348": {
      "op": "ADD"
    },
    "5349": {
      "op": "DUP2"
    },
    "5350": {
      "op": "SWAP1"
    },
    "5351": {
      "op": "MSTORE"
    },
    "5352": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5354": {
      "op": "SWAP2"
    },
    "5355": {
      "op": "SWAP1"
    },
    "5356": {
      "op": "DUP5"
    },
    "5357": {
      "op": "DUP3"
    },
    "5358": {
      "op": "ADD"
    },
    "5359": {
      "op": "SWAP1"
    },
    "5360": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5362": {
      "op": "DUP6"
    },
    "5363": {
      "op": "ADD"
    },
    "5364": {
      "op": "SWAP1"
    },
    "5365": {
      "op": "DUP5"
    },
    "5366": {
      "op": "JUMPDEST"
    },
    "5367": {
      "op": "DUP2"
    },
    "5368": {
      "op": "DUP2"
    },
    "5369": {
      "op": "LT"
    },
    "5370": {
      "op": "ISZERO"
    },
    "5371": {
      "op": "PUSH2",
      "value": "0x1512"
    },
    "5374": {
      "op": "JUMPI"
    },
    "5375": {
      "op": "DUP4"
    },
    "5376": {
      "op": "MLOAD"
    },
    "5377": {
      "op": "DUP4"
    },
    "5378": {
      "op": "MSTORE"
    },
    "5379": {
      "op": "SWAP3"
    },
    "5380": {
      "op": "DUP5"
    },
    "5381": {
      "op": "ADD"
    },
    "5382": {
      "op": "SWAP3"
    },
    "5383": {
      "op": "SWAP2"
    },
    "5384": {
      "op": "DUP5"
    },
    "5385": {
      "op": "ADD"
    },
    "5386": {
      "op": "SWAP2"
    },
    "5387": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5389": {
      "op": "ADD"
    },
    "5390": {
      "op": "PUSH2",
      "value": "0x14F6"
    },
    "5393": {
      "op": "JUMP"
    },
    "5394": {
      "op": "JUMPDEST"
    },
    "5395": {
      "op": "POP"
    },
    "5396": {
      "op": "SWAP1"
    },
    "5397": {
      "op": "SWAP7"
    },
    "5398": {
      "op": "SWAP6"
    },
    "5399": {
      "op": "POP"
    },
    "5400": {
      "op": "POP"
    },
    "5401": {
      "op": "POP"
    },
    "5402": {
      "op": "POP"
    },
    "5403": {
      "op": "POP"
    },
    "5404": {
      "op": "POP"
    },
    "5405": {
      "jump": "o",
      "op": "JUMP"
    },
    "5406": {
      "op": "JUMPDEST"
    },
    "5407": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5409": {
      "op": "DUP1"
    },
    "5410": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5412": {
      "op": "DUP4"
    },
    "5413": {
      "op": "DUP6"
    },
    "5414": {
      "op": "SUB"
    },
    "5415": {
      "op": "SLT"
    },
    "5416": {
      "op": "ISZERO"
    },
    "5417": {
      "op": "PUSH2",
      "value": "0x1531"
    },
    "5420": {
      "op": "JUMPI"
    },
    "5421": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5423": {
      "op": "DUP1"
    },
    "5424": {
      "op": "REVERT"
    },
    "5425": {
      "op": "JUMPDEST"
    },
    "5426": {
      "op": "DUP3"
    },
    "5427": {
      "op": "CALLDATALOAD"
    },
    "5428": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "5437": {
      "op": "DUP1"
    },
    "5438": {
      "op": "DUP3"
    },
    "5439": {
      "op": "GT"
    },
    "5440": {
      "op": "ISZERO"
    },
    "5441": {
      "op": "PUSH2",
      "value": "0x1549"
    },
    "5444": {
      "op": "JUMPI"
    },
    "5445": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5447": {
      "op": "DUP1"
    },
    "5448": {
      "op": "REVERT"
    },
    "5449": {
      "op": "JUMPDEST"
    },
    "5450": {
      "op": "DUP2"
    },
    "5451": {
      "op": "DUP6"
    },
    "5452": {
      "op": "ADD"
    },
    "5453": {
      "op": "SWAP2"
    },
    "5454": {
      "op": "POP"
    },
    "5455": {
      "op": "DUP6"
    },
    "5456": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5458": {
      "op": "DUP4"
    },
    "5459": {
      "op": "ADD"
    },
    "5460": {
      "op": "SLT"
    },
    "5461": {
      "op": "PUSH2",
      "value": "0x155D"
    },
    "5464": {
      "op": "JUMPI"
    },
    "5465": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5467": {
      "op": "DUP1"
    },
    "5468": {
      "op": "REVERT"
    },
    "5469": {
      "op": "JUMPDEST"
    },
    "5470": {
      "op": "DUP2"
    },
    "5471": {
      "op": "CALLDATALOAD"
    },
    "5472": {
      "op": "DUP2"
    },
    "5473": {
      "op": "DUP2"
    },
    "5474": {
      "op": "GT"
    },
    "5475": {
      "op": "ISZERO"
    },
    "5476": {
      "op": "PUSH2",
      "value": "0x156C"
    },
    "5479": {
      "op": "JUMPI"
    },
    "5480": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5482": {
      "op": "DUP1"
    },
    "5483": {
      "op": "REVERT"
    },
    "5484": {
      "op": "JUMPDEST"
    },
    "5485": {
      "op": "DUP7"
    },
    "5486": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5488": {
      "op": "DUP3"
    },
    "5489": {
      "op": "DUP6"
    },
    "5490": {
      "op": "ADD"
    },
    "5491": {
      "op": "ADD"
    },
    "5492": {
      "op": "GT"
    },
    "5493": {
      "op": "ISZERO"
    },
    "5494": {
      "op": "PUSH2",
      "value": "0x157E"
    },
    "5497": {
      "op": "JUMPI"
    },
    "5498": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5500": {
      "op": "DUP1"
    },
    "5501": {
      "op": "REVERT"
    },
    "5502": {
      "op": "JUMPDEST"
    },
    "5503": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5505": {
      "op": "SWAP3"
    },
    "5506": {
      "op": "SWAP1"
    },
    "5507": {
      "op": "SWAP3"
    },
    "5508": {
      "op": "ADD"
    },
    "5509": {
      "op": "SWAP7"
    },
    "5510": {
      "op": "SWAP2"
    },
    "5511": {
      "op": "SWAP6"
    },
    "5512": {
      "op": "POP"
    },
    "5513": {
      "op": "SWAP1"
    },
    "5514": {
      "op": "SWAP4"
    },
    "5515": {
      "op": "POP"
    },
    "5516": {
      "op": "POP"
    },
    "5517": {
      "op": "POP"
    },
    "5518": {
      "op": "POP"
    },
    "5519": {
      "jump": "o",
      "op": "JUMP"
    },
    "5520": {
      "op": "JUMPDEST"
    },
    "5521": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5523": {
      "op": "DUP1"
    },
    "5524": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5526": {
      "op": "DUP1"
    },
    "5527": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5529": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5531": {
      "op": "DUP7"
    },
    "5532": {
      "op": "DUP9"
    },
    "5533": {
      "op": "SUB"
    },
    "5534": {
      "op": "SLT"
    },
    "5535": {
      "op": "ISZERO"
    },
    "5536": {
      "op": "PUSH2",
      "value": "0x15A8"
    },
    "5539": {
      "op": "JUMPI"
    },
    "5540": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5542": {
      "op": "DUP1"
    },
    "5543": {
      "op": "REVERT"
    },
    "5544": {
      "op": "JUMPDEST"
    },
    "5545": {
      "op": "DUP6"
    },
    "5546": {
      "op": "CALLDATALOAD"
    },
    "5547": {
      "op": "PUSH2",
      "value": "0x15B3"
    },
    "5550": {
      "op": "DUP2"
    },
    "5551": {
      "op": "PUSH2",
      "value": "0x14A8"
    },
    "5554": {
      "jump": "i",
      "op": "JUMP"
    },
    "5555": {
      "op": "JUMPDEST"
    },
    "5556": {
      "op": "SWAP5"
    },
    "5557": {
      "op": "POP"
    },
    "5558": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5560": {
      "op": "DUP7"
    },
    "5561": {
      "op": "ADD"
    },
    "5562": {
      "op": "CALLDATALOAD"
    },
    "5563": {
      "op": "PUSH2",
      "value": "0x15C3"
    },
    "5566": {
      "op": "DUP2"
    },
    "5567": {
      "op": "PUSH2",
      "value": "0x14A8"
    },
    "5570": {
      "jump": "i",
      "op": "JUMP"
    },
    "5571": {
      "op": "JUMPDEST"
    },
    "5572": {
      "op": "SWAP5"
    },
    "5573": {
      "op": "SWAP8"
    },
    "5574": {
      "op": "SWAP5"
    },
    "5575": {
      "op": "SWAP7"
    },
    "5576": {
      "op": "POP"
    },
    "5577": {
      "op": "POP"
    },
    "5578": {
      "op": "POP"
    },
    "5579": {
      "op": "POP"
    },
    "5580": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5582": {
      "op": "DUP4"
    },
    "5583": {
      "op": "ADD"
    },
    "5584": {
      "op": "CALLDATALOAD"
    },
    "5585": {
      "op": "SWAP3"
    },
    "5586": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5588": {
      "op": "DUP2"
    },
    "5589": {
      "op": "ADD"
    },
    "5590": {
      "op": "CALLDATALOAD"
    },
    "5591": {
      "op": "SWAP3"
    },
    "5592": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5594": {
      "op": "SWAP1"
    },
    "5595": {
      "op": "SWAP2"
    },
    "5596": {
      "op": "ADD"
    },
    "5597": {
      "op": "CALLDATALOAD"
    },
    "5598": {
      "op": "SWAP2"
    },
    "5599": {
      "op": "POP"
    },
    "5600": {
      "jump": "o",
      "op": "JUMP"
    },
    "5601": {
      "op": "JUMPDEST"
    },
    "5602": {
      "op": "DUP3"
    },
    "5603": {
      "op": "ISZERO"
    },
    "5604": {
      "op": "ISZERO"
    },
    "5605": {
      "op": "DUP2"
    },
    "5606": {
      "op": "MSTORE"
    },
    "5607": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5609": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5611": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5613": {
      "op": "DUP2"
    },
    "5614": {
      "op": "DUP5"
    },
    "5615": {
      "op": "ADD"
    },
    "5616": {
      "op": "MSTORE"
    },
    "5617": {
      "op": "DUP4"
    },
    "5618": {
      "op": "MLOAD"
    },
    "5619": {
      "op": "DUP1"
    },
    "5620": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5622": {
      "op": "DUP6"
    },
    "5623": {
      "op": "ADD"
    },
    "5624": {
      "op": "MSTORE"
    },
    "5625": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5627": {
      "op": "JUMPDEST"
    },
    "5628": {
      "op": "DUP2"
    },
    "5629": {
      "op": "DUP2"
    },
    "5630": {
      "op": "LT"
    },
    "5631": {
      "op": "ISZERO"
    },
    "5632": {
      "op": "PUSH2",
      "value": "0x1617"
    },
    "5635": {
      "op": "JUMPI"
    },
    "5636": {
      "op": "DUP6"
    },
    "5637": {
      "op": "DUP2"
    },
    "5638": {
      "op": "ADD"
    },
    "5639": {
      "op": "DUP4"
    },
    "5640": {
      "op": "ADD"
    },
    "5641": {
      "op": "MLOAD"
    },
    "5642": {
      "op": "DUP6"
    },
    "5643": {
      "op": "DUP3"
    },
    "5644": {
      "op": "ADD"
    },
    "5645": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5647": {
      "op": "ADD"
    },
    "5648": {
      "op": "MSTORE"
    },
    "5649": {
      "op": "DUP3"
    },
    "5650": {
      "op": "ADD"
    },
    "5651": {
      "op": "PUSH2",
      "value": "0x15FB"
    },
    "5654": {
      "op": "JUMP"
    },
    "5655": {
      "op": "JUMPDEST"
    },
    "5656": {
      "op": "DUP2"
    },
    "5657": {
      "op": "DUP2"
    },
    "5658": {
      "op": "GT"
    },
    "5659": {
      "op": "ISZERO"
    },
    "5660": {
      "op": "PUSH2",
      "value": "0x1629"
    },
    "5663": {
      "op": "JUMPI"
    },
    "5664": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5666": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5668": {
      "op": "DUP4"
    },
    "5669": {
      "op": "DUP8"
    },
    "5670": {
      "op": "ADD"
    },
    "5671": {
      "op": "ADD"
    },
    "5672": {
      "op": "MSTORE"
    },
    "5673": {
      "op": "JUMPDEST"
    },
    "5674": {
      "op": "POP"
    },
    "5675": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5677": {
      "op": "ADD"
    },
    "5678": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5680": {
      "op": "NOT"
    },
    "5681": {
      "op": "AND"
    },
    "5682": {
      "op": "SWAP3"
    },
    "5683": {
      "op": "SWAP1"
    },
    "5684": {
      "op": "SWAP3"
    },
    "5685": {
      "op": "ADD"
    },
    "5686": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5688": {
      "op": "ADD"
    },
    "5689": {
      "op": "SWAP5"
    },
    "5690": {
      "op": "SWAP4"
    },
    "5691": {
      "op": "POP"
    },
    "5692": {
      "op": "POP"
    },
    "5693": {
      "op": "POP"
    },
    "5694": {
      "op": "POP"
    },
    "5695": {
      "jump": "o",
      "op": "JUMP"
    },
    "5696": {
      "op": "JUMPDEST"
    },
    "5697": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5699": {
      "op": "DUP1"
    },
    "5700": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5702": {
      "op": "DUP1"
    },
    "5703": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5705": {
      "op": "DUP6"
    },
    "5706": {
      "op": "DUP8"
    },
    "5707": {
      "op": "SUB"
    },
    "5708": {
      "op": "SLT"
    },
    "5709": {
      "op": "ISZERO"
    },
    "5710": {
      "op": "PUSH2",
      "value": "0x1656"
    },
    "5713": {
      "op": "JUMPI"
    },
    "5714": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5716": {
      "op": "DUP1"
    },
    "5717": {
      "op": "REVERT"
    },
    "5718": {
      "op": "JUMPDEST"
    },
    "5719": {
      "op": "DUP5"
    },
    "5720": {
      "op": "CALLDATALOAD"
    },
    "5721": {
      "op": "PUSH2",
      "value": "0x1661"
    },
    "5724": {
      "op": "DUP2"
    },
    "5725": {
      "op": "PUSH2",
      "value": "0x14A8"
    },
    "5728": {
      "jump": "i",
      "op": "JUMP"
    },
    "5729": {
      "op": "JUMPDEST"
    },
    "5730": {
      "op": "SWAP4"
    },
    "5731": {
      "op": "POP"
    },
    "5732": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5734": {
      "op": "DUP6"
    },
    "5735": {
      "op": "ADD"
    },
    "5736": {
      "op": "CALLDATALOAD"
    },
    "5737": {
      "op": "PUSH2",
      "value": "0x1671"
    },
    "5740": {
      "op": "DUP2"
    },
    "5741": {
      "op": "PUSH2",
      "value": "0x14A8"
    },
    "5744": {
      "jump": "i",
      "op": "JUMP"
    },
    "5745": {
      "op": "JUMPDEST"
    },
    "5746": {
      "op": "SWAP4"
    },
    "5747": {
      "op": "SWAP7"
    },
    "5748": {
      "op": "SWAP4"
    },
    "5749": {
      "op": "SWAP6"
    },
    "5750": {
      "op": "POP"
    },
    "5751": {
      "op": "POP"
    },
    "5752": {
      "op": "POP"
    },
    "5753": {
      "op": "POP"
    },
    "5754": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5756": {
      "op": "DUP3"
    },
    "5757": {
      "op": "ADD"
    },
    "5758": {
      "op": "CALLDATALOAD"
    },
    "5759": {
      "op": "SWAP2"
    },
    "5760": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5762": {
      "op": "ADD"
    },
    "5763": {
      "op": "CALLDATALOAD"
    },
    "5764": {
      "op": "SWAP1"
    },
    "5765": {
      "jump": "o",
      "op": "JUMP"
    },
    "5766": {
      "op": "JUMPDEST"
    },
    "5767": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5769": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5771": {
      "op": "DUP3"
    },
    "5772": {
      "op": "DUP5"
    },
    "5773": {
      "op": "SUB"
    },
    "5774": {
      "op": "SLT"
    },
    "5775": {
      "op": "ISZERO"
    },
    "5776": {
      "op": "PUSH2",
      "value": "0x1698"
    },
    "5779": {
      "op": "JUMPI"
    },
    "5780": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5782": {
      "op": "DUP1"
    },
    "5783": {
      "op": "REVERT"
    },
    "5784": {
      "op": "JUMPDEST"
    },
    "5785": {
      "op": "POP"
    },
    "5786": {
      "op": "CALLDATALOAD"
    },
    "5787": {
      "op": "SWAP2"
    },
    "5788": {
      "op": "SWAP1"
    },
    "5789": {
      "op": "POP"
    },
    "5790": {
      "jump": "o",
      "op": "JUMP"
    },
    "5791": {
      "op": "JUMPDEST"
    },
    "5792": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5794": {
      "op": "DUP1"
    },
    "5795": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5797": {
      "op": "DUP1"
    },
    "5798": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5800": {
      "op": "DUP6"
    },
    "5801": {
      "op": "DUP8"
    },
    "5802": {
      "op": "SUB"
    },
    "5803": {
      "op": "SLT"
    },
    "5804": {
      "op": "ISZERO"
    },
    "5805": {
      "op": "PUSH2",
      "value": "0x16B5"
    },
    "5808": {
      "op": "JUMPI"
    },
    "5809": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5811": {
      "op": "DUP1"
    },
    "5812": {
      "op": "REVERT"
    },
    "5813": {
      "op": "JUMPDEST"
    },
    "5814": {
      "op": "DUP5"
    },
    "5815": {
      "op": "CALLDATALOAD"
    },
    "5816": {
      "op": "PUSH2",
      "value": "0x16C0"
    },
    "5819": {
      "op": "DUP2"
    },
    "5820": {
      "op": "PUSH2",
      "value": "0x14A8"
    },
    "5823": {
      "jump": "i",
      "op": "JUMP"
    },
    "5824": {
      "op": "JUMPDEST"
    },
    "5825": {
      "op": "SWAP4"
    },
    "5826": {
      "op": "POP"
    },
    "5827": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5829": {
      "op": "DUP6"
    },
    "5830": {
      "op": "ADD"
    },
    "5831": {
      "op": "CALLDATALOAD"
    },
    "5832": {
      "op": "PUSH2",
      "value": "0x16D0"
    },
    "5835": {
      "op": "DUP2"
    },
    "5836": {
      "op": "PUSH2",
      "value": "0x14A8"
    },
    "5839": {
      "jump": "i",
      "op": "JUMP"
    },
    "5840": {
      "op": "JUMPDEST"
    },
    "5841": {
      "op": "SWAP3"
    },
    "5842": {
      "op": "POP"
    },
    "5843": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5845": {
      "op": "DUP6"
    },
    "5846": {
      "op": "ADD"
    },
    "5847": {
      "op": "CALLDATALOAD"
    },
    "5848": {
      "op": "SWAP2"
    },
    "5849": {
      "op": "POP"
    },
    "5850": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5852": {
      "op": "DUP6"
    },
    "5853": {
      "op": "ADD"
    },
    "5854": {
      "op": "CALLDATALOAD"
    },
    "5855": {
      "op": "PUSH2",
      "value": "0x16E7"
    },
    "5858": {
      "op": "DUP2"
    },
    "5859": {
      "op": "PUSH2",
      "value": "0x14A8"
    },
    "5862": {
      "jump": "i",
      "op": "JUMP"
    },
    "5863": {
      "op": "JUMPDEST"
    },
    "5864": {
      "op": "SWAP4"
    },
    "5865": {
      "op": "SWAP7"
    },
    "5866": {
      "op": "SWAP3"
    },
    "5867": {
      "op": "SWAP6"
    },
    "5868": {
      "op": "POP"
    },
    "5869": {
      "op": "SWAP1"
    },
    "5870": {
      "op": "SWAP4"
    },
    "5871": {
      "op": "POP"
    },
    "5872": {
      "op": "POP"
    },
    "5873": {
      "jump": "o",
      "op": "JUMP"
    },
    "5874": {
      "op": "JUMPDEST"
    },
    "5875": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5877": {
      "op": "DUP1"
    },
    "5878": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5880": {
      "op": "DUP4"
    },
    "5881": {
      "op": "DUP6"
    },
    "5882": {
      "op": "SUB"
    },
    "5883": {
      "op": "SLT"
    },
    "5884": {
      "op": "ISZERO"
    },
    "5885": {
      "op": "PUSH2",
      "value": "0x1705"
    },
    "5888": {
      "op": "JUMPI"
    },
    "5889": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5891": {
      "op": "DUP1"
    },
    "5892": {
      "op": "REVERT"
    },
    "5893": {
      "op": "JUMPDEST"
    },
    "5894": {
      "op": "DUP3"
    },
    "5895": {
      "op": "CALLDATALOAD"
    },
    "5896": {
      "op": "PUSH2",
      "value": "0x1710"
    },
    "5899": {
      "op": "DUP2"
    },
    "5900": {
      "op": "PUSH2",
      "value": "0x14A8"
    },
    "5903": {
      "jump": "i",
      "op": "JUMP"
    },
    "5904": {
      "op": "JUMPDEST"
    },
    "5905": {
      "op": "SWAP5"
    },
    "5906": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5908": {
      "op": "SWAP4"
    },
    "5909": {
      "op": "SWAP1"
    },
    "5910": {
      "op": "SWAP4"
    },
    "5911": {
      "op": "ADD"
    },
    "5912": {
      "op": "CALLDATALOAD"
    },
    "5913": {
      "op": "SWAP4"
    },
    "5914": {
      "op": "POP"
    },
    "5915": {
      "op": "POP"
    },
    "5916": {
      "op": "POP"
    },
    "5917": {
      "jump": "o",
      "op": "JUMP"
    },
    "5918": {
      "op": "JUMPDEST"
    },
    "5919": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "5924": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5926": {
      "op": "SHL"
    },
    "5927": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5929": {
      "op": "MSTORE"
    },
    "5930": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "5932": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5934": {
      "op": "MSTORE"
    },
    "5935": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5937": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5939": {
      "op": "REVERT"
    },
    "5940": {
      "op": "JUMPDEST"
    },
    "5941": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "5946": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5948": {
      "op": "SHL"
    },
    "5949": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5951": {
      "op": "MSTORE"
    },
    "5952": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "5954": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5956": {
      "op": "MSTORE"
    },
    "5957": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5959": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5961": {
      "op": "REVERT"
    },
    "5962": {
      "op": "JUMPDEST"
    },
    "5963": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "5968": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5970": {
      "op": "SHL"
    },
    "5971": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5973": {
      "op": "MSTORE"
    },
    "5974": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "5976": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5978": {
      "op": "MSTORE"
    },
    "5979": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5981": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5983": {
      "op": "REVERT"
    },
    "5984": {
      "op": "JUMPDEST"
    },
    "5985": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5987": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5989": {
      "op": "NOT"
    },
    "5990": {
      "op": "DUP3"
    },
    "5991": {
      "op": "EQ"
    },
    "5992": {
      "op": "ISZERO"
    },
    "5993": {
      "op": "PUSH2",
      "value": "0x1774"
    },
    "5996": {
      "op": "JUMPI"
    },
    "5997": {
      "op": "PUSH2",
      "value": "0x1774"
    },
    "6000": {
      "op": "PUSH2",
      "value": "0x174A"
    },
    "6003": {
      "jump": "i",
      "op": "JUMP"
    },
    "6004": {
      "op": "JUMPDEST"
    },
    "6005": {
      "op": "POP"
    },
    "6006": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6008": {
      "op": "ADD"
    },
    "6009": {
      "op": "SWAP1"
    },
    "6010": {
      "jump": "o",
      "op": "JUMP"
    },
    "6011": {
      "op": "JUMPDEST"
    },
    "6012": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6014": {
      "op": "DUP1"
    },
    "6015": {
      "op": "MLOAD"
    },
    "6016": {
      "op": "SWAP1"
    },
    "6017": {
      "op": "DUP2"
    },
    "6018": {
      "op": "ADD"
    },
    "6019": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "6028": {
      "op": "DUP2"
    },
    "6029": {
      "op": "GT"
    },
    "6030": {
      "op": "DUP3"
    },
    "6031": {
      "op": "DUP3"
    },
    "6032": {
      "op": "LT"
    },
    "6033": {
      "op": "OR"
    },
    "6034": {
      "op": "ISZERO"
    },
    "6035": {
      "op": "PUSH2",
      "value": "0x179E"
    },
    "6038": {
      "op": "JUMPI"
    },
    "6039": {
      "op": "PUSH2",
      "value": "0x179E"
    },
    "6042": {
      "op": "PUSH2",
      "value": "0x171E"
    },
    "6045": {
      "jump": "i",
      "op": "JUMP"
    },
    "6046": {
      "op": "JUMPDEST"
    },
    "6047": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6049": {
      "op": "MSTORE"
    },
    "6050": {
      "op": "SWAP1"
    },
    "6051": {
      "jump": "o",
      "op": "JUMP"
    },
    "6052": {
      "op": "JUMPDEST"
    },
    "6053": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6055": {
      "op": "MLOAD"
    },
    "6056": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6058": {
      "op": "DUP3"
    },
    "6059": {
      "op": "ADD"
    },
    "6060": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6062": {
      "op": "NOT"
    },
    "6063": {
      "op": "AND"
    },
    "6064": {
      "op": "DUP2"
    },
    "6065": {
      "op": "ADD"
    },
    "6066": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "6075": {
      "op": "DUP2"
    },
    "6076": {
      "op": "GT"
    },
    "6077": {
      "op": "DUP3"
    },
    "6078": {
      "op": "DUP3"
    },
    "6079": {
      "op": "LT"
    },
    "6080": {
      "op": "OR"
    },
    "6081": {
      "op": "ISZERO"
    },
    "6082": {
      "op": "PUSH2",
      "value": "0x17CD"
    },
    "6085": {
      "op": "JUMPI"
    },
    "6086": {
      "op": "PUSH2",
      "value": "0x17CD"
    },
    "6089": {
      "op": "PUSH2",
      "value": "0x171E"
    },
    "6092": {
      "jump": "i",
      "op": "JUMP"
    },
    "6093": {
      "op": "JUMPDEST"
    },
    "6094": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6096": {
      "op": "MSTORE"
    },
    "6097": {
      "op": "SWAP2"
    },
    "6098": {
      "op": "SWAP1"
    },
    "6099": {
      "op": "POP"
    },
    "6100": {
      "jump": "o",
      "op": "JUMP"
    },
    "6101": {
      "op": "JUMPDEST"
    },
    "6102": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6104": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "6113": {
      "op": "DUP3"
    },
    "6114": {
      "op": "GT"
    },
    "6115": {
      "op": "ISZERO"
    },
    "6116": {
      "op": "PUSH2",
      "value": "0x17EF"
    },
    "6119": {
      "op": "JUMPI"
    },
    "6120": {
      "op": "PUSH2",
      "value": "0x17EF"
    },
    "6123": {
      "op": "PUSH2",
      "value": "0x171E"
    },
    "6126": {
      "jump": "i",
      "op": "JUMP"
    },
    "6127": {
      "op": "JUMPDEST"
    },
    "6128": {
      "op": "POP"
    },
    "6129": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "6131": {
      "op": "SHL"
    },
    "6132": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6134": {
      "op": "ADD"
    },
    "6135": {
      "op": "SWAP1"
    },
    "6136": {
      "jump": "o",
      "op": "JUMP"
    },
    "6137": {
      "op": "JUMPDEST"
    },
    "6138": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6140": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6142": {
      "op": "DUP1"
    },
    "6143": {
      "op": "DUP4"
    },
    "6144": {
      "op": "DUP6"
    },
    "6145": {
      "op": "SUB"
    },
    "6146": {
      "op": "SLT"
    },
    "6147": {
      "op": "ISZERO"
    },
    "6148": {
      "op": "PUSH2",
      "value": "0x180C"
    },
    "6151": {
      "op": "JUMPI"
    },
    "6152": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6154": {
      "op": "DUP1"
    },
    "6155": {
      "op": "REVERT"
    },
    "6156": {
      "op": "JUMPDEST"
    },
    "6157": {
      "op": "DUP3"
    },
    "6158": {
      "op": "CALLDATALOAD"
    },
    "6159": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "6168": {
      "op": "DUP1"
    },
    "6169": {
      "op": "DUP3"
    },
    "6170": {
      "op": "GT"
    },
    "6171": {
      "op": "ISZERO"
    },
    "6172": {
      "op": "PUSH2",
      "value": "0x1824"
    },
    "6175": {
      "op": "JUMPI"
    },
    "6176": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6178": {
      "op": "DUP1"
    },
    "6179": {
      "op": "REVERT"
    },
    "6180": {
      "op": "JUMPDEST"
    },
    "6181": {
      "op": "DUP2"
    },
    "6182": {
      "op": "DUP6"
    },
    "6183": {
      "op": "ADD"
    },
    "6184": {
      "op": "SWAP2"
    },
    "6185": {
      "op": "POP"
    },
    "6186": {
      "op": "DUP6"
    },
    "6187": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6189": {
      "op": "DUP4"
    },
    "6190": {
      "op": "ADD"
    },
    "6191": {
      "op": "SLT"
    },
    "6192": {
      "op": "PUSH2",
      "value": "0x1838"
    },
    "6195": {
      "op": "JUMPI"
    },
    "6196": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6198": {
      "op": "DUP1"
    },
    "6199": {
      "op": "REVERT"
    },
    "6200": {
      "op": "JUMPDEST"
    },
    "6201": {
      "op": "DUP2"
    },
    "6202": {
      "op": "CALLDATALOAD"
    },
    "6203": {
      "op": "PUSH2",
      "value": "0x184B"
    },
    "6206": {
      "op": "PUSH2",
      "value": "0x1846"
    },
    "6209": {
      "op": "DUP3"
    },
    "6210": {
      "op": "PUSH2",
      "value": "0x17D5"
    },
    "6213": {
      "jump": "i",
      "op": "JUMP"
    },
    "6214": {
      "op": "JUMPDEST"
    },
    "6215": {
      "op": "PUSH2",
      "value": "0x17A4"
    },
    "6218": {
      "jump": "i",
      "op": "JUMP"
    },
    "6219": {
      "op": "JUMPDEST"
    },
    "6220": {
      "op": "DUP2"
    },
    "6221": {
      "op": "DUP2"
    },
    "6222": {
      "op": "MSTORE"
    },
    "6223": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "6225": {
      "op": "SWAP2"
    },
    "6226": {
      "op": "SWAP1"
    },
    "6227": {
      "op": "SWAP2"
    },
    "6228": {
      "op": "SHL"
    },
    "6229": {
      "op": "DUP4"
    },
    "6230": {
      "op": "ADD"
    },
    "6231": {
      "op": "DUP5"
    },
    "6232": {
      "op": "ADD"
    },
    "6233": {
      "op": "SWAP1"
    },
    "6234": {
      "op": "DUP5"
    },
    "6235": {
      "op": "DUP2"
    },
    "6236": {
      "op": "ADD"
    },
    "6237": {
      "op": "SWAP1"
    },
    "6238": {
      "op": "DUP9"
    },
    "6239": {
      "op": "DUP4"
    },
    "6240": {
      "op": "GT"
    },
    "6241": {
      "op": "ISZERO"
    },
    "6242": {
      "op": "PUSH2",
      "value": "0x186A"
    },
    "6245": {
      "op": "JUMPI"
    },
    "6246": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6248": {
      "op": "DUP1"
    },
    "6249": {
      "op": "REVERT"
    },
    "6250": {
      "op": "JUMPDEST"
    },
    "6251": {
      "op": "DUP6"
    },
    "6252": {
      "op": "DUP6"
    },
    "6253": {
      "op": "ADD"
    },
    "6254": {
      "op": "JUMPDEST"
    },
    "6255": {
      "op": "DUP4"
    },
    "6256": {
      "op": "DUP2"
    },
    "6257": {
      "op": "LT"
    },
    "6258": {
      "op": "ISZERO"
    },
    "6259": {
      "op": "PUSH2",
      "value": "0x1937"
    },
    "6262": {
      "op": "JUMPI"
    },
    "6263": {
      "op": "DUP1"
    },
    "6264": {
      "op": "CALLDATALOAD"
    },
    "6265": {
      "op": "DUP6"
    },
    "6266": {
      "op": "DUP2"
    },
    "6267": {
      "op": "GT"
    },
    "6268": {
      "op": "ISZERO"
    },
    "6269": {
      "op": "PUSH2",
      "value": "0x1886"
    },
    "6272": {
      "op": "JUMPI"
    },
    "6273": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6275": {
      "op": "DUP1"
    },
    "6276": {
      "op": "DUP2"
    },
    "6277": {
      "op": "REVERT"
    },
    "6278": {
      "op": "JUMPDEST"
    },
    "6279": {
      "op": "DUP7"
    },
    "6280": {
      "op": "ADD"
    },
    "6281": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6283": {
      "op": "DUP2"
    },
    "6284": {
      "op": "DUP13"
    },
    "6285": {
      "op": "SUB"
    },
    "6286": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6288": {
      "op": "NOT"
    },
    "6289": {
      "op": "ADD"
    },
    "6290": {
      "op": "DUP2"
    },
    "6291": {
      "op": "SGT"
    },
    "6292": {
      "op": "ISZERO"
    },
    "6293": {
      "op": "PUSH2",
      "value": "0x189E"
    },
    "6296": {
      "op": "JUMPI"
    },
    "6297": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6299": {
      "op": "DUP1"
    },
    "6300": {
      "op": "DUP2"
    },
    "6301": {
      "op": "REVERT"
    },
    "6302": {
      "op": "JUMPDEST"
    },
    "6303": {
      "op": "PUSH2",
      "value": "0x18A6"
    },
    "6306": {
      "op": "PUSH2",
      "value": "0x177B"
    },
    "6309": {
      "jump": "i",
      "op": "JUMP"
    },
    "6310": {
      "op": "JUMPDEST"
    },
    "6311": {
      "op": "DUP10"
    },
    "6312": {
      "op": "DUP4"
    },
    "6313": {
      "op": "ADD"
    },
    "6314": {
      "op": "CALLDATALOAD"
    },
    "6315": {
      "op": "DUP2"
    },
    "6316": {
      "op": "MSTORE"
    },
    "6317": {
      "op": "DUP2"
    },
    "6318": {
      "op": "DUP4"
    },
    "6319": {
      "op": "ADD"
    },
    "6320": {
      "op": "CALLDATALOAD"
    },
    "6321": {
      "op": "DUP9"
    },
    "6322": {
      "op": "DUP2"
    },
    "6323": {
      "op": "GT"
    },
    "6324": {
      "op": "ISZERO"
    },
    "6325": {
      "op": "PUSH2",
      "value": "0x18BE"
    },
    "6328": {
      "op": "JUMPI"
    },
    "6329": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6331": {
      "op": "DUP1"
    },
    "6332": {
      "op": "DUP2"
    },
    "6333": {
      "op": "REVERT"
    },
    "6334": {
      "op": "JUMPDEST"
    },
    "6335": {
      "op": "DUP1"
    },
    "6336": {
      "op": "DUP5"
    },
    "6337": {
      "op": "ADD"
    },
    "6338": {
      "op": "SWAP4"
    },
    "6339": {
      "op": "POP"
    },
    "6340": {
      "op": "POP"
    },
    "6341": {
      "op": "DUP13"
    },
    "6342": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "6344": {
      "op": "DUP5"
    },
    "6345": {
      "op": "ADD"
    },
    "6346": {
      "op": "SLT"
    },
    "6347": {
      "op": "PUSH2",
      "value": "0x18D4"
    },
    "6350": {
      "op": "JUMPI"
    },
    "6351": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6353": {
      "op": "DUP1"
    },
    "6354": {
      "op": "DUP2"
    },
    "6355": {
      "op": "REVERT"
    },
    "6356": {
      "op": "JUMPDEST"
    },
    "6357": {
      "op": "DUP10"
    },
    "6358": {
      "op": "DUP4"
    },
    "6359": {
      "op": "ADD"
    },
    "6360": {
      "op": "CALLDATALOAD"
    },
    "6361": {
      "op": "PUSH2",
      "value": "0x18E4"
    },
    "6364": {
      "op": "PUSH2",
      "value": "0x1846"
    },
    "6367": {
      "op": "DUP3"
    },
    "6368": {
      "op": "PUSH2",
      "value": "0x17D5"
    },
    "6371": {
      "jump": "i",
      "op": "JUMP"
    },
    "6372": {
      "op": "JUMPDEST"
    },
    "6373": {
      "op": "DUP2"
    },
    "6374": {
      "op": "DUP2"
    },
    "6375": {
      "op": "MSTORE"
    },
    "6376": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "6378": {
      "op": "SWAP2"
    },
    "6379": {
      "op": "SWAP1"
    },
    "6380": {
      "op": "SWAP2"
    },
    "6381": {
      "op": "SHL"
    },
    "6382": {
      "op": "DUP5"
    },
    "6383": {
      "op": "ADD"
    },
    "6384": {
      "op": "DUP4"
    },
    "6385": {
      "op": "ADD"
    },
    "6386": {
      "op": "SWAP1"
    },
    "6387": {
      "op": "DUP12"
    },
    "6388": {
      "op": "DUP2"
    },
    "6389": {
      "op": "ADD"
    },
    "6390": {
      "op": "SWAP1"
    },
    "6391": {
      "op": "DUP16"
    },
    "6392": {
      "op": "DUP4"
    },
    "6393": {
      "op": "GT"
    },
    "6394": {
      "op": "ISZERO"
    },
    "6395": {
      "op": "PUSH2",
      "value": "0x1904"
    },
    "6398": {
      "op": "JUMPI"
    },
    "6399": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6401": {
      "op": "DUP1"
    },
    "6402": {
      "op": "DUP2"
    },
    "6403": {
      "op": "REVERT"
    },
    "6404": {
      "op": "JUMPDEST"
    },
    "6405": {
      "op": "SWAP5"
    },
    "6406": {
      "op": "DUP5"
    },
    "6407": {
      "op": "ADD"
    },
    "6408": {
      "op": "SWAP5"
    },
    "6409": {
      "op": "JUMPDEST"
    },
    "6410": {
      "op": "DUP3"
    },
    "6411": {
      "op": "DUP7"
    },
    "6412": {
      "op": "LT"
    },
    "6413": {
      "op": "ISZERO"
    },
    "6414": {
      "op": "PUSH2",
      "value": "0x1922"
    },
    "6417": {
      "op": "JUMPI"
    },
    "6418": {
      "op": "DUP6"
    },
    "6419": {
      "op": "CALLDATALOAD"
    },
    "6420": {
      "op": "DUP3"
    },
    "6421": {
      "op": "MSTORE"
    },
    "6422": {
      "op": "SWAP5"
    },
    "6423": {
      "op": "DUP13"
    },
    "6424": {
      "op": "ADD"
    },
    "6425": {
      "op": "SWAP5"
    },
    "6426": {
      "op": "SWAP1"
    },
    "6427": {
      "op": "DUP13"
    },
    "6428": {
      "op": "ADD"
    },
    "6429": {
      "op": "SWAP1"
    },
    "6430": {
      "op": "PUSH2",
      "value": "0x1909"
    },
    "6433": {
      "op": "JUMP"
    },
    "6434": {
      "op": "JUMPDEST"
    },
    "6435": {
      "op": "DUP4"
    },
    "6436": {
      "op": "DUP14"
    },
    "6437": {
      "op": "ADD"
    },
    "6438": {
      "op": "MSTORE"
    },
    "6439": {
      "op": "POP"
    },
    "6440": {
      "op": "POP"
    },
    "6441": {
      "op": "DUP6"
    },
    "6442": {
      "op": "MSTORE"
    },
    "6443": {
      "op": "POP"
    },
    "6444": {
      "op": "POP"
    },
    "6445": {
      "op": "SWAP2"
    },
    "6446": {
      "op": "DUP7"
    },
    "6447": {
      "op": "ADD"
    },
    "6448": {
      "op": "SWAP2"
    },
    "6449": {
      "op": "DUP7"
    },
    "6450": {
      "op": "ADD"
    },
    "6451": {
      "op": "PUSH2",
      "value": "0x186E"
    },
    "6454": {
      "op": "JUMP"
    },
    "6455": {
      "op": "JUMPDEST"
    },
    "6456": {
      "op": "POP"
    },
    "6457": {
      "op": "SWAP9"
    },
    "6458": {
      "op": "SWAP8"
    },
    "6459": {
      "op": "POP"
    },
    "6460": {
      "op": "POP"
    },
    "6461": {
      "op": "POP"
    },
    "6462": {
      "op": "POP"
    },
    "6463": {
      "op": "POP"
    },
    "6464": {
      "op": "POP"
    },
    "6465": {
      "op": "POP"
    },
    "6466": {
      "op": "POP"
    },
    "6467": {
      "jump": "o",
      "op": "JUMP"
    },
    "6468": {
      "op": "JUMPDEST"
    },
    "6469": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6471": {
      "op": "DUP3"
    },
    "6472": {
      "op": "NOT"
    },
    "6473": {
      "op": "DUP3"
    },
    "6474": {
      "op": "GT"
    },
    "6475": {
      "op": "ISZERO"
    },
    "6476": {
      "op": "PUSH2",
      "value": "0x1957"
    },
    "6479": {
      "op": "JUMPI"
    },
    "6480": {
      "op": "PUSH2",
      "value": "0x1957"
    },
    "6483": {
      "op": "PUSH2",
      "value": "0x174A"
    },
    "6486": {
      "jump": "i",
      "op": "JUMP"
    },
    "6487": {
      "op": "JUMPDEST"
    },
    "6488": {
      "op": "POP"
    },
    "6489": {
      "op": "ADD"
    },
    "6490": {
      "op": "SWAP1"
    },
    "6491": {
      "jump": "o",
      "op": "JUMP"
    },
    "6492": {
      "op": "JUMPDEST"
    },
    "6493": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6495": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6497": {
      "op": "DUP1"
    },
    "6498": {
      "op": "DUP4"
    },
    "6499": {
      "op": "ADD"
    },
    "6500": {
      "op": "DUP2"
    },
    "6501": {
      "op": "DUP5"
    },
    "6502": {
      "op": "MSTORE"
    },
    "6503": {
      "op": "DUP1"
    },
    "6504": {
      "op": "DUP6"
    },
    "6505": {
      "op": "MLOAD"
    },
    "6506": {
      "op": "DUP1"
    },
    "6507": {
      "op": "DUP4"
    },
    "6508": {
      "op": "MSTORE"
    },
    "6509": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6511": {
      "op": "SWAP3"
    },
    "6512": {
      "op": "POP"
    },
    "6513": {
      "op": "DUP3"
    },
    "6514": {
      "op": "DUP7"
    },
    "6515": {
      "op": "ADD"
    },
    "6516": {
      "op": "SWAP2"
    },
    "6517": {
      "op": "POP"
    },
    "6518": {
      "op": "DUP3"
    },
    "6519": {
      "op": "DUP2"
    },
    "6520": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "6522": {
      "op": "SHL"
    },
    "6523": {
      "op": "DUP8"
    },
    "6524": {
      "op": "ADD"
    },
    "6525": {
      "op": "ADD"
    },
    "6526": {
      "op": "DUP5"
    },
    "6527": {
      "op": "DUP9"
    },
    "6528": {
      "op": "ADD"
    },
    "6529": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6531": {
      "op": "DUP1"
    },
    "6532": {
      "op": "JUMPDEST"
    },
    "6533": {
      "op": "DUP5"
    },
    "6534": {
      "op": "DUP2"
    },
    "6535": {
      "op": "LT"
    },
    "6536": {
      "op": "ISZERO"
    },
    "6537": {
      "op": "PUSH2",
      "value": "0x19ED"
    },
    "6540": {
      "op": "JUMPI"
    },
    "6541": {
      "op": "DUP10"
    },
    "6542": {
      "op": "DUP5"
    },
    "6543": {
      "op": "SUB"
    },
    "6544": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "6546": {
      "op": "NOT"
    },
    "6547": {
      "op": "ADD"
    },
    "6548": {
      "op": "DUP7"
    },
    "6549": {
      "op": "MSTORE"
    },
    "6550": {
      "op": "DUP3"
    },
    "6551": {
      "op": "MLOAD"
    },
    "6552": {
      "op": "DUP1"
    },
    "6553": {
      "op": "MLOAD"
    },
    "6554": {
      "op": "DUP6"
    },
    "6555": {
      "op": "MSTORE"
    },
    "6556": {
      "op": "DUP9"
    },
    "6557": {
      "op": "ADD"
    },
    "6558": {
      "op": "MLOAD"
    },
    "6559": {
      "op": "DUP9"
    },
    "6560": {
      "op": "DUP6"
    },
    "6561": {
      "op": "ADD"
    },
    "6562": {
      "op": "DUP9"
    },
    "6563": {
      "op": "SWAP1"
    },
    "6564": {
      "op": "MSTORE"
    },
    "6565": {
      "op": "DUP1"
    },
    "6566": {
      "op": "MLOAD"
    },
    "6567": {
      "op": "DUP9"
    },
    "6568": {
      "op": "DUP7"
    },
    "6569": {
      "op": "ADD"
    },
    "6570": {
      "op": "DUP2"
    },
    "6571": {
      "op": "SWAP1"
    },
    "6572": {
      "op": "MSTORE"
    },
    "6573": {
      "op": "SWAP1"
    },
    "6574": {
      "op": "DUP10"
    },
    "6575": {
      "op": "ADD"
    },
    "6576": {
      "op": "SWAP1"
    },
    "6577": {
      "op": "DUP4"
    },
    "6578": {
      "op": "SWAP1"
    },
    "6579": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6581": {
      "op": "DUP8"
    },
    "6582": {
      "op": "ADD"
    },
    "6583": {
      "op": "SWAP1"
    },
    "6584": {
      "op": "JUMPDEST"
    },
    "6585": {
      "op": "DUP1"
    },
    "6586": {
      "op": "DUP4"
    },
    "6587": {
      "op": "LT"
    },
    "6588": {
      "op": "ISZERO"
    },
    "6589": {
      "op": "PUSH2",
      "value": "0x19D8"
    },
    "6592": {
      "op": "JUMPI"
    },
    "6593": {
      "op": "DUP4"
    },
    "6594": {
      "op": "MLOAD"
    },
    "6595": {
      "op": "DUP3"
    },
    "6596": {
      "op": "MSTORE"
    },
    "6597": {
      "op": "SWAP3"
    },
    "6598": {
      "op": "DUP12"
    },
    "6599": {
      "op": "ADD"
    },
    "6600": {
      "op": "SWAP3"
    },
    "6601": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6603": {
      "op": "SWAP3"
    },
    "6604": {
      "op": "SWAP1"
    },
    "6605": {
      "op": "SWAP3"
    },
    "6606": {
      "op": "ADD"
    },
    "6607": {
      "op": "SWAP2"
    },
    "6608": {
      "op": "SWAP1"
    },
    "6609": {
      "op": "DUP12"
    },
    "6610": {
      "op": "ADD"
    },
    "6611": {
      "op": "SWAP1"
    },
    "6612": {
      "op": "PUSH2",
      "value": "0x19B8"
    },
    "6615": {
      "op": "JUMP"
    },
    "6616": {
      "op": "JUMPDEST"
    },
    "6617": {
      "op": "POP"
    },
    "6618": {
      "op": "SWAP8"
    },
    "6619": {
      "op": "DUP11"
    },
    "6620": {
      "op": "ADD"
    },
    "6621": {
      "op": "SWAP8"
    },
    "6622": {
      "op": "SWAP6"
    },
    "6623": {
      "op": "POP"
    },
    "6624": {
      "op": "POP"
    },
    "6625": {
      "op": "POP"
    },
    "6626": {
      "op": "SWAP2"
    },
    "6627": {
      "op": "DUP8"
    },
    "6628": {
      "op": "ADD"
    },
    "6629": {
      "op": "SWAP2"
    },
    "6630": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6632": {
      "op": "ADD"
    },
    "6633": {
      "op": "PUSH2",
      "value": "0x1984"
    },
    "6636": {
      "op": "JUMP"
    },
    "6637": {
      "op": "JUMPDEST"
    },
    "6638": {
      "op": "POP"
    },
    "6639": {
      "op": "SWAP2"
    },
    "6640": {
      "op": "SWAP10"
    },
    "6641": {
      "op": "SWAP9"
    },
    "6642": {
      "op": "POP"
    },
    "6643": {
      "op": "POP"
    },
    "6644": {
      "op": "POP"
    },
    "6645": {
      "op": "POP"
    },
    "6646": {
      "op": "POP"
    },
    "6647": {
      "op": "POP"
    },
    "6648": {
      "op": "POP"
    },
    "6649": {
      "op": "POP"
    },
    "6650": {
      "op": "POP"
    },
    "6651": {
      "jump": "o",
      "op": "JUMP"
    },
    "6652": {
      "op": "JUMPDEST"
    },
    "6653": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6655": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6657": {
      "op": "DUP3"
    },
    "6658": {
      "op": "DUP5"
    },
    "6659": {
      "op": "SUB"
    },
    "6660": {
      "op": "SLT"
    },
    "6661": {
      "op": "ISZERO"
    },
    "6662": {
      "op": "PUSH2",
      "value": "0x1A0E"
    },
    "6665": {
      "op": "JUMPI"
    },
    "6666": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6668": {
      "op": "DUP1"
    },
    "6669": {
      "op": "REVERT"
    },
    "6670": {
      "op": "JUMPDEST"
    },
    "6671": {
      "op": "DUP2"
    },
    "6672": {
      "op": "MLOAD"
    },
    "6673": {
      "op": "DUP1"
    },
    "6674": {
      "op": "ISZERO"
    },
    "6675": {
      "op": "ISZERO"
    },
    "6676": {
      "op": "DUP2"
    },
    "6677": {
      "op": "EQ"
    },
    "6678": {
      "op": "PUSH2",
      "value": "0x1098"
    },
    "6681": {
      "op": "JUMPI"
    },
    "6682": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6684": {
      "op": "DUP1"
    },
    "6685": {
      "op": "REVERT"
    },
    "6686": {
      "op": "JUMPDEST"
    },
    "6687": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6689": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6691": {
      "op": "DUP3"
    },
    "6692": {
      "op": "ADD"
    },
    "6693": {
      "op": "DUP8"
    },
    "6694": {
      "op": "DUP4"
    },
    "6695": {
      "op": "MSTORE"
    },
    "6696": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6698": {
      "op": "DUP8"
    },
    "6699": {
      "op": "DUP2"
    },
    "6700": {
      "op": "DUP6"
    },
    "6701": {
      "op": "ADD"
    },
    "6702": {
      "op": "MSTORE"
    },
    "6703": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6705": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6707": {
      "op": "DUP6"
    },
    "6708": {
      "op": "ADD"
    },
    "6709": {
      "op": "MSTORE"
    },
    "6710": {
      "op": "DUP2"
    },
    "6711": {
      "op": "DUP8"
    },
    "6712": {
      "op": "MLOAD"
    },
    "6713": {
      "op": "DUP1"
    },
    "6714": {
      "op": "DUP5"
    },
    "6715": {
      "op": "MSTORE"
    },
    "6716": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "6718": {
      "op": "DUP7"
    },
    "6719": {
      "op": "ADD"
    },
    "6720": {
      "op": "SWAP2"
    },
    "6721": {
      "op": "POP"
    },
    "6722": {
      "op": "DUP3"
    },
    "6723": {
      "op": "DUP10"
    },
    "6724": {
      "op": "ADD"
    },
    "6725": {
      "op": "SWAP4"
    },
    "6726": {
      "op": "POP"
    },
    "6727": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6729": {
      "op": "JUMPDEST"
    },
    "6730": {
      "op": "DUP2"
    },
    "6731": {
      "op": "DUP2"
    },
    "6732": {
      "op": "LT"
    },
    "6733": {
      "op": "ISZERO"
    },
    "6734": {
      "op": "PUSH2",
      "value": "0x1A6E"
    },
    "6737": {
      "op": "JUMPI"
    },
    "6738": {
      "op": "DUP5"
    },
    "6739": {
      "op": "MLOAD"
    },
    "6740": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6742": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6744": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6746": {
      "op": "SHL"
    },
    "6747": {
      "op": "SUB"
    },
    "6748": {
      "op": "AND"
    },
    "6749": {
      "op": "DUP4"
    },
    "6750": {
      "op": "MSTORE"
    },
    "6751": {
      "op": "SWAP4"
    },
    "6752": {
      "op": "DUP4"
    },
    "6753": {
      "op": "ADD"
    },
    "6754": {
      "op": "SWAP4"
    },
    "6755": {
      "op": "SWAP2"
    },
    "6756": {
      "op": "DUP4"
    },
    "6757": {
      "op": "ADD"
    },
    "6758": {
      "op": "SWAP2"
    },
    "6759": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6761": {
      "op": "ADD"
    },
    "6762": {
      "op": "PUSH2",
      "value": "0x1A49"
    },
    "6765": {
      "op": "JUMP"
    },
    "6766": {
      "op": "JUMPDEST"
    },
    "6767": {
      "op": "POP"
    },
    "6768": {
      "op": "POP"
    },
    "6769": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6771": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6773": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6775": {
      "op": "SHL"
    },
    "6776": {
      "op": "SUB"
    },
    "6777": {
      "op": "SWAP7"
    },
    "6778": {
      "op": "SWAP1"
    },
    "6779": {
      "op": "SWAP7"
    },
    "6780": {
      "op": "AND"
    },
    "6781": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6783": {
      "op": "DUP6"
    },
    "6784": {
      "op": "ADD"
    },
    "6785": {
      "op": "MSTORE"
    },
    "6786": {
      "op": "POP"
    },
    "6787": {
      "op": "POP"
    },
    "6788": {
      "op": "POP"
    },
    "6789": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "6791": {
      "op": "ADD"
    },
    "6792": {
      "op": "MSTORE"
    },
    "6793": {
      "op": "SWAP4"
    },
    "6794": {
      "op": "SWAP3"
    },
    "6795": {
      "op": "POP"
    },
    "6796": {
      "op": "POP"
    },
    "6797": {
      "op": "POP"
    },
    "6798": {
      "jump": "o",
      "op": "JUMP"
    },
    "6799": {
      "op": "JUMPDEST"
    },
    "6800": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6802": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6804": {
      "op": "DUP1"
    },
    "6805": {
      "op": "DUP4"
    },
    "6806": {
      "op": "DUP6"
    },
    "6807": {
      "op": "SUB"
    },
    "6808": {
      "op": "SLT"
    },
    "6809": {
      "op": "ISZERO"
    },
    "6810": {
      "op": "PUSH2",
      "value": "0x1AA2"
    },
    "6813": {
      "op": "JUMPI"
    },
    "6814": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6816": {
      "op": "DUP1"
    },
    "6817": {
      "op": "REVERT"
    },
    "6818": {
      "op": "JUMPDEST"
    },
    "6819": {
      "op": "DUP3"
    },
    "6820": {
      "op": "MLOAD"
    },
    "6821": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "6830": {
      "op": "DUP2"
    },
    "6831": {
      "op": "GT"
    },
    "6832": {
      "op": "ISZERO"
    },
    "6833": {
      "op": "PUSH2",
      "value": "0x1AB9"
    },
    "6836": {
      "op": "JUMPI"
    },
    "6837": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6839": {
      "op": "DUP1"
    },
    "6840": {
      "op": "REVERT"
    },
    "6841": {
      "op": "JUMPDEST"
    },
    "6842": {
      "op": "DUP4"
    },
    "6843": {
      "op": "ADD"
    },
    "6844": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6846": {
      "op": "DUP2"
    },
    "6847": {
      "op": "ADD"
    },
    "6848": {
      "op": "DUP6"
    },
    "6849": {
      "op": "SGT"
    },
    "6850": {
      "op": "PUSH2",
      "value": "0x1ACA"
    },
    "6853": {
      "op": "JUMPI"
    },
    "6854": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6856": {
      "op": "DUP1"
    },
    "6857": {
      "op": "REVERT"
    },
    "6858": {
      "op": "JUMPDEST"
    },
    "6859": {
      "op": "DUP1"
    },
    "6860": {
      "op": "MLOAD"
    },
    "6861": {
      "op": "PUSH2",
      "value": "0x1AD8"
    },
    "6864": {
      "op": "PUSH2",
      "value": "0x1846"
    },
    "6867": {
      "op": "DUP3"
    },
    "6868": {
      "op": "PUSH2",
      "value": "0x17D5"
    },
    "6871": {
      "jump": "i",
      "op": "JUMP"
    },
    "6872": {
      "op": "JUMPDEST"
    },
    "6873": {
      "op": "DUP2"
    },
    "6874": {
      "op": "DUP2"
    },
    "6875": {
      "op": "MSTORE"
    },
    "6876": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "6878": {
      "op": "SWAP2"
    },
    "6879": {
      "op": "SWAP1"
    },
    "6880": {
      "op": "SWAP2"
    },
    "6881": {
      "op": "SHL"
    },
    "6882": {
      "op": "DUP3"
    },
    "6883": {
      "op": "ADD"
    },
    "6884": {
      "op": "DUP4"
    },
    "6885": {
      "op": "ADD"
    },
    "6886": {
      "op": "SWAP1"
    },
    "6887": {
      "op": "DUP4"
    },
    "6888": {
      "op": "DUP2"
    },
    "6889": {
      "op": "ADD"
    },
    "6890": {
      "op": "SWAP1"
    },
    "6891": {
      "op": "DUP8"
    },
    "6892": {
      "op": "DUP4"
    },
    "6893": {
      "op": "GT"
    },
    "6894": {
      "op": "ISZERO"
    },
    "6895": {
      "op": "PUSH2",
      "value": "0x1AF7"
    },
    "6898": {
      "op": "JUMPI"
    },
    "6899": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6901": {
      "op": "DUP1"
    },
    "6902": {
      "op": "REVERT"
    },
    "6903": {
      "op": "JUMPDEST"
    },
    "6904": {
      "op": "SWAP3"
    },
    "6905": {
      "op": "DUP5"
    },
    "6906": {
      "op": "ADD"
    },
    "6907": {
      "op": "SWAP3"
    },
    "6908": {
      "op": "JUMPDEST"
    },
    "6909": {
      "op": "DUP3"
    },
    "6910": {
      "op": "DUP5"
    },
    "6911": {
      "op": "LT"
    },
    "6912": {
      "op": "ISZERO"
    },
    "6913": {
      "op": "PUSH2",
      "value": "0x1B15"
    },
    "6916": {
      "op": "JUMPI"
    },
    "6917": {
      "op": "DUP4"
    },
    "6918": {
      "op": "MLOAD"
    },
    "6919": {
      "op": "DUP3"
    },
    "6920": {
      "op": "MSTORE"
    },
    "6921": {
      "op": "SWAP3"
    },
    "6922": {
      "op": "DUP5"
    },
    "6923": {
      "op": "ADD"
    },
    "6924": {
      "op": "SWAP3"
    },
    "6925": {
      "op": "SWAP1"
    },
    "6926": {
      "op": "DUP5"
    },
    "6927": {
      "op": "ADD"
    },
    "6928": {
      "op": "SWAP1"
    },
    "6929": {
      "op": "PUSH2",
      "value": "0x1AFC"
    },
    "6932": {
      "op": "JUMP"
    },
    "6933": {
      "op": "JUMPDEST"
    },
    "6934": {
      "op": "SWAP8"
    },
    "6935": {
      "op": "SWAP7"
    },
    "6936": {
      "op": "POP"
    },
    "6937": {
      "op": "POP"
    },
    "6938": {
      "op": "POP"
    },
    "6939": {
      "op": "POP"
    },
    "6940": {
      "op": "POP"
    },
    "6941": {
      "op": "POP"
    },
    "6942": {
      "op": "POP"
    },
    "6943": {
      "jump": "o",
      "op": "JUMP"
    },
    "6944": {
      "op": "JUMPDEST"
    },
    "6945": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6947": {
      "op": "DUP3"
    },
    "6948": {
      "op": "DUP3"
    },
    "6949": {
      "op": "LT"
    },
    "6950": {
      "op": "ISZERO"
    },
    "6951": {
      "op": "PUSH2",
      "value": "0x1B32"
    },
    "6954": {
      "op": "JUMPI"
    },
    "6955": {
      "op": "PUSH2",
      "value": "0x1B32"
    },
    "6958": {
      "op": "PUSH2",
      "value": "0x174A"
    },
    "6961": {
      "jump": "i",
      "op": "JUMP"
    },
    "6962": {
      "op": "JUMPDEST"
    },
    "6963": {
      "op": "POP"
    },
    "6964": {
      "op": "SUB"
    },
    "6965": {
      "op": "SWAP1"
    },
    "6966": {
      "jump": "o",
      "op": "JUMP"
    },
    "6967": {
      "op": "JUMPDEST"
    },
    "6968": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "6973": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6975": {
      "op": "SHL"
    },
    "6976": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6978": {
      "op": "MSTORE"
    },
    "6979": {
      "op": "PUSH1",
      "value": "0x31"
    },
    "6981": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "6983": {
      "op": "MSTORE"
    },
    "6984": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6986": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6988": {
      "op": "REVERT"
    }
  },
  "sha1": "5de422ac45087d603738186f38559f15ec378978",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport { ExchangeAdapter } from \"./ExchangeAdapter.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IUniswapV2Router02 } from \"@uniswap-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\n\ninterface KeeperCompatibleInterface {\n    function checkUpkeep(bytes calldata checkData)\n        external\n        returns (bool upkeepNeeded, bytes memory performData);\n\n    function performUpkeep(bytes calldata performData) external;\n}\n\ncontract Trickle is KeeperCompatibleInterface, ExchangeAdapter {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    /* ============ Structs ========== */\n\n    // This struct represents a single recurring order set by a user\n    struct RecurringOrder {\n        address user;\n        uint256 sellAmount;\n        uint256 lastExecution;\n        uint256 interval;\n    }\n\n    // This struct represents the combination of sell / buy token and all the orders for that pair\n    struct TokenPair {\n        address sellToken;\n        address buyToken;\n        mapping(bytes32 => RecurringOrder) orders;\n        EnumerableSet.Bytes32Set registeredOrders;\n    }\n\n    // Data structure to return in checkUpkeep defining which orders will need to get executed\n    struct TokenPairPendingOrders {\n        bytes32 tokenPairHash;\n        bytes32[] orders;\n    }\n\n    /* ============ Events ========== */\n    event TokenPairCreated(address sellToken, address buyToken);\n\n    event RecurringOrderUpdated(\n        address sellToken,\n        address buyToken,\n        uint256 sellAmount,\n        uint256 interval,\n        uint256 startTimestamp\n    );\n\n    event SwapFailed(bytes32 tokenPairHash, bytes32 orderHash);\n    event SwapSucceeded(bytes32 tokenPairHash, bytes32 orderHash);\n\n    /* ============ State Varibles ========== */\n    // Enumerable mappings to be able to later iterate over the orders of a single user\n    mapping(address => EnumerableSet.Bytes32Set) userToTokenPairList;\n    mapping(address => mapping(bytes32 => EnumerableSet.Bytes32Set)) userToOrderHash;\n\n    // Mapping of a hash of sell / buy token on the TokenPair data\n    mapping(bytes32 => TokenPair) tokenPairs;\n    // Register initialized pairs in an enumerable set to be able to iterate over them\n    EnumerableSet.Bytes32Set initializedTokenPairs;\n\n    uint256 public minimumUpkeepInterval;\n    uint256 lastUpkeep;\n\n    /* ============ Public Methods ========== */\n\n    /**\n     * Creates new instance of Trickle contract\n     *\n     * @param _minimumUpkeepInterval   Minimum interval between upkeeps independent of users orders\n     * @param _exchangeRouter          Address of Sushiswap / UniswapV2 router contract to execute trades against\n     *\n     */\n    constructor(\n        uint256 _minimumUpkeepInterval,\n        IUniswapV2Router02 _exchangeRouter\n    ) public ExchangeAdapter(_exchangeRouter) {\n        minimumUpkeepInterval = _minimumUpkeepInterval;\n    }\n\n    /**\n     * Creates a new recurring order for the given User starting immediately.\n     *\n     * @param _sellToken        Address of token to sell\n     * @param _buyToken         Address of token to buy\n     * @param _sellAmount       Amount of sell token to sell in each trade\n     * @param _interval         Interval of execution in ms\n     *\n     */\n    function setRecurringOrder(\n        address _sellToken,\n        address _buyToken,\n        uint256 _sellAmount,\n        uint256 _interval\n    ) public {\n        setRecurringOrderWithStartTimestamp(\n            _sellToken,\n            _buyToken,\n            _sellAmount,\n            _interval,\n            0\n        );\n    }\n\n    /**\n     * Creates a new recurring order for the given User starting from the given block timestamp.\n     *\n     * @param _sellToken        Address of token to sell\n     * @param _buyToken         Address of token to buy\n     * @param _sellAmount       Amount of sell token to sell in each trade\n     * @param _interval         Interval of execution in ms\n     * @param _startTimestamp   Block timestamp from which to start the execution of this order\n     *\n     */\n    function setRecurringOrderWithStartTimestamp(\n        address _sellToken,\n        address _buyToken,\n        uint256 _sellAmount,\n        uint256 _interval,\n        uint256 _startTimestamp\n    ) public {\n        require(_sellAmount > 0, \"amount cannot be 0\");\n        require(_sellToken != address(0), \"sellToken cannot be zero address\");\n        require(_buyToken != address(0), \"buyToken cannot be zero address\");\n        require(\n            _interval > minimumUpkeepInterval,\n            \"interval has to be greater than minimumUpkeepInterval\"\n        );\n        bytes32 tokenPairHash = keccak256(\n            abi.encodePacked(_sellToken, _buyToken)\n        );\n\n        TokenPair storage tokenPair = tokenPairs[tokenPairHash];\n        if (!initializedTokenPairs.contains(tokenPairHash)) {\n            tokenPair.sellToken = _sellToken;\n            tokenPair.buyToken = _buyToken;\n            initializedTokenPairs.add(tokenPairHash);\n            emit TokenPairCreated(_sellToken, _buyToken);\n        }\n        userToTokenPairList[msg.sender].add(tokenPairHash);\n\n        bytes32 orderHash = keccak256(\n            abi.encodePacked(\n                msg.sender,\n                _sellAmount,\n                _interval,\n                _startTimestamp\n            )\n        );\n        RecurringOrder storage order = tokenPair.orders[orderHash];\n        if (!tokenPair.registeredOrders.contains(orderHash)) {\n            order.user = msg.sender;\n            tokenPair.registeredOrders.add(orderHash);\n        }\n        userToOrderHash[msg.sender][tokenPairHash].add(orderHash);\n\n        order.sellAmount = _sellAmount;\n        order.lastExecution = _startTimestamp;\n        order.interval = _interval;\n        emit RecurringOrderUpdated(\n            _sellToken,\n            _buyToken,\n            _sellAmount,\n            _interval,\n            _startTimestamp\n        );\n    }\n\n    /**\n     * Delete a given recurring order\n     *\n     * @param _tokenPairHash    Hash of sell and buyToken addresses identifying the tokenPair.\n     * @param _orderHash        Hash of remaining order data (user address, amount, interval)\n     *\n     */\n    function deleteRecurringOrder(bytes32 _tokenPairHash, bytes32 _orderHash)\n        external\n    {\n        TokenPair storage tokenPair = tokenPairs[_tokenPairHash];\n        require(\n            tokenPair.registeredOrders.contains(_orderHash),\n            \"ORDER TO DELETE DOES NOT EXIST\"\n        );\n        require(\n            tokenPair.orders[_orderHash].user == msg.sender,\n            \"CANNOT DELETE ORDER OF DIFFERENT USER\"\n        );\n        tokenPair.registeredOrders.remove(_orderHash);\n    }\n\n    /**\n     * Utility function for frontend to get data on a given order\n     *\n     * @param _tokenPairHash    Hash of sell and buyToken addresses identifying the tokenPair.\n     * @param _orderHash        Hash of remaining order data (user address, amount, interval)\n     *\n     * @return Instance of RecurringOrder struct containing amount interval etc.\n     *\n     */\n    function getOrderData(bytes32 _tokenPairHash, bytes32 _orderHash)\n        external\n        view\n        returns (RecurringOrder memory)\n    {\n        TokenPair storage tokenPair = tokenPairs[_tokenPairHash];\n        require(\n            tokenPair.registeredOrders.contains(_orderHash),\n            \"ORDER DOES NOT EXIST\"\n        );\n        return tokenPair.orders[_orderHash];\n    }\n\n    /**\n     * Utility function for frontend to get data on a given token pair\n     *\n     * @param _tokenPairHash    Hash of sell and buyToken addresses identifying the tokenPair.\n     *\n     * @return Address of token to be sold\n     * @return Address of token to be bought\n     *\n     */\n    function getTokenPairData(bytes32 _tokenPairHash)\n        external\n        view\n        returns (address, address)\n    {\n        TokenPair storage tokenPair = tokenPairs[_tokenPairHash];\n        return (tokenPair.sellToken, tokenPair.buyToken);\n    }\n\n    /**\n     * Utility function for frontend to get all token pairs for which the given user has set orders\n     *\n     * @param _user    Address of the user for which to query active token pairs\n     *\n     * @return Array of tokenPair-hashes identifying combinations of sell / buyToken for which the user has active orders\n     *\n     */\n    function getTokenPairs(address _user)\n        external\n        view\n        returns (bytes32[] memory)\n    {\n        uint256 numTokenPairs = userToTokenPairList[_user].length();\n        bytes32[] memory tokenPairHashes = new bytes32[](numTokenPairs);\n        for (uint256 i; i < numTokenPairs; i++) {\n            tokenPairHashes[i] = userToTokenPairList[_user].at(i);\n        }\n        return tokenPairHashes;\n    }\n\n    /**\n     * List hashes of active orders for given tokenPair and user\n     *\n     * @param _user             Address of the user for which to query active token pairs\n     * @param _tokenPairHash    Hash of sell and buyToken addresses identifying the tokenPair.\n     *\n     * @return Array of order-hashes identifying the orders set for given user and token pair\n     *\n     */\n    function getOrders(address _user, bytes32 _tokenPairHash)\n        external\n        view\n        returns (bytes32[] memory)\n    {\n        uint256 numOrders = userToOrderHash[_user][_tokenPairHash].length();\n        bytes32[] memory orderHashes = new bytes32[](numOrders);\n        for (uint256 i; i < numOrders; i++) {\n            orderHashes[i] = userToOrderHash[_user][_tokenPairHash].at(i);\n        }\n        return orderHashes;\n    }\n\n    /**\n     * Check if Upkeep is needed and generate performData\n     *\n     *\n     * @return upkeepNeeded     Boolean indicating wether upkeep needs to be performed\n     * @return performData      Serialized array of structs identifying orders to be executed in next upkeep\n     *\n     */\n    function checkUpkeep(bytes calldata)\n        external\n        view\n        override\n        returns (bool upkeepNeeded, bytes memory performData)\n    {\n        if (block.timestamp < lastUpkeep + minimumUpkeepInterval) {\n            return (upkeepNeeded, performData);\n        }\n\n        uint256 numPairs = initializedTokenPairs.length();\n        TokenPairPendingOrders[]\n            memory ordersToExecute = new TokenPairPendingOrders[](numPairs);\n        uint256 l;\n        for (uint256 i = 0; i < numPairs; i++) {\n            bytes32 tokenPairHash = initializedTokenPairs.at(i);\n            uint256 numOrders = tokenPairs[tokenPairHash]\n                .registeredOrders\n                .length();\n            if (numOrders > 0) {\n                bytes32[] memory orders = new bytes32[](numOrders);\n                uint256 k;\n                for (uint256 j; j < numOrders; j++) {\n                    bytes32 orderHash = tokenPairs[tokenPairHash]\n                        .registeredOrders\n                        .at(j);\n                    RecurringOrder memory order = tokenPairs[tokenPairHash]\n                        .orders[orderHash];\n                    if (\n                        block.timestamp > (order.lastExecution + order.interval)\n                    ) {\n                        orders[k] = orderHash;\n                        k++;\n                        upkeepNeeded = true;\n                    }\n                }\n                ordersToExecute[l] = TokenPairPendingOrders(\n                    tokenPairHash,\n                    orders\n                );\n                l++;\n            }\n        }\n        performData = abi.encode(ordersToExecute);\n    }\n\n    /**\n     * Perform Upkeep executing all pending orders\n     *\n     * @param performData      Serialized array of structs identifying orders to be executed as returned by checkUpkeep\n     *\n     */\n    function performUpkeep(bytes calldata performData) external override {\n        TokenPairPendingOrders[] memory ordersToExecute = abi.decode(\n            performData,\n            (TokenPairPendingOrders[])\n        );\n        if (ordersToExecute.length > 0) {\n            _executeOrdersForAllTokenPairs(ordersToExecute);\n        }\n    }\n\n    /**\n     * Internal helper function to execute all pending orders for all token pairs\n     *\n     * @param allPendingOrders   Array of structs with one element for each token pair that has pending orders. Each element contains a list of order hashes that need to be executed for this token pair\n     *\n     */\n    function _executeOrdersForAllTokenPairs(\n        TokenPairPendingOrders[] memory allPendingOrders\n    ) internal {\n        for (uint256 i; i < allPendingOrders.length; i++) {\n            TokenPairPendingOrders\n                memory tokenPairPendingOrders = allPendingOrders[i];\n            if (tokenPairPendingOrders.tokenPairHash == bytes32(0)) break;\n            _executeOrdersForSingleTokenPair(tokenPairPendingOrders);\n        }\n    }\n\n    /**\n     * Execute orders for one token pair\n     *\n     * @param pendingOrders   Struct containing tokenPair hash and list of order hashes that need to be executed for this token pair.\n     *\n     */\n    function _executeOrdersForSingleTokenPair(\n        TokenPairPendingOrders memory pendingOrders\n    ) internal {\n        if (pendingOrders.orders.length == 0) return;\n        if (!initializedTokenPairs.contains(pendingOrders.tokenPairHash))\n            return;\n\n        TokenPair storage tokenPair = tokenPairs[pendingOrders.tokenPairHash];\n        IERC20 sellToken = IERC20(tokenPair.sellToken);\n        IERC20 buyToken = IERC20(tokenPair.buyToken);\n\n        for (uint256 i; i < pendingOrders.orders.length; i++) {\n            bytes32 orderHash = pendingOrders.orders[i];\n\n            // ZeroHash signals last order to be executed\n            if (orderHash == bytes32(0)) break;\n            // Check that order is registered / not deleted\n            if (!tokenPair.registeredOrders.contains(orderHash)) break;\n\n            RecurringOrder storage recurringOrder = tokenPair.orders[orderHash];\n\n            //Check that order is actually ready to be excuted\n            if (\n                block.timestamp <=\n                (recurringOrder.lastExecution + recurringOrder.interval)\n            ) break; \n\n            uint256 sellAmount = recurringOrder.sellAmount;\n            address user = recurringOrder.user;\n            bool success = swapExactTokensForTokens(\n                sellToken,\n                buyToken,\n                sellAmount,\n                user\n            );\n            if (success) {\n                recurringOrder.lastExecution = block.timestamp;\n                emit SwapSucceeded(pendingOrders.tokenPairHash, orderHash);\n            } else {\n                emit SwapFailed(pendingOrders.tokenPairHash, orderHash);\n            }\n        }\n    }\n}\n",
  "sourceMap": "593:14284:13:-:0;;;2824:205;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1637:1:1;1742:7;:22;2949:15:13;867:23:0;666:10:5;867:9:0;:23::i;:::-;1050:14:12;:32;;-1:-1:-1;;;;;;1050:32:12;-1:-1:-1;;;;;1050:32:12;;;;;;;;;;-1:-1:-1;2976:21:13::1;:46:::0;593:14284;;2041:169:0;2115:6;;;-1:-1:-1;;;;;2131:17:0;;;-1:-1:-1;;;;;;2131:17:0;;;;;;;2163:40;;2115:6;;;2131:17;2115:6;;2163:40;;2096:16;;2163:40;2086:124;2041:169;:::o;14:378:14:-;120:6;128;181:2;169:9;160:7;156:23;152:32;149:52;;;197:1;194;187:12;149:52;220:16;;279:2;264:18;;258:25;220:16;;-1:-1:-1;;;;;;312:31:14;;302:42;;292:70;;358:1;355;348:12;292:70;381:5;371:15;;;14:378;;;;;:::o;:::-;593:14284:13;;;;;;",
  "sourcePath": "contracts/Trickle.sol",
  "type": "contract"
}

